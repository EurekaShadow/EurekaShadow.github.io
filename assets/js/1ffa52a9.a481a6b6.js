"use strict";(self.webpackChunktest_site=self.webpackChunktest_site||[]).push([[8306],{8775:n=>{n.exports=JSON.parse('{"permalink":"/blog/LeetCode380","editUrl":"https://github.com/EurekaShadow/EurekaShadow.github.io/tree/master/blog/2025-08-05-LeetCode380.mdx","source":"@site/blog/2025-08-05-LeetCode380.mdx","title":"O(1)\u65f6\u95f4\u63d2\u5165\u3001\u5220\u9664\u548c\u83b7\u53d6\u968f\u673a\u5143\u7d20","description":"\u529b\u6263\u9762\u8bd5\u7ecf\u5178\u2014\u2014380\u9898","date":"2025-08-05T00:00:00.000Z","tags":[{"inline":false,"label":"\u6570\u7ec4","permalink":"/blog/tags/\u6570\u7ec4","description":"\u5173\u4e8e\u6570\u7ec4\u7684\u9898\u76ee"}],"readingTime":16.42,"hasTruncateMarker":true,"authors":[{"name":"Eureka X","title":"Mr.Nobody","url":"https://github.com/EurekaShadow","page":{"permalink":"/blog/authors/all-Eureka-X-articles"},"socials":{"github":"https://github.com/EurekaShadow"},"imageURL":"https://github.com/EurekaShadow.png","key":"eurekaX"}],"frontMatter":{"slug":"LeetCode380","title":"O(1)\u65f6\u95f4\u63d2\u5165\u3001\u5220\u9664\u548c\u83b7\u53d6\u968f\u673a\u5143\u7d20","authors":"eurekaX","tags":["\u6570\u7ec4"]},"unlisted":false,"lastUpdatedAt":1754399904000,"nextItem":{"title":"H \u6307\u6570","permalink":"/blog/LeetCode274"}}')},9761:(n,r,e)=>{e.r(r),e.d(r,{assets:()=>d,contentTitle:()=>m,default:()=>_,frontMatter:()=>h,metadata:()=>t,toc:()=>l});var t=e(8775),a=e(4848),i=e(8453),s=e(1873);const h={slug:"LeetCode380",title:"O(1)\u65f6\u95f4\u63d2\u5165\u3001\u5220\u9664\u548c\u83b7\u53d6\u968f\u673a\u5143\u7d20",authors:"eurekaX",tags:["\u6570\u7ec4"]},m=void 0,d={authorsImageUrls:[void 0]},l=[{value:"<B2>\u529b\u6263\u9762\u8bd5\u7ecf\u5178\u2014\u2014380\u9898</B2>",id:"\u529b\u6263\u9762\u8bd5\u7ecf\u5178380\u9898",level:3},{value:"\ud83d\udca1 \u53c2\u8003\u4ee3\u7801\uff1a",id:"-\u53c2\u8003\u4ee3\u7801",level:3},{value:"\ud83d\udcd6 \u603b\u7ed3\uff1a",id:"-\u603b\u7ed3",level:3},{value:"1\ufe0f\u20e3 \u9898\u76ee\u6838\u5fc3\u4fe1\u606f",id:"1\ufe0f\u20e3-\u9898\u76ee\u6838\u5fc3\u4fe1\u606f",level:2},{value:"2\ufe0f\u20e3 \u5b9e\u73b0\u539f\u7406",id:"2\ufe0f\u20e3-\u5b9e\u73b0\u539f\u7406",level:2},{value:"3\ufe0f\u20e3 \u5173\u952e\u70b9\u89e3\u6790",id:"3\ufe0f\u20e3-\u5173\u952e\u70b9\u89e3\u6790",level:2},{value:"\ud83c\udfaf \u4ee3\u7801\u6280\u5de7",id:"-\u4ee3\u7801\u6280\u5de7",level:3},{value:"4\ufe0f\u20e3 \u4f7f\u7528\u573a\u666f",id:"4\ufe0f\u20e3-\u4f7f\u7528\u573a\u666f",level:2},{value:"\u2705 \u9002\u7528\u60c5\u51b5\uff1a",id:"-\u9002\u7528\u60c5\u51b5",level:3},{value:"\u26a0\ufe0f \u524d\u63d0\u6761\u4ef6\uff1a",id:"\ufe0f-\u524d\u63d0\u6761\u4ef6",level:3},{value:"5\ufe0f\u20e3 \u590d\u6742\u5ea6\u5206\u6790",id:"5\ufe0f\u20e3-\u590d\u6742\u5ea6\u5206\u6790",level:2},{value:"6\ufe0f\u20e3 \u6ce8\u610f\u4e8b\u9879",id:"6\ufe0f\u20e3-\u6ce8\u610f\u4e8b\u9879",level:2},{value:"\ud83d\udea9 \u8fb9\u754c\u60c5\u51b5\uff1a",id:"-\u8fb9\u754c\u60c5\u51b5",level:3},{value:"\ud83d\udca5 \u6613\u9519\u70b9\uff1a",id:"-\u6613\u9519\u70b9",level:3},{value:"7\ufe0f\u20e3 \u60d1\u4e4b\u672a\u89e3",id:"7\ufe0f\u20e3-\u60d1\u4e4b\u672a\u89e3",level:2}];function p(n){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...n.components},{Details:e}=r;return e||function(n,r){throw new Error("Expected "+(r?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(r.h3,{id:"\u529b\u6263\u9762\u8bd5\u7ecf\u5178380\u9898",children:(0,a.jsx)(s.B2,{children:(0,a.jsx)(r.a,{href:"https://leetcode.cn/problems/insert-delete-getrandom-o1/?envType=study-plan-v2&envId=top-interview-150",title:"\u529b\u6263",children:"\u529b\u6263\u9762\u8bd5\u7ecf\u5178\u2014\u2014380\u9898"})})}),"\n",(0,a.jsx)(r.h3,{id:"-\u53c2\u8003\u4ee3\u7801",children:"\ud83d\udca1 \u53c2\u8003\u4ee3\u7801\uff1a"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-c",children:"/**\r\n * \u54c8\u5e0c\u8868\u8282\u70b9\u7ed3\u6784\u4f53\r\n * \u7528\u4e8e\u5b58\u50a8\u5143\u7d20\u503c\u548c\u5176\u5728\u6570\u7ec4\u4e2d\u7684\u7d22\u5f15\u4f4d\u7f6e\r\n */\r\ntypedef struct {\r\n    int value;              // \u5143\u7d20\u503c\r\n    int index;              // \u8be5\u5143\u7d20\u5728\u6570\u7ec4\u4e2d\u7684\u7d22\u5f15\u4f4d\u7f6e\r\n    UT_hash_handle hh;      // uthash\u5e93\u6240\u9700\u7684\u53e5\u67c4\r\n} HashItem;\r\n\r\n/**\r\n * RandomizedSet\u7ed3\u6784\u4f53\r\n * \u7ec4\u5408\u6570\u7ec4\u548c\u54c8\u5e0c\u8868\u5b9e\u73b0O(1)\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u63d2\u5165\u3001\u5220\u9664\u548c\u968f\u673a\u83b7\u53d6\u64cd\u4f5c\r\n */\r\ntypedef struct {\r\n    int* nums;              // \u5b58\u50a8\u5b9e\u9645\u5143\u7d20\u7684\u6570\u7ec4\r\n    int numsSize;           // \u5f53\u524d\u6570\u7ec4\u4e2d\u5143\u7d20\u7684\u4e2a\u6570\r\n    HashItem* indices;      // \u54c8\u5e0c\u8868\uff0c\u5b58\u50a8\u5143\u7d20\u503c\u5230\u7d22\u5f15\u7684\u6620\u5c04\r\n} RandomizedSet;\r\n\r\n/**\r\n * \u521b\u5efaRandomizedSet\u5bf9\u8c61\r\n * @return \u65b0\u521b\u5efa\u7684RandomizedSet\u5bf9\u8c61\u6307\u9488\r\n */\r\nRandomizedSet* randomizedSetCreate() {\r\n    srand(time(NULL)); // \u521d\u59cb\u5316\u968f\u673a\u6570\u79cd\u5b50\r\n    RandomizedSet* obj = (RandomizedSet*)malloc(sizeof(RandomizedSet));\r\n    obj->nums = (int*)malloc(sizeof(int) * 200000); // \u9884\u5206\u914d\u8db3\u591f\u7a7a\u95f4\r\n    obj->numsSize = 0;                              // \u521d\u59cb\u5143\u7d20\u4e2a\u6570\u4e3a0\r\n    obj->indices = NULL;                            // \u54c8\u5e0c\u8868\u521d\u59cb\u4e3a\u7a7a\r\n    return obj;\r\n}\r\n\r\n/**\r\n * \u5411\u96c6\u5408\u4e2d\u63d2\u5165\u5143\u7d20\r\n * @param obj RandomizedSet\u5bf9\u8c61\u6307\u9488\r\n * @param val \u8981\u63d2\u5165\u7684\u5143\u7d20\u503c\r\n * @return \u63d2\u5165\u6210\u529f\u8fd4\u56detrue\uff0c\u5143\u7d20\u5df2\u5b58\u5728\u8fd4\u56defalse\r\n */\r\nbool randomizedSetInsert(RandomizedSet* obj, int val) {\r\n    HashItem* tmp = NULL;\r\n    // \u5728\u54c8\u5e0c\u8868\u4e2d\u67e5\u627e\u5143\u7d20\u662f\u5426\u5df2\u5b58\u5728\r\n    HASH_FIND_INT(obj->indices, &val, tmp);\r\n    if (tmp != NULL) {\r\n        return false; // \u5143\u7d20\u5df2\u5b58\u5728\uff0c\u63d2\u5165\u5931\u8d25\r\n    }\r\n    \r\n    // \u5c06\u65b0\u5143\u7d20\u6dfb\u52a0\u5230\u6570\u7ec4\u672b\u5c3e\r\n    obj->nums[obj->numsSize] = val;\r\n    \r\n    // \u5728\u54c8\u5e0c\u8868\u4e2d\u521b\u5efa\u65b0\u8282\u70b9\uff0c\u8bb0\u5f55\u5143\u7d20\u503c\u548c\u5176\u5728\u6570\u7ec4\u4e2d\u7684\u7d22\u5f15\r\n    tmp = (HashItem*)malloc(sizeof(HashItem));\r\n    tmp->value = val;\r\n    tmp->index = obj->numsSize;\r\n    HASH_ADD_INT(obj->indices, value, tmp);\r\n    \r\n    obj->numsSize++; // \u6570\u7ec4\u5143\u7d20\u4e2a\u6570\u589e\u52a0\r\n    return true;\r\n}\r\n\r\n/**\r\n * \u4ece\u96c6\u5408\u4e2d\u5220\u9664\u5143\u7d20\r\n * @param obj RandomizedSet\u5bf9\u8c61\u6307\u9488\r\n * @param val \u8981\u5220\u9664\u7684\u5143\u7d20\u503c\r\n * @return \u5220\u9664\u6210\u529f\u8fd4\u56detrue\uff0c\u5143\u7d20\u4e0d\u5b58\u5728\u8fd4\u56defalse\r\n */\r\nbool randomizedSetRemove(RandomizedSet* obj, int val) {\r\n    HashItem* tmp = NULL;\r\n    // \u5728\u54c8\u5e0c\u8868\u4e2d\u67e5\u627e\u8981\u5220\u9664\u7684\u5143\u7d20\r\n    HASH_FIND_INT(obj->indices, &val, tmp);\r\n    if (tmp == NULL) {\r\n        return false; // \u5143\u7d20\u4e0d\u5b58\u5728\uff0c\u5220\u9664\u5931\u8d25\r\n    }\r\n    \r\n    // \u83b7\u53d6\u8981\u5220\u9664\u5143\u7d20\u5728\u6570\u7ec4\u4e2d\u7684\u7d22\u5f15\u4f4d\u7f6e\r\n    int index = tmp->index;\r\n    \r\n    // \u83b7\u53d6\u6570\u7ec4\u4e2d\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u503c\r\n    int lastValue = obj->nums[obj->numsSize - 1];\r\n    // \u5c06\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u79fb\u52a8\u5230\u8981\u5220\u9664\u5143\u7d20\u7684\u4f4d\u7f6e\uff08\u8986\u76d6\u8981\u5220\u9664\u7684\u5143\u7d20\uff09\r\n    obj->nums[index] = lastValue;\r\n    \r\n    // \u66f4\u65b0\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u5728\u54c8\u5e0c\u8868\u4e2d\u7684\u7d22\u5f15\u4f4d\u7f6e\r\n    HashItem* lastItem = NULL;\r\n    HASH_FIND_INT(obj->indices, &lastValue, lastItem);\r\n    if (lastItem != NULL) {\r\n        lastItem->index = index;\r\n    }\r\n    \r\n    // \u4ece\u54c8\u5e0c\u8868\u4e2d\u5220\u9664\u76ee\u6807\u5143\u7d20\u8282\u70b9\u5e76\u91ca\u653e\u5185\u5b58\r\n    HASH_DEL(obj->indices, tmp);\r\n    free(tmp);\r\n    \r\n    obj->numsSize--; // \u6570\u7ec4\u5143\u7d20\u4e2a\u6570\u51cf\u5c11\r\n    return true;\r\n}\r\n\r\n/**\r\n * \u968f\u673a\u83b7\u53d6\u96c6\u5408\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20\r\n * @param obj RandomizedSet\u5bf9\u8c61\u6307\u9488\r\n * @return \u968f\u673a\u8fd4\u56de\u7684\u5143\u7d20\u503c\r\n */\r\nint randomizedSetGetRandom(RandomizedSet* obj) {\r\n    // \u4f7f\u7528\u968f\u673a\u6570\u751f\u62100\u5230numsSize-1\u4e4b\u95f4\u7684\u7d22\u5f15\r\n    int randomIndex = rand() % obj->numsSize;\r\n    return obj->nums[randomIndex]; // \u8fd4\u56de\u6570\u7ec4\u4e2d\u5bf9\u5e94\u4f4d\u7f6e\u7684\u5143\u7d20\r\n}\r\n\r\n/**\r\n * \u91ca\u653eRandomizedSet\u5bf9\u8c61\u5360\u7528\u7684\u5185\u5b58\r\n * @param obj RandomizedSet\u5bf9\u8c61\u6307\u9488\r\n */\r\nvoid randomizedSetFree(RandomizedSet* obj) {\r\n    // \u904d\u5386\u5e76\u91ca\u653e\u54c8\u5e0c\u8868\u4e2d\u6240\u6709\u7684\u8282\u70b9\u5185\u5b58\r\n    HashItem* curr, *tmp;\r\n    HASH_ITER(hh, obj->indices, curr, tmp) {\r\n        HASH_DEL(obj->indices, curr);\r\n        free(curr);\r\n    }\r\n    \r\n    // \u91ca\u653e\u6570\u7ec4\u5185\u5b58\u548c\u5bf9\u8c61\u672c\u8eab\u5185\u5b58\r\n    free(obj->nums);\r\n    free(obj);\r\n}\n"})}),"\n",(0,a.jsx)(r.h3,{id:"-\u603b\u7ed3",children:"\ud83d\udcd6 \u603b\u7ed3\uff1a"}),"\n",(0,a.jsxs)(e,{children:[(0,a.jsx)("summary",{children:"\u70b9\u51fb\u5c55\u5f00\u9898\u76ee\u603b\u7ed3"}),(0,a.jsx)(r.h1,{id:"-o1\u65f6\u95f4\u63d2\u5165\u5220\u9664\u548c\u83b7\u53d6\u968f\u673a\u5143\u7d20",children:"\ud83e\udd14 O(1)\u65f6\u95f4\u63d2\u5165\u3001\u5220\u9664\u548c\u83b7\u53d6\u968f\u673a\u5143\u7d20"}),(0,a.jsx)(r.hr,{}),(0,a.jsx)(r.h2,{id:"1\ufe0f\u20e3-\u9898\u76ee\u6838\u5fc3\u4fe1\u606f",children:"1\ufe0f\u20e3 \u9898\u76ee\u6838\u5fc3\u4fe1\u606f"}),(0,a.jsxs)(r.p,{children:["\ud83c\udfaf ",(0,a.jsx)(r.strong,{children:"\u529f\u80fd\u63cf\u8ff0"}),"\uff1a\u8bbe\u8ba1\u4e00\u4e2a\u652f\u6301\u5728\u5e73\u5747O(1)\u65f6\u95f4\u590d\u6742\u5ea6\u4e0b\u8fdb\u884c\u63d2\u5165\u3001\u5220\u9664\u548c\u83b7\u53d6\u968f\u673a\u5143\u7d20\u7684\u6570\u636e\u7ed3\u6784"]}),(0,a.jsxs)(r.p,{children:["\ud83d\udce5 ",(0,a.jsx)(r.strong,{children:"\u8f93\u5165\u8f93\u51fa"}),"\uff1a"]}),(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"\u8f93\u5165"}),"\uff1a","\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"val"}),"\uff1a\u8981\u63d2\u5165\u6216\u5220\u9664\u7684\u6574\u6570\u503c"]}),"\n",(0,a.jsx)(r.li,{children:"\u65e0\u53c2\u6570\uff1a\u7528\u4e8e\u83b7\u53d6\u968f\u673a\u5143\u7d20"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"\u8f93\u51fa"}),"\uff1a","\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"insert"}),"\uff1a\u63d2\u5165\u6210\u529f\u8fd4\u56detrue\uff0c\u5931\u8d25\u8fd4\u56defalse"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"remove"}),"\uff1a\u5220\u9664\u6210\u529f\u8fd4\u56detrue\uff0c\u5931\u8d25\u8fd4\u56defalse"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"getRandom"}),"\uff1a\u8fd4\u56de\u96c6\u5408\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u5143\u7d20"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"create"}),"\uff1a\u8fd4\u56de\u521d\u59cb\u5316\u7684RandomizedSet\u5bf9\u8c61"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"free"}),"\uff1a\u91ca\u653e\u5bf9\u8c61\u5185\u5b58\uff0c\u65e0\u8fd4\u56de\u503c"]}),"\n"]}),"\n"]}),"\n"]}),(0,a.jsx)(r.hr,{}),(0,a.jsx)(r.h2,{id:"2\ufe0f\u20e3-\u5b9e\u73b0\u539f\u7406",children:"2\ufe0f\u20e3 \u5b9e\u73b0\u539f\u7406"}),(0,a.jsxs)(r.p,{children:["\ud83d\udca1 ",(0,a.jsx)(r.strong,{children:"\u6838\u5fc3\u601d\u8def"}),"\uff1a\u4f7f\u7528\u6570\u7ec4\u5b58\u50a8\u5143\u7d20\u4ee5\u652f\u6301O(1)\u968f\u673a\u8bbf\u95ee\uff0c\u7ed3\u5408\u54c8\u5e0c\u8868\u8bb0\u5f55\u5143\u7d20\u503c\u5230\u7d22\u5f15\u7684\u6620\u5c04\u4ee5\u652f\u6301O(1)\u67e5\u627e"]}),(0,a.jsxs)(r.p,{children:["\ud83d\udccb ",(0,a.jsx)(r.strong,{children:"\u5b9e\u73b0\u6b65\u9aa4"}),"\uff1a"]}),(0,a.jsxs)(r.ol,{children:["\n",(0,a.jsx)(r.li,{children:"\u4f7f\u7528\u52a8\u6001\u6570\u7ec4\u5b58\u50a8\u6240\u6709\u5143\u7d20\uff0c\u652f\u6301\u901a\u8fc7\u7d22\u5f15O(1)\u8bbf\u95ee\u4efb\u610f\u5143\u7d20"}),"\n",(0,a.jsx)(r.li,{children:"\u4f7f\u7528\u54c8\u5e0c\u8868\u7ef4\u62a4\u5143\u7d20\u503c\u5230\u6570\u7ec4\u7d22\u5f15\u7684\u6620\u5c04\u5173\u7cfb\uff0c\u652f\u6301O(1)\u67e5\u627e\u5143\u7d20"}),"\n",(0,a.jsx)(r.li,{children:"\u63d2\u5165\u65f6\u5c06\u5143\u7d20\u6dfb\u52a0\u5230\u6570\u7ec4\u672b\u5c3e\u5e76\u5728\u54c8\u5e0c\u8868\u4e2d\u8bb0\u5f55\u7d22\u5f15"}),"\n",(0,a.jsx)(r.li,{children:"\u5220\u9664\u65f6\u5c06\u76ee\u6807\u5143\u7d20\u4e0e\u6570\u7ec4\u672b\u5c3e\u5143\u7d20\u4ea4\u6362\uff0c\u66f4\u65b0\u54c8\u5e0c\u8868\u5e76\u5220\u9664\u76ee\u6807\u5143\u7d20"}),"\n"]}),(0,a.jsx)(r.hr,{}),(0,a.jsx)(r.h2,{id:"3\ufe0f\u20e3-\u5173\u952e\u70b9\u89e3\u6790",children:"3\ufe0f\u20e3 \u5173\u952e\u70b9\u89e3\u6790"}),(0,a.jsx)(r.h3,{id:"-\u4ee3\u7801\u6280\u5de7",children:"\ud83c\udfaf \u4ee3\u7801\u6280\u5de7"}),(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"\u6570\u7ec4+\u54c8\u5e0c\u8868\u7ec4\u5408"}),"\uff1a\u6570\u7ec4\u652f\u6301\u968f\u673a\u8bbf\u95ee\uff0c\u54c8\u5e0c\u8868\u652f\u6301\u5feb\u901f\u67e5\u627e"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"\u5220\u9664\u5143\u7d20\u65f6\u7684\u4ea4\u6362\u6280\u5de7"}),"\uff1a\u5c06\u5f85\u5220\u9664\u5143\u7d20\u4e0e\u672b\u5c3e\u5143\u7d20\u4ea4\u6362\uff0c\u907f\u514d\u6570\u7ec4\u5143\u7d20\u79fb\u52a8"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"\u53cc\u91cd\u6570\u636e\u7ed3\u6784\u540c\u6b65\u7ef4\u62a4"}),"\uff1a\u540c\u65f6\u7ef4\u62a4\u6570\u7ec4\u548c\u54c8\u5e0c\u8868\u4e2d\u5143\u7d20\u4fe1\u606f\u7684\u4e00\u81f4\u6027"]}),"\n"]}),(0,a.jsx)(r.h2,{id:"4\ufe0f\u20e3-\u4f7f\u7528\u573a\u666f",children:"4\ufe0f\u20e3 \u4f7f\u7528\u573a\u666f"}),(0,a.jsx)(r.h3,{id:"-\u9002\u7528\u60c5\u51b5",children:"\u2705 \u9002\u7528\u60c5\u51b5\uff1a"}),(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsx)(r.li,{children:"\u9700\u8981\u9891\u7e41\u8fdb\u884c\u63d2\u5165\u3001\u5220\u9664\u548c\u968f\u673a\u8bbf\u95ee\u64cd\u4f5c\u7684\u573a\u666f"}),"\n",(0,a.jsx)(r.li,{children:"\u5bf9\u65f6\u95f4\u590d\u6742\u5ea6\u8981\u6c42\u4e25\u683c\u7684\u968f\u673a\u96c6\u5408\u5e94\u7528"}),"\n",(0,a.jsx)(r.li,{children:"\u5b9e\u73b0\u968f\u673a\u62bd\u6837\u6216\u968f\u673a\u5316\u7b97\u6cd5\u7684\u6570\u636e\u7ed3\u6784"}),"\n"]}),(0,a.jsx)(r.h3,{id:"\ufe0f-\u524d\u63d0\u6761\u4ef6",children:"\u26a0\ufe0f \u524d\u63d0\u6761\u4ef6\uff1a"}),(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsx)(r.li,{children:"\u5143\u7d20\u503c\u552f\u4e00\uff0c\u4e0d\u652f\u6301\u91cd\u590d\u5143\u7d20"}),"\n",(0,a.jsx)(r.li,{children:"\u9700\u8981\u8db3\u591f\u7684\u5185\u5b58\u7a7a\u95f4\u7ef4\u62a4\u6570\u7ec4\u548c\u54c8\u5e0c\u8868"}),"\n",(0,a.jsx)(r.li,{children:"getRandom\u8c03\u7528\u65f6\u96c6\u5408\u5fc5\u987b\u975e\u7a7a"}),"\n"]}),(0,a.jsx)(r.h2,{id:"5\ufe0f\u20e3-\u590d\u6742\u5ea6\u5206\u6790",children:"5\ufe0f\u20e3 \u590d\u6742\u5ea6\u5206\u6790"}),(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:["\n",(0,a.jsx)(r.p,{children:"\u23f1\ufe0f \u65f6\u95f4\u590d\u6742\u5ea6\uff1a"}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsx)(r.li,{children:"insert: O(1) \u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6"}),"\n",(0,a.jsx)(r.li,{children:"remove: O(1) \u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6"}),"\n",(0,a.jsx)(r.li,{children:"getRandom: O(1) \u65f6\u95f4\u590d\u6742\u5ea6"}),"\n",(0,a.jsx)(r.li,{children:"create: O(1) \u65f6\u95f4\u590d\u6742\u5ea6"}),"\n",(0,a.jsx)(r.li,{children:"free: O(n) \u65f6\u95f4\u590d\u6742\u5ea6\uff0cn\u4e3a\u5143\u7d20\u4e2a\u6570"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(r.li,{children:["\n",(0,a.jsx)(r.p,{children:"\ud83d\udcbe \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0cn\u4e3a\u5b58\u50a8\u7684\u5143\u7d20\u4e2a\u6570\uff0c\u9700\u8981\u6570\u7ec4\u548c\u54c8\u5e0c\u8868\u5b58\u50a8"}),"\n"]}),"\n"]}),(0,a.jsx)(r.h2,{id:"6\ufe0f\u20e3-\u6ce8\u610f\u4e8b\u9879",children:"6\ufe0f\u20e3 \u6ce8\u610f\u4e8b\u9879"}),(0,a.jsx)(r.h3,{id:"-\u8fb9\u754c\u60c5\u51b5",children:"\ud83d\udea9 \u8fb9\u754c\u60c5\u51b5\uff1a"}),(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsx)(r.li,{children:"\u63d2\u5165\u5df2\u5b58\u5728\u7684\u5143\u7d20"}),"\n",(0,a.jsx)(r.li,{children:"\u5220\u9664\u4e0d\u5b58\u5728\u7684\u5143\u7d20"}),"\n",(0,a.jsx)(r.li,{children:"\u96c6\u5408\u4e3a\u7a7a\u65f6\u8c03\u7528getRandom\uff08\u9898\u76ee\u4fdd\u8bc1\u4e0d\u4f1a\u51fa\u73b0\uff09"}),"\n",(0,a.jsx)(r.li,{children:"\u96c6\u5408\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u65f6\u7684\u5220\u9664\u64cd\u4f5c"}),"\n"]}),(0,a.jsx)(r.h3,{id:"-\u6613\u9519\u70b9",children:"\ud83d\udca5 \u6613\u9519\u70b9\uff1a"}),(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsx)(r.li,{children:"\u5220\u9664\u5143\u7d20\u540e\u5fd8\u8bb0\u66f4\u65b0\u4ea4\u6362\u5143\u7d20\u5728\u54c8\u5e0c\u8868\u4e2d\u7684\u7d22\u5f15"}),"\n",(0,a.jsx)(r.li,{children:"\u5185\u5b58\u91ca\u653e\u4e0d\u5b8c\u6574\uff0c\u5fd8\u8bb0\u91ca\u653e\u54c8\u5e0c\u8868\u8282\u70b9"}),"\n",(0,a.jsx)(r.li,{children:"getRandom\u5b9e\u73b0\u4e2d\u968f\u673a\u6570\u8303\u56f4\u9519\u8bef\uff0c\u5e94\u4e3a[0, numsSize)"}),"\n"]}),(0,a.jsx)(r.h2,{id:"7\ufe0f\u20e3-\u60d1\u4e4b\u672a\u89e3",children:"7\ufe0f\u20e3 \u60d1\u4e4b\u672a\u89e3"}),(0,a.jsx)(r.p,{children:"\u8fd9\u662f\u529b\u6263\u91cc\u9762\u7684\u6700\u4f18\u89e3\uff1f\u4f46\u662f\u6211\u770b\u4e0d\u61c2~\ud83d\ude02"}),(0,a.jsx)(r.p,{children:"\u6211\u73b0\u5728\u6253\u7b97\u5148\u7406\u89e3\u7075\u7801\u7ed9\u51fa\u7684\u4ee3\u7801\u5427\uff0c\u4e4b\u540e\u518d\u6765\u63a2\u7d22\u4e0b\u9762\u7684\u5185\u5bb9\uff01\ud83e\uddd0"}),(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-c",children:"/**\r\n * FNV\u54c8\u5e0c\u7b97\u6cd5\u5e38\u91cf\u5b9a\u4e49\r\n * FNV32_BASE: FNV-1\u54c8\u5e0c\u7b97\u6cd5\u7684\u57fa\u7840\u503c\r\n * FNV32_PRIME: FNV-1\u54c8\u5e0c\u7b97\u6cd5\u7684\u7d20\u6570\r\n */\r\n#define FNV32_BASE ((unsigned int) 0x811c9dc5)\r\n#define FNV32_PRIME ((unsigned int) 0x01000193)\r\n\r\n/**\r\n * FNV-1\u54c8\u5e0c\u7b97\u6cd5\u5b9e\u73b0\r\n * @param buf \u8981\u54c8\u5e0c\u7684\u6570\u636e\u7f13\u51b2\u533a\r\n * @param len \u6570\u636e\u957f\u5ea6\r\n * @return \u8ba1\u7b97\u5f97\u5230\u7684\u54c8\u5e0c\u503c\r\n */\r\nstatic unsigned int memhash(const void *buf, size_t len)\r\n{\r\n\tunsigned int hash = FNV32_BASE;\r\n\tunsigned char *ucbuf = (unsigned char *) buf;\r\n\twhile (len--) {\r\n\t\tunsigned int c = *ucbuf++;\r\n\t\thash = (hash * FNV32_PRIME) ^ c;\r\n\t}\r\n\treturn hash;\r\n}\r\n\r\n/**\r\n * \u54c8\u5e0c\u8868\u9879\u7ed3\u6784\u4f53\r\n * \u7528\u4e8e\u94fe\u5f0f\u89e3\u51b3\u54c8\u5e0c\u51b2\u7a81\r\n */\r\nstruct hashmap_entry {\r\n    unsigned int hash;                  // \u5b58\u50a8\u9884\u8ba1\u7b97\u7684\u54c8\u5e0c\u503c\r\n    struct hashmap_entry *next;         // \u6307\u5411\u4e0b\u4e00\u4e2a\u51b2\u7a81\u9879\u7684\u6307\u9488\r\n};\r\n\r\n/**\r\n * \u521d\u59cb\u5316\u54c8\u5e0c\u8868\u9879\r\n * @param entry \u8981\u521d\u59cb\u5316\u7684\u54c8\u5e0c\u8868\u9879\r\n * @param hash  \u9884\u8ba1\u7b97\u7684\u54c8\u5e0c\u503c\r\n */\r\nstatic inline void hashmap_entry_init(struct hashmap_entry *entry, unsigned int hash) {\r\n    entry->hash = hash;\r\n    entry->next = NULL;\r\n}\r\n\r\n/**\r\n * \u6839\u636e\u952e\u503c\u8ba1\u7b97\u54c8\u5e0c\u503c\u5e76\u521d\u59cb\u5316\u54c8\u5e0c\u8868\u9879\r\n */\r\n#define __hashmap_entry_init(entry, key, len) hashmap_entry_init(entry, memhash(key, len))\r\n\r\n/**\r\n * \u54c8\u5e0c\u8868\u9879\u6bd4\u8f83\u56de\u8c03\u51fd\u6570\u7c7b\u578b\u5b9a\u4e49\r\n * @param entry     \u54c8\u5e0c\u8868\u4e2d\u7684\u9879\r\n * @param key       \u8981\u6bd4\u8f83\u7684\u952e\r\n * @param key_data  \u952e\u6570\u636e\r\n * @return \u76f8\u7b49\u8fd4\u56de0\uff0c\u4e0d\u76f8\u7b49\u8fd4\u56de\u975e0\u503c\r\n */\r\ntypedef int (*hashmap_entry_cmp_callback)(struct hashmap_entry *entry, struct hashmap_entry *key, void *key_data);\r\n\r\n/**\r\n * \u54c8\u5e0c\u8868\u7ed3\u6784\u4f53\r\n */\r\nstruct hashmap {\r\n    struct hashmap_entry **table;       // \u54c8\u5e0c\u6876\u6570\u7ec4\r\n    unsigned int table_size;            // \u54c8\u5e0c\u6876\u6570\u7ec4\u5927\u5c0f\r\n    unsigned int private_size;          // \u5f53\u524d\u5b58\u50a8\u7684\u5143\u7d20\u6570\u91cf\r\n    hashmap_entry_cmp_callback cmp;     // \u5143\u7d20\u6bd4\u8f83\u56de\u8c03\u51fd\u6570\r\n    unsigned int grow_at;               // \u89e6\u53d1\u6269\u5bb9\u7684\u9608\u503c\r\n    unsigned int shrink_at;             // \u89e6\u53d1\u6536\u7f29\u7684\u9608\u503c\r\n};\r\n\r\n/**\r\n * \u54c8\u5e0c\u8868\u914d\u7f6e\u5e38\u91cf\r\n * hashmap_init_size: \u521d\u59cb\u54c8\u5e0c\u8868\u5927\u5c0f\r\n * hashmap_factor: \u8d1f\u8f7d\u56e0\u5b50(\u767e\u5206\u6bd4)\r\n * hashmap_resize_bit: \u6269\u5bb9/\u6536\u7f29\u65f6\u7684\u4f4d\u79fb\u91cf\r\n */\r\n#define hashmap_init_size 64\r\n#define hashmap_factor 80\r\n#define hashmap_resize_bit 2\r\n\r\n/**\r\n * \u5206\u914d\u54c8\u5e0c\u8868\u6876\u6570\u7ec4\r\n * @param map  \u54c8\u5e0c\u8868\u7ed3\u6784\u4f53\u6307\u9488\r\n * @param size \u6876\u6570\u7ec4\u5927\u5c0f\r\n */\r\nstatic void alloc_table(struct hashmap *map, unsigned int size) \r\n{\r\n        map->table_size = size;\r\n        map->table = calloc(size, sizeof(void *));  // \u521d\u59cb\u5316\u4e3aNULL\r\n\r\n        // \u8ba1\u7b97\u6269\u5bb9\u548c\u6536\u7f29\u9608\u503c\r\n        map->grow_at = size * hashmap_factor / 100;\r\n        if (size <= hashmap_init_size) \r\n            map->shrink_at = 0;\r\n        else \r\n            map->shrink_at = map->grow_at / ((1 << hashmap_resize_bit) + 1); \r\n}\r\n\r\n/**\r\n * \u6bd4\u8f83\u4e24\u4e2a\u54c8\u5e0c\u8868\u9879\u662f\u5426\u76f8\u7b49\r\n * @param map       \u54c8\u5e0c\u8868\u7ed3\u6784\u4f53\u6307\u9488\r\n * @param entry     \u54c8\u5e0c\u8868\u4e2d\u7684\u9879\r\n * @param key       \u8981\u6bd4\u8f83\u7684\u952e\r\n * @param key_data  \u952e\u6570\u636e\r\n * @return \u76f8\u7b49\u8fd4\u56detrue\uff0c\u5426\u5219\u8fd4\u56defalse\r\n */\r\nstatic inline int entry_equals(struct hashmap *map, struct hashmap_entry *entry, struct hashmap_entry *key, void *key_data) \r\n{\r\n    return ((entry->hash == key->hash) && (entry == key || !map->cmp(entry, key, key_data))); \r\n}\r\n\r\n/**\r\n * \u521d\u59cb\u5316\u54c8\u5e0c\u8868\r\n * @param map        \u54c8\u5e0c\u8868\u7ed3\u6784\u4f53\u6307\u9488\r\n * @param init_size  \u521d\u59cb\u5927\u5c0f\r\n * @param cmp        \u6bd4\u8f83\u56de\u8c03\u51fd\u6570\r\n */\r\nstatic void hashmap_init(struct hashmap *map, unsigned int init_size, hashmap_entry_cmp_callback cmp) \r\n{\r\n    \r\n    unsigned int size = hashmap_init_size;\r\n\r\n    map->cmp = cmp;\r\n\r\n    // \u6839\u636e\u521d\u59cb\u5927\u5c0f\u8ba1\u7b97\u5408\u9002\u7684\u54c8\u5e0c\u8868\u5927\u5c0f\r\n    init_size = init_size * 100 / hashmap_factor;\r\n    while (init_size > size) {\r\n        size <<= hashmap_resize_bit;\r\n    }\r\n\r\n    alloc_table(map, size);\r\n    map->private_size = 0;\r\n}\r\n\r\n/**\r\n * \u8ba1\u7b97\u54c8\u5e0c\u6876\u7d22\u5f15\r\n * @param map \u54c8\u5e0c\u8868\u7ed3\u6784\u4f53\u6307\u9488\r\n * @param key \u952e\u9879\r\n * @return \u6876\u7d22\u5f15\r\n */\r\nstatic inline unsigned int bucket(struct hashmap *map, struct hashmap_entry *key) \r\n{\r\n    return key->hash & (map->table_size - 1);\r\n}\r\n\r\n/**\r\n * \u67e5\u627e\u952e\u9879\u5728\u54c8\u5e0c\u8868\u4e2d\u7684\u4f4d\u7f6e\u6307\u9488\r\n * @param map       \u54c8\u5e0c\u8868\u7ed3\u6784\u4f53\u6307\u9488\r\n * @param key       \u8981\u67e5\u627e\u7684\u952e\r\n * @param key_data  \u952e\u6570\u636e\r\n * @return \u6307\u5411\u8be5\u9879\u6307\u9488\u7684\u6307\u9488\r\n */\r\nstatic struct hashmap_entry **find_entry_ptr(struct hashmap *map, struct hashmap_entry *key, void *key_data) \r\n{\r\n    unsigned int b = bucket(map, key);\r\n\r\n    struct hashmap_entry **entry = &map->table[b];\r\n    while (*entry && !entry_equals(map, *entry, key, key_data)) {\r\n        entry = &(*entry)->next;\r\n    }\r\n\r\n    return entry;\r\n}\r\n\r\n/**\r\n * \u91cd\u65b0\u54c8\u5e0c\uff08\u6269\u5bb9\u6216\u6536\u7f29\uff09\r\n * @param map      \u54c8\u5e0c\u8868\u7ed3\u6784\u4f53\u6307\u9488\r\n * @param new_size \u65b0\u7684\u54c8\u5e0c\u8868\u5927\u5c0f\r\n */\r\nstatic void rehash(struct hashmap *map, unsigned int new_size)\r\n{\r\n    int i, old_size = map->table_size;\r\n    struct hashmap_entry **old_table = map->table;\r\n\r\n    alloc_table(map, new_size);\r\n\r\n    // \u5c06\u65e7\u8868\u4e2d\u7684\u6240\u6709\u9879\u91cd\u65b0\u63d2\u5165\u65b0\u8868\r\n    for (i = 0; i < old_size; i++) {\r\n        struct hashmap_entry *e = old_table[i];\r\n\r\n        while (e) {\r\n            struct hashmap_entry *next = e->next;\r\n            unsigned int b = bucket(map, e);\r\n            e->next = map->table[b];\r\n            map->table[b] = e;\r\n            e = next;\r\n        }\r\n    }\r\n    free(old_table);\r\n}\r\n\r\n/**\r\n * \u4ece\u54c8\u5e0c\u8868\u4e2d\u79fb\u9664\u9879\r\n * @param map       \u54c8\u5e0c\u8868\u7ed3\u6784\u4f53\u6307\u9488\r\n * @param key       \u8981\u79fb\u9664\u7684\u952e\r\n * @param key_data  \u952e\u6570\u636e\r\n * @return \u88ab\u79fb\u9664\u7684\u9879\uff0c\u4e0d\u5b58\u5728\u5219\u8fd4\u56deNULL\r\n */\r\nstatic struct hashmap_entry *hashmap_remove(struct hashmap *map, struct hashmap_entry *key, void *key_data) \r\n{\r\n    struct hashmap_entry **e;\r\n    struct hashmap_entry *old;\r\n\r\n    e = find_entry_ptr(map, key, key_data);\r\n    if (!*e) return NULL;\r\n\r\n    old = *e;\r\n    *e = old->next;\r\n    old->next = NULL;\r\n\r\n    // \u5982\u679c\u5143\u7d20\u6570\u91cf\u4f4e\u4e8e\u6536\u7f29\u9608\u503c\uff0c\u5219\u8fdb\u884c\u6536\u7f29\r\n    if (--map->private_size < map->shrink_at)\r\n        rehash(map, map->table_size >> hashmap_resize_bit);\r\n    \r\n    return old;\r\n}\r\n\r\n/**\r\n * \u68c0\u67e5\u952e\u662f\u5426\u5b58\u5728\u4e8e\u54c8\u5e0c\u8868\u4e2d\r\n * @param map       \u54c8\u5e0c\u8868\u7ed3\u6784\u4f53\u6307\u9488\r\n * @param key       \u8981\u68c0\u67e5\u7684\u952e\r\n * @param key_data  \u952e\u6570\u636e\r\n * @return \u5b58\u5728\u8fd4\u56detrue\uff0c\u5426\u5219\u8fd4\u56defalse\r\n */\r\nstatic bool hashmap_exists(struct hashmap *map, struct hashmap_entry *key, void *key_data) {\r\n    struct hashmap_entry **e = find_entry_ptr(map, key, key_data);\r\n    if (!*e) return false;\r\n    \r\n    return true;\r\n}\r\n\r\n/**\r\n * \u5411\u54c8\u5e0c\u8868\u4e2d\u6dfb\u52a0\u9879\r\n * @param map    \u54c8\u5e0c\u8868\u7ed3\u6784\u4f53\u6307\u9488\r\n * @param entry  \u8981\u6dfb\u52a0\u7684\u9879\r\n */\r\nstatic void hashmap_add(struct hashmap *map, struct hashmap_entry *entry) \r\n{\r\n    unsigned int b = bucket(map, entry);\r\n\r\n    entry->next = map->table[b];\r\n    map->table[b] = entry;\r\n    \r\n    // \u5982\u679c\u5143\u7d20\u6570\u91cf\u8d85\u8fc7\u6269\u5bb9\u9608\u503c\uff0c\u5219\u8fdb\u884c\u6269\u5bb9\r\n    if (++map->private_size > map->grow_at)\r\n        rehash(map, map->table_size << hashmap_resize_bit);\r\n}\r\n\r\n/**\r\n * \u5411\u54c8\u5e0c\u8868\u4e2d\u653e\u7f6e\u9879\uff08\u5982\u679c\u5df2\u5b58\u5728\u5219\u66ff\u6362\uff09\r\n * @param map    \u54c8\u5e0c\u8868\u7ed3\u6784\u4f53\u6307\u9488\r\n * @param entry  \u8981\u653e\u7f6e\u7684\u9879\r\n * @return \u88ab\u66ff\u6362\u7684\u65e7\u9879\uff0c\u6ca1\u6709\u5219\u8fd4\u56deNULL\r\n */\r\nstatic struct hashmap_entry *hashmap_put(struct hashmap *map, struct hashmap_entry *entry) {\r\n    struct hashmap_entry *old = hashmap_remove(map, entry, NULL);\r\n    hashmap_add(map, entry);\r\n    return old;\r\n}\r\n\r\n/**\r\n * \u54c8\u5e0c\u8868\u8fed\u4ee3\u5668\u7ed3\u6784\u4f53\r\n */\r\nstruct hashmap_iter {\r\n    struct hashmap *map;        // \u5173\u8054\u7684\u54c8\u5e0c\u8868\r\n    struct hashmap_entry *next; // \u4e0b\u4e00\u4e2a\u8981\u8bbf\u95ee\u7684\u9879\r\n    int table_pos;              // \u5f53\u524d\u6876\u7d22\u5f15\r\n};\r\n\r\n/**\r\n * \u521d\u59cb\u5316\u54c8\u5e0c\u8868\u8fed\u4ee3\u5668\r\n * @param iter \u8fed\u4ee3\u5668\u7ed3\u6784\u4f53\u6307\u9488\r\n * @param map  \u8981\u8fed\u4ee3\u7684\u54c8\u5e0c\u8868\r\n */\r\nstatic void hashmap_iter_init(struct hashmap_iter *iter, struct hashmap *map)\r\n{\r\n    iter->map = map;\r\n    iter->next = NULL;\r\n    iter->table_pos = 0;\r\n}\r\n\r\n/**\r\n * \u83b7\u53d6\u8fed\u4ee3\u5668\u7684\u4e0b\u4e00\u4e2a\u9879\r\n * @param iter \u8fed\u4ee3\u5668\u7ed3\u6784\u4f53\u6307\u9488\r\n * @return \u4e0b\u4e00\u4e2a\u54c8\u5e0c\u8868\u9879\uff0c\u6ca1\u6709\u5219\u8fd4\u56deNULL\r\n */\r\nstatic struct hashmap_entry *hashmap_iter_next(struct hashmap_iter *iter) {\r\n    struct hashmap_entry *curr = iter->next;\r\n\r\n    for ( ; ; ) {\r\n        if (curr) {\r\n            iter->next = curr->next;\r\n            return curr;\r\n        }\r\n\r\n        if (iter->table_pos >= iter->map->table_size)\r\n            return NULL;\r\n        \r\n        curr = iter->map->table[iter->table_pos++];\r\n    }\r\n} \r\n\r\n/**\r\n * \u6e05\u7a7a\u54c8\u5e0c\u8868\u5e76\u91ca\u653e\u6240\u6709\u5185\u5b58\r\n * @param map    \u54c8\u5e0c\u8868\u7ed3\u6784\u4f53\u6307\u9488\r\n * @param offset \u9879\u7ed3\u6784\u4f53\u4e2dhashmap_entry\u6210\u5458\u7684\u504f\u79fb\u91cf\r\n */\r\nstatic void hashmap_clear(struct hashmap *map, unsigned int offset) {\r\n    \r\n    struct hashmap_iter iter;\r\n    struct hashmap_entry *e;\r\n\r\n    hashmap_iter_init(&iter, map);\r\n\r\n    // \u9010\u4e2a\u91ca\u653e\u6240\u6709\u9879\u7684\u5185\u5b58\r\n    while ((e = hashmap_iter_next(&iter)))\r\n        free((char *)e - offset);\r\n\r\n    free(map->table);\r\n    memset(map, 0, sizeof(struct hashmap));\r\n}   \r\n\r\n/**\r\n * \u6574\u578b\u952e\u503c\u7684\u54c8\u5e0c\u8868\u9879\u7ed3\u6784\u4f53\r\n */\r\nstruct int_hashmap_entry {\r\n    int key;                    // \u952e\r\n    int value;                  // \u503c\r\n    struct hashmap_entry entry; // \u57fa\u7840\u54c8\u5e0c\u8868\u9879\r\n};\r\n\r\n/**\r\n * \u8ba1\u7b97int_hashmap_entry\u4e2dentry\u6210\u5458\u7684\u504f\u79fb\u91cf\r\n */\r\n#define INT_HASHMAP_OFFSET offsetof(struct int_hashmap_entry, entry) \r\n\r\n/**\r\n * \u901a\u8fc7\u54c8\u5e0c\u8868\u9879\u6307\u9488\u83b7\u53d6\u5305\u542b\u5b83\u7684int_hashmap_entry\u6307\u9488\r\n */\r\n#define get_int_hashmap_entry_data(entry, type, member) \\\r\n    ((type *) ((u_char *)(entry) - offsetof(type, member)))\r\n\r\n/**\r\n * \u521b\u5efa\u6574\u578b\u54c8\u5e0c\u8868\u9879\r\n * @param key   \u952e\r\n * @param value \u503c\r\n * @return \u65b0\u521b\u5efa\u7684\u9879\uff0c\u5931\u8d25\u8fd4\u56deNULL\r\n */\r\nstatic inline struct int_hashmap_entry *int_hashmap_entry_create(int key, int value) {\r\n    struct int_hashmap_entry *int_entry;\r\n\r\n    int_entry = malloc(sizeof(struct int_hashmap_entry));\r\n    if (!int_entry) return NULL;\r\n\r\n    int_entry->key = key;\r\n    int_entry->value = value;\r\n    __hashmap_entry_init(&int_entry->entry, &key, sizeof(int));\r\n    return int_entry;\r\n}\r\n\r\n/**\r\n * \u6574\u578b\u54c8\u5e0c\u8868\u7ed3\u6784\u4f53\r\n */\r\nstruct int_hashmap {\r\n    struct hashmap map;  // \u57fa\u7840\u54c8\u5e0c\u8868\r\n};\r\n\r\n/**\r\n * \u6574\u578b\u54c8\u5e0c\u8868\u9879\u6bd4\u8f83\u51fd\u6570\r\n * @param entry     \u54c8\u5e0c\u8868\u4e2d\u7684\u9879\r\n * @param key       \u8981\u6bd4\u8f83\u7684\u952e\r\n * @param key_data  \u952e\u6570\u636e\r\n * @return \u76f8\u7b49\u8fd4\u56de0\uff0c\u4e0d\u76f8\u7b49\u8fd4\u56de\u975e0\u503c\r\n */\r\nstatic int int_hashmap_entry_cmp(struct hashmap_entry *entry, struct hashmap_entry *key, void *key_data) {\r\n    struct int_hashmap_entry *int_entry = get_int_hashmap_entry_data(entry, struct int_hashmap_entry, entry);\r\n\r\n    if (key_data) {\r\n        if (int_entry->key == (*(int *) key_data)) return 0;\r\n        else return 1;\r\n    } else {\r\n        struct int_hashmap_entry *key_entry = get_int_hashmap_entry_data(key, struct int_hashmap_entry, entry);\r\n        if (int_entry->key == key_entry->key) return 0;\r\n        return 1;\r\n    }\r\n}\r\n\r\n/**\r\n * \u521d\u59cb\u5316\u6574\u578b\u54c8\u5e0c\u8868\r\n * @param int_map   \u6574\u578b\u54c8\u5e0c\u8868\u7ed3\u6784\u4f53\u6307\u9488\r\n * @param init_size \u521d\u59cb\u5927\u5c0f\r\n */\r\nstatic inline void int_hashmap_init(struct int_hashmap *int_map, unsigned int init_size)\r\n{\r\n    hashmap_init(&int_map->map, init_size, int_hashmap_entry_cmp);\r\n}\r\n\r\n/**\r\n * \u4ece\u6574\u578b\u54c8\u5e0c\u8868\u4e2d\u79fb\u9664\u9879\r\n * @param int_map \u6574\u578b\u54c8\u5e0c\u8868\u7ed3\u6784\u4f53\u6307\u9488\r\n * @param key     \u8981\u79fb\u9664\u7684\u952e\r\n * @return \u88ab\u79fb\u9664\u7684\u9879\uff0c\u4e0d\u5b58\u5728\u5219\u8fd4\u56deNULL\r\n */\r\nstatic inline struct int_hashmap_entry *int_hashmap_remove(struct int_hashmap *int_map, int key) {\r\n    struct hashmap_entry key_entry;\r\n    __hashmap_entry_init(&key_entry, &key, sizeof(int));\r\n\r\n    struct hashmap_entry *e = hashmap_remove(&int_map->map, &key_entry, &key);\r\n    if (!e) return NULL;\r\n\r\n    struct int_hashmap_entry *data = get_int_hashmap_entry_data(e, struct int_hashmap_entry, entry);\r\n\r\n    return data;\r\n}\r\n\r\n/**\r\n * \u5411\u6574\u578b\u54c8\u5e0c\u8868\u4e2d\u653e\u7f6e\u9879\r\n * @param int_map \u6574\u578b\u54c8\u5e0c\u8868\u7ed3\u6784\u4f53\u6307\u9488\r\n * @param key     \u952e\r\n * @param value   \u503c\r\n * @return \u88ab\u66ff\u6362\u7684\u65e7\u9879\uff0c\u6ca1\u6709\u5219\u8fd4\u56deNULL\r\n */\r\nstatic inline struct int_hashmap_entry *int_hashmap_put(struct int_hashmap *int_map, int key, int value) {\r\n    struct hashmap_entry *e = hashmap_put(&int_map->map, &int_hashmap_entry_create(key, value)->entry);\r\n    if (!e) return NULL;\r\n\r\n    struct int_hashmap_entry *data = get_int_hashmap_entry_data(e, struct int_hashmap_entry, entry);\r\n    return data;\r\n}\r\n\r\n/**\r\n * \u68c0\u67e5\u952e\u662f\u5426\u5b58\u5728\u4e8e\u6574\u578b\u54c8\u5e0c\u8868\u4e2d\r\n * @param int_map \u6574\u578b\u54c8\u5e0c\u8868\u7ed3\u6784\u4f53\u6307\u9488\r\n * @param key     \u8981\u68c0\u67e5\u7684\u952e\r\n * @return \u5b58\u5728\u8fd4\u56detrue\uff0c\u5426\u5219\u8fd4\u56defalse\r\n */\r\nstatic inline bool int_hashmap_exists(struct int_hashmap *int_map, int key) {\r\n    struct hashmap_entry key_entry;\r\n    __hashmap_entry_init(&key_entry, &key, sizeof(int));\r\n\r\n    return hashmap_exists(&int_map->map, &key_entry, &key);\r\n}\r\n\r\n/**\r\n * \u5411\u6574\u578b\u54c8\u5e0c\u8868\u4e2d\u6dfb\u52a0\u9879\r\n * @param int_map \u6574\u578b\u54c8\u5e0c\u8868\u7ed3\u6784\u4f53\u6307\u9488\r\n * @param key     \u952e\r\n * @param value   \u503c\r\n */\r\nstatic inline void int_hashmap_add(struct int_hashmap *int_map, int key, int value) {\r\n    hashmap_add(&int_map->map, &int_hashmap_entry_create(key, value)->entry);\r\n}\r\n\r\n/**\r\n * \u6e05\u7a7a\u6574\u578b\u54c8\u5e0c\u8868\u5e76\u91ca\u653e\u6240\u6709\u5185\u5b58\r\n * @param int_map \u6574\u578b\u54c8\u5e0c\u8868\u7ed3\u6784\u4f53\u6307\u9488\r\n */\r\nstatic inline void int_hashmap_clear(struct int_hashmap *int_map) {\r\n    hashmap_clear(&int_map->map, INT_HASHMAP_OFFSET);\r\n}\r\n\r\n/**\r\n * RandomizedSet\u7ed3\u6784\u4f53\r\n * \u7ed3\u5408\u6570\u7ec4\u548c\u54c8\u5e0c\u8868\u5b9e\u73b0O(1)\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u63d2\u5165\u3001\u5220\u9664\u548c\u968f\u673a\u83b7\u53d6\r\n */\r\ntypedef struct {\r\n    int *nums;                  // \u5b58\u50a8\u5b9e\u9645\u5143\u7d20\u7684\u6570\u7ec4\r\n    int alloc;                  // \u6570\u7ec4\u5df2\u5206\u914d\u7684\u7a7a\u95f4\u5927\u5c0f\r\n    int nr;                     // \u6570\u7ec4\u4e2d\u5f53\u524d\u5143\u7d20\u7684\u6570\u91cf\r\n    struct int_hashmap map;     // \u6574\u578b\u54c8\u5e0c\u8868\uff0c\u5b58\u50a8\u5143\u7d20\u503c\u5230\u6570\u7ec4\u7d22\u5f15\u7684\u6620\u5c04\r\n} RandomizedSet;\r\n\r\n/**\r\n * \u9ed8\u8ba4\u6570\u7ec4\u5206\u914d\u5927\u5c0f\r\n */\r\n#define DEFAULT_ALLOC 1024\r\n\r\n/**\r\n * \u521b\u5efaRandomizedSet\u5bf9\u8c61\r\n * @return \u65b0\u521b\u5efa\u7684RandomizedSet\u5bf9\u8c61\u6307\u9488\uff0c\u5931\u8d25\u8fd4\u56deNULL\r\n */\r\nRandomizedSet *randomizedSetCreate() {\r\n    RandomizedSet *rand_set;\r\n\r\n    rand_set = malloc(sizeof(RandomizedSet));\r\n    if (!rand_set) return NULL;\r\n\r\n    rand_set->nums = calloc(DEFAULT_ALLOC, sizeof(int));\r\n    if (!rand_set->nums) {\r\n        free(rand_set);\r\n        return NULL;\r\n    }\r\n\r\n    rand_set->alloc = DEFAULT_ALLOC;\r\n    rand_set->nr = 0;\r\n    int_hashmap_init(&rand_set->map, 1024);\r\n    return rand_set;\r\n}\r\n\r\n/**\r\n * \u5411\u96c6\u5408\u4e2d\u63d2\u5165\u5143\u7d20\r\n * @param rand_set RandomizedSet\u5bf9\u8c61\u6307\u9488\r\n * @param val      \u8981\u63d2\u5165\u7684\u5143\u7d20\u503c\r\n * @return \u63d2\u5165\u6210\u529f\u8fd4\u56detrue\uff0c\u5143\u7d20\u5df2\u5b58\u5728\u8fd4\u56defalse\r\n */\r\nbool randomizedSetInsert(RandomizedSet *rand_set, int val) {\r\n    // \u68c0\u67e5\u5143\u7d20\u662f\u5426\u5df2\u5b58\u5728\r\n    if (int_hashmap_exists(&rand_set->map, val)) return false;\r\n\r\n    // \u5982\u679c\u6570\u7ec4\u7a7a\u95f4\u4e0d\u8db3\uff0c\u5219\u6269\u5bb9\r\n    if (rand_set->nr >= rand_set->alloc) {\r\n        int new_alloc = rand_set->alloc * 2;\r\n        rand_set->nums = realloc(rand_set->nums, new_alloc * sizeof(int));\r\n        if (!rand_set->nums) return false;\r\n        rand_set->alloc = new_alloc;\r\n    }\r\n\r\n    // \u5c06\u65b0\u5143\u7d20\u6dfb\u52a0\u5230\u6570\u7ec4\u672b\u5c3e\r\n    rand_set->nums[rand_set->nr] = val;\r\n    // \u5728\u54c8\u5e0c\u8868\u4e2d\u8bb0\u5f55\u5143\u7d20\u503c\u548c\u5176\u5728\u6570\u7ec4\u4e2d\u7684\u7d22\u5f15\r\n    int_hashmap_add(&rand_set->map, val, rand_set->nr);\r\n    rand_set->nr++;\r\n    return true;\r\n}\r\n\r\n/**\r\n * \u4ece\u96c6\u5408\u4e2d\u5220\u9664\u5143\u7d20\r\n * @param rand_set RandomizedSet\u5bf9\u8c61\u6307\u9488\r\n * @param val      \u8981\u5220\u9664\u7684\u5143\u7d20\u503c\r\n * @return \u5220\u9664\u6210\u529f\u8fd4\u56detrue\uff0c\u5143\u7d20\u4e0d\u5b58\u5728\u8fd4\u56defalse\r\n */\r\nbool randomizedSetRemove(RandomizedSet *rand_set, int val) {\r\n    // \u4ece\u54c8\u5e0c\u8868\u4e2d\u79fb\u9664\u5143\u7d20\u5e76\u83b7\u53d6\u5176\u4fe1\u606f\r\n    struct int_hashmap_entry *entry = int_hashmap_remove(&rand_set->map, val);\r\n    if (!entry) return false;\r\n\r\n    // \u83b7\u53d6\u8981\u5220\u9664\u5143\u7d20\u5728\u6570\u7ec4\u4e2d\u7684\u7d22\u5f15\r\n    int index = entry->value;\r\n    // \u83b7\u53d6\u6570\u7ec4\u4e2d\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u503c\r\n    int last_val = rand_set->nums[--rand_set->nr];\r\n    // \u5c06\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u79fb\u52a8\u5230\u8981\u5220\u9664\u5143\u7d20\u7684\u4f4d\u7f6e\r\n    rand_set->nums[index] = last_val;\r\n\r\n    // \u5982\u679c\u5220\u9664\u7684\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u9700\u8981\u66f4\u65b0\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u5728\u54c8\u5e0c\u8868\u4e2d\u7684\u7d22\u5f15\r\n    if (index != rand_set->nr) {\r\n        struct int_hashmap_entry *last_entry = int_hashmap_remove(&rand_set->map, last_val);\r\n        last_entry->value = index;\r\n        hashmap_add(&rand_set->map.map, &last_entry->entry);\r\n    }\r\n\r\n    free(entry);  // \u91ca\u653e\u88ab\u5220\u9664\u9879\u7684\u5185\u5b58\r\n    return true;\r\n}\r\n\r\n/**\r\n * \u968f\u673a\u83b7\u53d6\u96c6\u5408\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20\r\n * @param rand_set RandomizedSet\u5bf9\u8c61\u6307\u9488\r\n * @return \u968f\u673a\u8fd4\u56de\u7684\u5143\u7d20\u503c\r\n */\r\nint randomizedSetGetRandom(RandomizedSet *rand_set) {\r\n    // \u4f7f\u7528\u968f\u673a\u6570\u751f\u62100\u5230nr-1\u4e4b\u95f4\u7684\u7d22\u5f15\r\n    return rand_set->nums[rand() % rand_set->nr];\r\n}\r\n\r\n/**\r\n * \u91ca\u653eRandomizedSet\u5bf9\u8c61\u5360\u7528\u7684\u5185\u5b58\r\n * @param rand_set RandomizedSet\u5bf9\u8c61\u6307\u9488\r\n */\r\nvoid randomizedSetFree(RandomizedSet *rand_set) {\r\n    if (rand_set->nums)\r\n        free(rand_set->nums);\r\n    int_hashmap_clear(&rand_set->map);\r\n\r\n    free(rand_set);\r\n}\r\n\r\n/**\r\n * Your RandomizedSet struct will be instantiated and called as such:\r\n * RandomizedSet* obj = randomizedSetCreate();\r\n * bool param_1 = randomizedSetInsert(obj, val);\r\n \r\n * bool param_2 = randomizedSetRemove(obj, val);\r\n \r\n * int param_3 = randomizedSetGetRandom(obj);\r\n \r\n * randomizedSetFree(obj);\r\n*/\n"})})]})]})}function _(n={}){const{wrapper:r}={...(0,i.R)(),...n.components};return r?(0,a.jsx)(r,{...n,children:(0,a.jsx)(p,{...n})}):p(n)}}}]);