<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="atom.xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://www.eurekashadow.xin/blog</id>
    <title>我的网站 Blog</title>
    <updated>2025-08-21T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://www.eurekashadow.xin/blog"/>
    <subtitle>我的网站 Blog</subtitle>
    <icon>https://www.eurekashadow.xin/img/Eureka.ico</icon>
    <entry>
        <title type="html"><![CDATA[盛最多水的容器]]></title>
        <id>https://www.eurekashadow.xin/blog/LeetCode11</id>
        <link href="https://www.eurekashadow.xin/blog/LeetCode11"/>
        <updated>2025-08-21T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[力扣面试经典——11题]]></summary>
        <content type="html"><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="力扣面试经典11题"><span class="B2_JnYG"><a href="https://leetcode.cn/problems/container-with-most-water/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer" title="力扣">力扣面试经典——11题</a></span><a href="https://www.eurekashadow.xin/blog/LeetCode11#%E5%8A%9B%E6%89%A3%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B811%E9%A2%98" class="hash-link" aria-label="力扣面试经典11题的直接链接" title="力扣面试经典11题的直接链接">​</a></h3>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-参考代码">💡 参考代码：<a href="https://www.eurekashadow.xin/blog/LeetCode11#-%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81" class="hash-link" aria-label="💡 参考代码：的直接链接" title="💡 参考代码：的直接链接">​</a></h3>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 盛最多水的容器 - 双指针解法</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param height 整数数组，表示每条垂线的高度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param heightSize 数组长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 容器可以储存的最大水量</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">maxArea</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> height</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> heightSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 初始化左右指针</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> left </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">              </span><span class="token comment" style="color:#999988;font-style:italic">// 左指针指向数组开始</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> right </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> heightSize </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 右指针指向数组末尾</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> maxWater </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// 记录最大储水量</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 当左指针小于右指针时继续循环</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">left </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> right</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 计算当前容器的储水量</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 面积 = 两线中较短的高度 × 两线之间的距离</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> currentWater </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">right </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> left</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                          </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">height</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">left</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> height</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">right</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> height</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">left</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> height</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">right</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 更新最大储水量</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">currentWater </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> maxWater</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            maxWater </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> currentWater</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 移动较短的那根垂线的指针</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 因为只有这样才能可能找到更大的面积</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">height</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">left</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> height</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">right</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            left</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 移动左指针</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            right</span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 移动右指针</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> maxWater</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 返回最大储水量</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-总结">📖 总结：<a href="https://www.eurekashadow.xin/blog/LeetCode11#-%E6%80%BB%E7%BB%93" class="hash-link" aria-label="📖 总结：的直接链接" title="📖 总结：的直接链接">​</a></h3>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>点击展开题目总结</summary><div><div class="collapsibleContent_i85q"><h1>🤔 盛最多水的容器</h1><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1️⃣-题目核心信息">1️⃣ 题目核心信息<a href="https://www.eurekashadow.xin/blog/LeetCode11#1%EF%B8%8F%E2%83%A3-%E9%A2%98%E7%9B%AE%E6%A0%B8%E5%BF%83%E4%BF%A1%E6%81%AF" class="hash-link" aria-label="1️⃣ 题目核心信息的直接链接" title="1️⃣ 题目核心信息的直接链接">​</a></h2><p>🎯 <strong>功能描述</strong>：给定n条垂线的高度数组，找出其中两条线使得它们与x轴构成的容器能容纳最多的水</p><p>📥 <strong>输入输出</strong>：</p><ul>
<li><strong>输入</strong>：<code>height</code>整数数组表示每条垂线高度，<code>heightSize</code>表示数组长度</li>
<li><strong>输出</strong>：返回容器可以储存的最大水量（面积）</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2️⃣-实现原理">2️⃣ 实现原理<a href="https://www.eurekashadow.xin/blog/LeetCode11#2%EF%B8%8F%E2%83%A3-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86" class="hash-link" aria-label="2️⃣ 实现原理的直接链接" title="2️⃣ 实现原理的直接链接">​</a></h2><p>💡 <strong>核心思路</strong>：使用双指针法从数组两端向中间移动，每次移动较短边的指针以寻找可能的最大面积</p><p>📋 <strong>实现步骤</strong>：</p><ol>
<li>初始化左右指针分别指向数组首尾</li>
<li>计算当前两指针构成的容器面积</li>
<li>更新记录的最大面积值</li>
<li>移动较短边的指针，重复步骤2-3直到指针相遇</li>
</ol><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3️⃣-关键点解析">3️⃣ 关键点解析<a href="https://www.eurekashadow.xin/blog/LeetCode11#3%EF%B8%8F%E2%83%A3-%E5%85%B3%E9%94%AE%E7%82%B9%E8%A7%A3%E6%9E%90" class="hash-link" aria-label="3️⃣ 关键点解析的直接链接" title="3️⃣ 关键点解析的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-代码技巧">🎯 代码技巧<a href="https://www.eurekashadow.xin/blog/LeetCode11#-%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7" class="hash-link" aria-label="🎯 代码技巧的直接链接" title="🎯 代码技巧的直接链接">​</a></h3><ul>
<li>使用三元运算符简化高度比较：<code>height[left] &lt; height[right] ? height[left] : height[right]</code></li>
<li>贪心策略：总是移动较短边以寻找更大面积的可能性</li>
<li>面积计算公式：宽度×较短高度 = <code>(right-left) * min(height[left], height[right])</code></li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4️⃣-使用场景">4️⃣ 使用场景<a href="https://www.eurekashadow.xin/blog/LeetCode11#4%EF%B8%8F%E2%83%A3-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="4️⃣ 使用场景的直接链接" title="4️⃣ 使用场景的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-适用情况">✅ 适用情况：<a href="https://www.eurekashadow.xin/blog/LeetCode11#-%E9%80%82%E7%94%A8%E6%83%85%E5%86%B5" class="hash-link" aria-label="✅ 适用情况：的直接链接" title="✅ 适用情况：的直接链接">​</a></h3><ul>
<li>需要在一个数组中找到两个元素使某种乘积最大化</li>
<li>可以用双指针优化暴力解法的问题</li>
<li>求解具有对称性质的最优化问题</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-前提条件">⚠️ 前提条件：<a href="https://www.eurekashadow.xin/blog/LeetCode11#%EF%B8%8F-%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6" class="hash-link" aria-label="⚠️ 前提条件：的直接链接" title="⚠️ 前提条件：的直接链接">​</a></h3><ul>
<li>输入数组至少包含两个元素</li>
<li>数组元素为非负整数</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5️⃣-复杂度分析">5️⃣ 复杂度分析<a href="https://www.eurekashadow.xin/blog/LeetCode11#5%EF%B8%8F%E2%83%A3-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90" class="hash-link" aria-label="5️⃣ 复杂度分析的直接链接" title="5️⃣ 复杂度分析的直接链接">​</a></h2><ul>
<li>
<p>⏱️ 时间复杂度：O(n)，其中n是数组长度，每个元素最多访问一次</p>
</li>
<li>
<p>💾 空间复杂度：O(1)，只使用常数额外空间</p>
</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6️⃣-注意事项">6️⃣ 注意事项<a href="https://www.eurekashadow.xin/blog/LeetCode11#6%EF%B8%8F%E2%83%A3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="6️⃣ 注意事项的直接链接" title="6️⃣ 注意事项的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-边界情况">🚩 边界情况：<a href="https://www.eurekashadow.xin/blog/LeetCode11#-%E8%BE%B9%E7%95%8C%E6%83%85%E5%86%B5" class="hash-link" aria-label="🚩 边界情况：的直接链接" title="🚩 边界情况：的直接链接">​</a></h3><ul>
<li>数组只有两个元素的情况</li>
<li>所有元素高度相同的情况</li>
<li>数组为空或只有一个元素的情况（题目保证不会出现）</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-易错点">💥 易错点：<a href="https://www.eurekashadow.xin/blog/LeetCode11#-%E6%98%93%E9%94%99%E7%82%B9" class="hash-link" aria-label="💥 易错点：的直接链接" title="💥 易错点：的直接链接">​</a></h3><ul>
<li>错误地移动较高边的指针，导致错过最优解</li>
<li>面积计算时忘记取两线中的较小值作为高度</li>
<li>循环条件判断错误，可能导致指针越界</li>
</ul></div></div></details>]]></content>
        <author>
            <name>Eureka X</name>
            <uri>https://github.com/EurekaShadow</uri>
        </author>
        <category label="数组" term="数组"/>
        <category label="双指针" term="双指针"/>
        <category label="贪心" term="贪心"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[两数之和Ⅱ-输入有序数组]]></title>
        <id>https://www.eurekashadow.xin/blog/LeetCode167</id>
        <link href="https://www.eurekashadow.xin/blog/LeetCode167"/>
        <updated>2025-08-20T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[力扣面试经典——167题]]></summary>
        <content type="html"><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="力扣面试经典167题"><span class="B2_JnYG"><a href="https://leetcode.cn/problems/two-sum-ii-input-array-is-sorted/description/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer" title="力扣">力扣面试经典——167题</a></span><a href="https://www.eurekashadow.xin/blog/LeetCode167#%E5%8A%9B%E6%89%A3%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B8167%E9%A2%98" class="hash-link" aria-label="力扣面试经典167题的直接链接" title="力扣面试经典167题的直接链接">​</a></h3>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-参考代码">💡 参考代码：<a href="https://www.eurekashadow.xin/blog/LeetCode167#-%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81" class="hash-link" aria-label="💡 参考代码：的直接链接" title="💡 参考代码：的直接链接">​</a></h3>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 两数之和 II - 输入有序数组</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 给定一个按非递减顺序排列的整数数组，找出两个数使得它们的和等于目标值</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 返回这两个数的下标（下标从1开始）</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 解题思路：</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 使用双指针法，利用数组有序的特性</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 设置左指针指向数组开始，右指针指向数组结束</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 根据当前两数之和与目标值的比较，移动指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 时间复杂度：O(n) - 最多遍历一次数组</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 空间复杂度：O(1) - 只使用常量级额外空间</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param numbers 输入的有序整数数组</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param numbersSize 数组长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param target 目标和</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param returnSize 返回数组的长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 包含两个下标的数组</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">twoSum</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> numbers</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> numbersSize</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> target</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> returnSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 分配返回数组内存</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token function" style="color:#d73a49">malloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">2</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">returnSize </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 初始化双指针</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> left </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// 左指针，指向数组开始</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> right </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> numbersSize </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 右指针，指向数组结束</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 双指针向中间移动查找</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">left </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> right</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> sum </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> numbers</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">left</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> numbers</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">right</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">sum </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> target</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 找到目标和，注意题目要求下标从1开始</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            result</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> left </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            result</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> right </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> result</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">sum </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> target</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 当前和小于目标值，左指针右移增大和值</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            left</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 当前和大于目标值，右指针左移减小和值</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            right</span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 根据题目保证有唯一解，此处不会执行到</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> result</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-总结">📖 总结：<a href="https://www.eurekashadow.xin/blog/LeetCode167#-%E6%80%BB%E7%BB%93" class="hash-link" aria-label="📖 总结：的直接链接" title="📖 总结：的直接链接">​</a></h3>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>点击展开题目总结</summary><div><div class="collapsibleContent_i85q"><h1>🤔 两数之和Ⅱ-输入有序数组</h1><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1️⃣-题目核心信息">1️⃣ 题目核心信息<a href="https://www.eurekashadow.xin/blog/LeetCode167#1%EF%B8%8F%E2%83%A3-%E9%A2%98%E7%9B%AE%E6%A0%B8%E5%BF%83%E4%BF%A1%E6%81%AF" class="hash-link" aria-label="1️⃣ 题目核心信息的直接链接" title="1️⃣ 题目核心信息的直接链接">​</a></h2><p>🎯 <strong>功能描述</strong>：在一个非递减有序整数数组中找到两个数，使其和等于目标值，并返回这两个数的下标（从1开始）</p><p>📥 <strong>输入输出</strong>：</p><ul>
<li><strong>输入</strong>：<!-- -->
<ul>
<li><code>numbers</code>: 按非递减顺序排列的整数数组</li>
<li><code>target</code>: 目标和值</li>
</ul>
</li>
<li><strong>输出</strong>：包含两个下标的数组 [index1, index2]，其中 <code>1 &lt;= index1 &lt; index2 &lt;= numbers.length</code></li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2️⃣-实现原理">2️⃣ 实现原理<a href="https://www.eurekashadow.xin/blog/LeetCode167#2%EF%B8%8F%E2%83%A3-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86" class="hash-link" aria-label="2️⃣ 实现原理的直接链接" title="2️⃣ 实现原理的直接链接">​</a></h2><p>💡 <strong>核心思路</strong>：利用数组有序的特性，使用双指针技术从两端向中间搜索，根据当前和与目标值的比较来移动指针</p><p>📋 <strong>实现步骤</strong>：</p><ol>
<li>初始化左指针指向数组开始，右指针指向数组结束</li>
<li>计算左右指针所指向元素的和</li>
<li>比较当前和与目标值：<!-- -->
<ul>
<li>如果相等，则找到答案，返回下标（注意转换为从1开始）</li>
<li>如果小于目标值，左指针右移以增大和值</li>
<li>如果大于目标值，右指针左移以减小和值</li>
</ul>
</li>
<li>重复步骤2-3直到找到答案</li>
</ol><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3️⃣-关键点解析">3️⃣ 关键点解析<a href="https://www.eurekashadow.xin/blog/LeetCode167#3%EF%B8%8F%E2%83%A3-%E5%85%B3%E9%94%AE%E7%82%B9%E8%A7%A3%E6%9E%90" class="hash-link" aria-label="3️⃣ 关键点解析的直接链接" title="3️⃣ 关键点解析的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-代码技巧">🎯 代码技巧<a href="https://www.eurekashadow.xin/blog/LeetCode167#-%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7" class="hash-link" aria-label="🎯 代码技巧的直接链接" title="🎯 代码技巧的直接链接">​</a></h3><ul>
<li><strong>双指针法</strong>：利用有序数组的特性，避免了O(n²)的暴力搜索</li>
<li><strong>有序数组的单调性</strong>：根据和值与目标值的比较，可以确定移动哪个指针</li>
<li><strong>下标转换</strong>：题目要求下标从1开始，需要将数组索引+1</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4️⃣-使用场景">4️⃣ 使用场景<a href="https://www.eurekashadow.xin/blog/LeetCode167#4%EF%B8%8F%E2%83%A3-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="4️⃣ 使用场景的直接链接" title="4️⃣ 使用场景的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-适用情况">✅ 适用情况：<a href="https://www.eurekashadow.xin/blog/LeetCode167#-%E9%80%82%E7%94%A8%E6%83%85%E5%86%B5" class="hash-link" aria-label="✅ 适用情况：的直接链接" title="✅ 适用情况：的直接链接">​</a></h3><ul>
<li>在有序数组中查找满足某种条件的两个元素</li>
<li>需要常量级空间复杂度的两数查找问题</li>
<li>已知数组有序且有唯一解的情况</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-前提条件">⚠️ 前提条件：<a href="https://www.eurekashadow.xin/blog/LeetCode167#%EF%B8%8F-%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6" class="hash-link" aria-label="⚠️ 前提条件：的直接链接" title="⚠️ 前提条件：的直接链接">​</a></h3><ul>
<li>数组必须是非递减有序排列</li>
<li>保证存在唯一解</li>
<li>不允许重复使用相同元素</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5️⃣-复杂度分析">5️⃣ 复杂度分析<a href="https://www.eurekashadow.xin/blog/LeetCode167#5%EF%B8%8F%E2%83%A3-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90" class="hash-link" aria-label="5️⃣ 复杂度分析的直接链接" title="5️⃣ 复杂度分析的直接链接">​</a></h2><ul>
<li>⏱️ 时间复杂度：O(n)，其中n是数组长度，最多需要遍历一次数组</li>
<li>💾 空间复杂度：O(1)，只使用了常量级额外空间（不计算返回数组）</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6️⃣-注意事项">6️⃣ 注意事项<a href="https://www.eurekashadow.xin/blog/LeetCode167#6%EF%B8%8F%E2%83%A3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="6️⃣ 注意事项的直接链接" title="6️⃣ 注意事项的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-边界情况">🚩 边界情况：<a href="https://www.eurekashadow.xin/blog/LeetCode167#-%E8%BE%B9%E7%95%8C%E6%83%85%E5%86%B5" class="hash-link" aria-label="🚩 边界情况：的直接链接" title="🚩 边界情况：的直接链接">​</a></h3><ul>
<li>数组只有两个元素且满足条件</li>
<li>目标值由数组首尾元素组成</li>
<li>负数参与计算的情况</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-易错点">💥 易错点：<a href="https://www.eurekashadow.xin/blog/LeetCode167#-%E6%98%93%E9%94%99%E7%82%B9" class="hash-link" aria-label="💥 易错点：的直接链接" title="💥 易错点：的直接链接">​</a></h3><ul>
<li>忘记将数组索引转换为从1开始的下标</li>
<li>指针移动条件判断错误</li>
<li>没有正确处理循环终止条件</li>
</ul></div></div></details>]]></content>
        <author>
            <name>Eureka X</name>
            <uri>https://github.com/EurekaShadow</uri>
        </author>
        <category label="数组" term="数组"/>
        <category label="双指针" term="双指针"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于ffmpeg]]></title>
        <id>https://www.eurekashadow.xin/blog/ffmpeg</id>
        <link href="https://www.eurekashadow.xin/blog/ffmpeg"/>
        <updated>2025-08-19T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[📦 FFmpeg 安装教程]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="-ffmpeg-安装教程"><span class="B2_JnYG">📦 <a href="https://blog.csdn.net/Natsuago/article/details/143231558" target="_blank" rel="noopener noreferrer" title="FFmpeg 安装详细步骤">FFmpeg 安装教程</a></span><a href="https://www.eurekashadow.xin/blog/ffmpeg#-ffmpeg-%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B" class="hash-link" aria-label="-ffmpeg-安装教程的直接链接" title="-ffmpeg-安装教程的直接链接">​</a></h2>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="-m3u8-格式视频转-mp4"><span class="B2_JnYG">🔄 m3u8 格式视频转 mp4</span><a href="https://www.eurekashadow.xin/blog/ffmpeg#-m3u8-%E6%A0%BC%E5%BC%8F%E8%A7%86%E9%A2%91%E8%BD%AC-mp4" class="hash-link" aria-label="-m3u8-格式视频转-mp4的直接链接" title="-m3u8-格式视频转-mp4的直接链接">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-密钥文件准备">🔑 密钥文件准备<a href="https://www.eurekashadow.xin/blog/ffmpeg#-%E5%AF%86%E9%92%A5%E6%96%87%E4%BB%B6%E5%87%86%E5%A4%87" class="hash-link" aria-label="🔑 密钥文件准备的直接链接" title="🔑 密钥文件准备的直接链接">​</a></h3>
<p>在 <code>index</code> 目录下有一个视频密钥文件 <code>0.key</code>：</p>
<p></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-转换命令">▶️ 转换命令<a href="https://www.eurekashadow.xin/blog/ffmpeg#%EF%B8%8F-%E8%BD%AC%E6%8D%A2%E5%91%BD%E4%BB%A4" class="hash-link" aria-label="▶️ 转换命令的直接链接" title="▶️ 转换命令的直接链接">​</a></h3>
<p>在 <code>m3u8</code> 文件所在目录下执行相应命令：</p>
<div class="tabs-container tabList__CuJ"><ul role="tablist" aria-orientation="horizontal" class="tabs"><li role="tab" tabindex="0" aria-selected="true" class="tabs__item tabItem_LNqP tabs__item--active">🔐 有密钥</li><li role="tab" tabindex="-1" aria-selected="false" class="tabs__item tabItem_LNqP">🔓 无密钥</li></ul><div class="margin-top--md"><div role="tabpanel" class="tabItem_Ymn6"><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">ffmpeg -allowed_extensions ALL -i "index.m3u8" -c copy -bsf:a aac_adtstoasc -hls_key_info_file "index/0.key" "output.mp4"</span><br></span></code></pre></div></div></div><div role="tabpanel" class="tabItem_Ymn6" hidden=""><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">ffmpeg -i "index.m3u8" -c copy -bsf:a aac_adtstoasc "output.mp4"</span><br></span></code></pre></div></div></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-转换结果">✅ 转换结果<a href="https://www.eurekashadow.xin/blog/ffmpeg#-%E8%BD%AC%E6%8D%A2%E7%BB%93%E6%9E%9C" class="hash-link" aria-label="✅ 转换结果的直接链接" title="✅ 转换结果的直接链接">​</a></h3>
<p></p>
<p></p>
<p>🎉 转换成功！！！</p>]]></content>
        <author>
            <name>Eureka X</name>
            <uri>https://github.com/EurekaShadow</uri>
        </author>
        <category label="ffmpeg" term="ffmpeg"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[判断子序列]]></title>
        <id>https://www.eurekashadow.xin/blog/LeetCode392</id>
        <link href="https://www.eurekashadow.xin/blog/LeetCode392"/>
        <updated>2025-08-19T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[力扣面试经典——392题]]></summary>
        <content type="html"><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="力扣面试经典392题"><span class="B2_JnYG"><a href="https://leetcode.cn/problems/is-subsequence/description/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer" title="力扣">力扣面试经典——392题</a></span><a href="https://www.eurekashadow.xin/blog/LeetCode392#%E5%8A%9B%E6%89%A3%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B8392%E9%A2%98" class="hash-link" aria-label="力扣面试经典392题的直接链接" title="力扣面试经典392题的直接链接">​</a></h3>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-参考代码">💡 参考代码：<a href="https://www.eurekashadow.xin/blog/LeetCode392#-%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81" class="hash-link" aria-label="💡 参考代码：的直接链接" title="💡 参考代码：的直接链接">​</a></h3>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 判断字符串 s 是否为字符串 t 的子序列</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param s 待检查的子序列字符串</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param t 主字符串</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return bool 如果 s 是 t 的子序列返回 true，否则返回 false</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">bool </span><span class="token function" style="color:#d73a49">isSubsequence</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> t</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 使用双指针分别指向两个字符串的当前位置</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 指向字符串 s 的指针</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> j </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 指向字符串 t 的指针</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 遍历两个字符串</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token char">'\0'</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> t</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">j</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token char">'\0'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 如果当前字符匹配，则移动 s 的指针</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> t</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">j</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 总是移动 t 的指针</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        j</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 如果 s 的指针到达末尾，说明 s 是 t 的子序列</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token char">'\0'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-总结">📖 总结：<a href="https://www.eurekashadow.xin/blog/LeetCode392#-%E6%80%BB%E7%BB%93" class="hash-link" aria-label="📖 总结：的直接链接" title="📖 总结：的直接链接">​</a></h3>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>点击展开题目总结</summary><div><div class="collapsibleContent_i85q"><h1>🤔 判断子序列</h1><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1️⃣-题目核心信息">1️⃣ 题目核心信息<a href="https://www.eurekashadow.xin/blog/LeetCode392#1%EF%B8%8F%E2%83%A3-%E9%A2%98%E7%9B%AE%E6%A0%B8%E5%BF%83%E4%BF%A1%E6%81%AF" class="hash-link" aria-label="1️⃣ 题目核心信息的直接链接" title="1️⃣ 题目核心信息的直接链接">​</a></h2><p>🎯 <strong>功能描述</strong>：判断字符串 s 是否为字符串 t 的子序列，即能否通过删除 t 中的一些字符（也可以不删除）得到 s，且不改变字符的相对位置</p><p>📥 <strong>输入输出</strong>：</p><ul>
<li><strong>输入</strong>：两个字符串 s（待检查的子序列）和 t（主字符串）</li>
<li><strong>输出</strong>：布尔值，如果 s 是 t 的子序列返回 true，否则返回 false</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2️⃣-实现原理">2️⃣ 实现原理<a href="https://www.eurekashadow.xin/blog/LeetCode392#2%EF%B8%8F%E2%83%A3-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86" class="hash-link" aria-label="2️⃣ 实现原理的直接链接" title="2️⃣ 实现原理的直接链接">​</a></h2><p>💡 <strong>核心思路</strong>：使用双指针技术逐个匹配字符，或者预处理主字符串建立索引表以优化大量查询场景</p><p>📋 <strong>实现步骤</strong>：</p><ol>
<li>基础解法：使用两个指针分别遍历 s 和 t 字符串</li>
<li>当字符匹配时，同时移动两个指针；不匹配时只移动 t 的指针</li>
<li>进阶解法：预处理 t 字符串，为每个位置建立字符索引表</li>
<li>查询时直接利用索引表快速定位下一个匹配字符的位置</li>
</ol><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3️⃣-关键点解析">3️⃣ 关键点解析<a href="https://www.eurekashadow.xin/blog/LeetCode392#3%EF%B8%8F%E2%83%A3-%E5%85%B3%E9%94%AE%E7%82%B9%E8%A7%A3%E6%9E%90" class="hash-link" aria-label="3️⃣ 关键点解析的直接链接" title="3️⃣ 关键点解析的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-代码技巧">🎯 代码技巧<a href="https://www.eurekashadow.xin/blog/LeetCode392#-%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7" class="hash-link" aria-label="🎯 代码技巧的直接链接" title="🎯 代码技巧的直接链接">​</a></h3><ul>
<li>双指针技术：有效处理序列匹配问题</li>
<li>预处理优化：通过空间换时间，提高大量查询场景下的效率</li>
<li>边界处理：正确判断指针到达字符串末尾的情况</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4️⃣-使用场景">4️⃣ 使用场景<a href="https://www.eurekashadow.xin/blog/LeetCode392#4%EF%B8%8F%E2%83%A3-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="4️⃣ 使用场景的直接链接" title="4️⃣ 使用场景的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-适用情况">✅ 适用情况：<a href="https://www.eurekashadow.xin/blog/LeetCode392#-%E9%80%82%E7%94%A8%E6%83%85%E5%86%B5" class="hash-link" aria-label="✅ 适用情况：的直接链接" title="✅ 适用情况：的直接链接">​</a></h3><ul>
<li>判断一个字符串是否为另一个字符串的子序列</li>
<li>文本处理中的模式匹配</li>
<li>大量重复查询同一主字符串的子序列判断</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-前提条件">⚠️ 前提条件：<a href="https://www.eurekashadow.xin/blog/LeetCode392#%EF%B8%8F-%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6" class="hash-link" aria-label="⚠️ 前提条件：的直接链接" title="⚠️ 前提条件：的直接链接">​</a></h3><ul>
<li>输入字符串只包含小写英文字母</li>
<li>主字符串相对固定，需要多次查询不同子序列</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5️⃣-复杂度分析">5️⃣ 复杂度分析<a href="https://www.eurekashadow.xin/blog/LeetCode392#5%EF%B8%8F%E2%83%A3-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90" class="hash-link" aria-label="5️⃣ 复杂度分析的直接链接" title="5️⃣ 复杂度分析的直接链接">​</a></h2><ul>
<li>
<p>⏱️ 时间复杂度：</p>
<ul>
<li>基础解法：O(|t|)，其中 |t| 是主字符串长度</li>
<li>进阶解法：预处理 O(|t|)，单次查询 O(|s|)</li>
</ul>
</li>
<li>
<p>💾 空间复杂度：</p>
<ul>
<li>基础解法：O(1)</li>
<li>进阶解法：O(|t| × 26) = O(|t|)</li>
</ul>
</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6️⃣-注意事项">6️⃣ 注意事项<a href="https://www.eurekashadow.xin/blog/LeetCode392#6%EF%B8%8F%E2%83%A3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="6️⃣ 注意事项的直接链接" title="6️⃣ 注意事项的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-边界情况">🚩 边界情况：<a href="https://www.eurekashadow.xin/blog/LeetCode392#-%E8%BE%B9%E7%95%8C%E6%83%85%E5%86%B5" class="hash-link" aria-label="🚩 边界情况：的直接链接" title="🚩 边界情况：的直接链接">​</a></h3><ul>
<li>空字符串 s 总是任何字符串 t 的子序列</li>
<li>非空字符串 s 永远不是空字符串 t 的子序列</li>
<li>s 长度大于 t 长度时，s 不可能是 t 的子序列</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-易错点">💥 易错点：<a href="https://www.eurekashadow.xin/blog/LeetCode392#-%E6%98%93%E9%94%99%E7%82%B9" class="hash-link" aria-label="💥 易错点：的直接链接" title="💥 易错点：的直接链接">​</a></h3><ul>
<li>忘记处理字符串结束符 '\0'</li>
<li>在进阶解法中索引映射错误（字符到数组下标转换）</li>
<li>查询时位置更新逻辑错误，导致重复匹配同一位置字符</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="7️⃣-进阶解法">7️⃣ 进阶解法<a href="https://www.eurekashadow.xin/blog/LeetCode392#7%EF%B8%8F%E2%83%A3-%E8%BF%9B%E9%98%B6%E8%A7%A3%E6%B3%95" class="hash-link" aria-label="7️⃣ 进阶解法的直接链接" title="7️⃣ 进阶解法的直接链接">​</a></h2><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">include</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property string" style="color:#e3116c">&lt;stdio.h&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">include</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property string" style="color:#e3116c">&lt;stdlib.h&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">include</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property string" style="color:#e3116c">&lt;string.h&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">include</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property string" style="color:#e3116c">&lt;limits.h&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 预处理字符串 t，建立字符位置索引表</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param t 主字符串</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param tLen 主字符串长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param indexMap 字符索引表，indexMap[c][i] 表示字符 c 在位置 i 之后第一次出现的位置</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">preprocess</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">char</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> t</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> tLen</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> indexMap</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 为每个字符分配空间，存储下一个出现位置的信息</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">26</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        indexMap</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token function" style="color:#d73a49">malloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">tLen </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 初始化为 -1，表示未找到</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> j </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> j </span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token plain"> tLen</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> j</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            indexMap</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">j</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 从后往前填充索引表</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> tLen </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> c </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> t</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token char">'a'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 将字符转换为索引 0-25</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 复制上一个位置的所有字符的索引信息</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> j </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> j </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">26</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> j</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            indexMap</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">j</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> indexMap</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">j</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 更新当前字符在位置 i 的索引</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        indexMap</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">c</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 使用预处理的索引表快速判断 s 是否为 t 的子序列</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param s 待检查的子序列字符串</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param indexMap 预处理得到的字符索引表</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return bool 如果 s 是 t 的子序列返回 true，否则返回 false</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">bool </span><span class="token function" style="color:#d73a49">isSubsequenceAdvanced</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">char</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> indexMap</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> pos </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 当前在 t 中的位置</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token char">'\0'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> c </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token char">'a'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 将字符转换为索引 0-25</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 查找字符 c 在当前位置之后第一次出现的位置</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        pos </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> indexMap</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">c</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">pos</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 如果找不到，说明不是子序列</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">pos </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> false</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 移动到找到位置的下一个位置</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        pos</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> true</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 释放预处理索引表占用的内存</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param indexMap 字符索引表</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">freeIndexMap</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> indexMap</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">26</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">free</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">indexMap</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">free</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">indexMap</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// 示例用法</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">main</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 进阶解法测试</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">printf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"\n进阶解法测试:\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> t</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"ahbgdc"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> tLen </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">strlen</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">t</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 预处理</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> indexMap </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token function" style="color:#d73a49">malloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">26</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">preprocess</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">t</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> tLen</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> indexMap</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 查询</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">printf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"isSubsequenceAdvanced(\"abc\", indexMap): %s\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">           </span><span class="token function" style="color:#d73a49">isSubsequenceAdvanced</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"abc"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> indexMap</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"true"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"false"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">printf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"isSubsequenceAdvanced(\"axc\", indexMap): %s\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">           </span><span class="token function" style="color:#d73a49">isSubsequenceAdvanced</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"axc"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> indexMap</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"true"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"false"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 释放内存</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">freeIndexMap</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">indexMap</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="8⃣-补充说明">8⃣ 补充说明<a href="https://www.eurekashadow.xin/blog/LeetCode392#8%E2%83%A3-%E8%A1%A5%E5%85%85%E8%AF%B4%E6%98%8E" class="hash-link" aria-label="8⃣ 补充说明的直接链接" title="8⃣ 补充说明的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-预处理阶段">1. 预处理阶段<a href="https://www.eurekashadow.xin/blog/LeetCode392#1-%E9%A2%84%E5%A4%84%E7%90%86%E9%98%B6%E6%AE%B5" class="hash-link" aria-label="1. 预处理阶段的直接链接" title="1. 预处理阶段的直接链接">​</a></h3><p>—— <code>preprocess</code> 函数</p><p>这个函数的主要目的是为字符串 t 构建一个索引表，使得后续查询更高效。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="核心思想">核心思想<a href="https://www.eurekashadow.xin/blog/LeetCode392#%E6%A0%B8%E5%BF%83%E6%80%9D%E6%83%B3" class="hash-link" aria-label="核心思想的直接链接" title="核心思想的直接链接">​</a></h4><p>构建一个二维数组 <code>indexMap[26][tLen+1]</code>，其中：</p><ul>
<li>第一维代表26个小写字母（a-z）</li>
<li>第二维代表在字符串 t 中的位置（0 到 tLen）</li>
<li><code>indexMap[c][i]</code> 的值表示字符 c 在位置 i 之后（包括位置 i）第一次出现的位置</li>
</ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="举例说明">举例说明<a href="https://www.eurekashadow.xin/blog/LeetCode392#%E4%B8%BE%E4%BE%8B%E8%AF%B4%E6%98%8E" class="hash-link" aria-label="举例说明的直接链接" title="举例说明的直接链接">​</a></h4><p>假设 <code>t = "abcba"</code>，长度为5：</p><ol>
<li>
<p><strong>初始化</strong>：创建一个 26×6 的二维数组，所有值初始化为 -1</p>
</li>
<li>
<p><strong>从后往前填充</strong>：</p>
<ul>
<li>位置4（字符'a'）:<!-- -->
<ul>
<li>先复制位置5的所有信息（都是-1）</li>
<li>更新字符'a'在位置4的值为4</li>
</ul>
</li>
<li>位置3（字符'b'）:<!-- -->
<ul>
<li>先复制位置4的所有信息</li>
<li>更新字符'b'在位置3的值为3</li>
</ul>
</li>
<li>位置2（字符'c'）:<!-- -->
<ul>
<li>先复制位置3的所有信息</li>
<li>更新字符'c'在位置2的值为2</li>
</ul>
</li>
<li>位置1（字符'b'）:<!-- -->
<ul>
<li>先复制位置2的所有信息</li>
<li>更新字符'b'在位置1的值为1</li>
</ul>
</li>
<li>位置0（字符'a'）:<!-- -->
<ul>
<li>先复制位置1的所有信息</li>
<li>更新字符'a'在位置0的值为0</li>
</ul>
</li>
</ul>
</li>
</ol><p>最终得到的部分索引表（只显示相关字符）：</p><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">indexMap['a'-'a'][0]=0, indexMap['a'-'a'][1]=4, indexMap['a'-'a'][2]=4, indexMap['a'-'a'][3]=4, indexMap['a'-'a'][4]=4, indexMap['a'-'a'][5]=-1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">indexMap['b'-'a'][0]=1, indexMap['b'-'a'][1]=1, indexMap['b'-'a'][2]=3, indexMap['b'-'a'][3]=3, indexMap['b'-'a'][4]=-1, indexMap['b'-'a'][5]=-1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">indexMap['c'-'a'][0]=2, indexMap['c'-'a'][1]=2, indexMap['c'-'a'][2]=2, indexMap['c'-'a'][3]=-1, indexMap['c'-'a'][4]=-1, indexMap['c'-'a'][5]=-1</span><br></span></code></pre></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="2-查询阶段">2. 查询阶段<a href="https://www.eurekashadow.xin/blog/LeetCode392#2-%E6%9F%A5%E8%AF%A2%E9%98%B6%E6%AE%B5" class="hash-link" aria-label="2. 查询阶段的直接链接" title="2. 查询阶段的直接链接">​</a></h3><p>—— <code>isSubsequenceAdvanced</code> 函数</p><p>使用预处理好的索引表快速判断子序列：</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="工作原理">工作原理<a href="https://www.eurekashadow.xin/blog/LeetCode392#%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86" class="hash-link" aria-label="工作原理的直接链接" title="工作原理的直接链接">​</a></h4><p>维护一个当前位置 <code>pos</code>，对于要查找的字符串 <code>s</code> 中的每个字符：</p><ol>
<li>查找该字符在当前位置之后第一次出现的位置</li>
<li>如果找不到（返回-1），则说明不是子序列</li>
<li>如果找到，则将位置更新为找到位置的下一个位置</li>
</ol><h4 class="anchor anchorWithStickyNavbar_LWe7" id="举例说明-1">举例说明<a href="https://www.eurekashadow.xin/blog/LeetCode392#%E4%B8%BE%E4%BE%8B%E8%AF%B4%E6%98%8E-1" class="hash-link" aria-label="举例说明的直接链接" title="举例说明的直接链接">​</a></h4><p>继续使用上面的例子，<code>t = "abcba"</code>，现在要检查 <code>s = "acb"</code> 是否为子序列：</p><ol>
<li>初始位置 <code>pos = 0</code></li>
<li>查找字符 'a'：<!-- -->
<ul>
<li><code>indexMap['a'-'a'][0] = 0</code></li>
<li>找到位置0，更新 <code>pos = 0 + 1 = 1</code></li>
</ul>
</li>
<li>查找字符 'c'：<!-- -->
<ul>
<li><code>indexMap['c'-'a'][1] = 2</code></li>
<li>找到位置2，更新 <code>pos = 2 + 1 = 3</code></li>
</ul>
</li>
<li>查找字符 'b'：<!-- -->
<ul>
<li><code>indexMap['b'-'a'][3] = 3</code></li>
<li>找到位置3，更新 <code>pos = 3 + 1 = 4</code></li>
</ul>
</li>
<li>字符串遍历完成，返回 <code>true</code></li>
</ol><p>如果检查 <code>s = "abc"</code>：</p><ol>
<li>初始位置 <code>pos = 0</code></li>
<li>查找字符 'a'：<code>indexMap['a'-'a'][0] = 0</code>，<code>pos = 1</code></li>
<li>查找字符 'b'：<code>indexMap['b'-'a'][1] = 1</code>，<code>pos = 2</code></li>
<li>查找字符 'c'：<code>indexMap['c'-'a'][2] = 2</code>，<code>pos = 3</code></li>
<li>返回 <code>true</code></li>
</ol><p>这种方法的优势在于，无论主字符串 <code>t</code> 有多长，每次查询的时间复杂度只与待查询字符串 <code>s</code> 的长度有关，而与 <code>t</code> 的长度无关。这对于需要大量查询的场景非常有用。</p><p>关于此进阶解法，我<strong>尚不理解</strong>！</p></div></div></details>]]></content>
        <author>
            <name>Eureka X</name>
            <uri>https://github.com/EurekaShadow</uri>
        </author>
        <category label="双指针" term="双指针"/>
        <category label="字符串" term="字符串"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[验证回文串]]></title>
        <id>https://www.eurekashadow.xin/blog/LeetCode125</id>
        <link href="https://www.eurekashadow.xin/blog/LeetCode125"/>
        <updated>2025-08-18T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[力扣面试经典——125题]]></summary>
        <content type="html"><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="力扣面试经典125题"><span class="B2_JnYG"><a href="https://leetcode.cn/problems/valid-palindrome/description/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer" title="力扣">力扣面试经典——125题</a></span><a href="https://www.eurekashadow.xin/blog/LeetCode125#%E5%8A%9B%E6%89%A3%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B8125%E9%A2%98" class="hash-link" aria-label="力扣面试经典125题的直接链接" title="力扣面试经典125题的直接链接">​</a></h3>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-参考代码">💡 参考代码：<a href="https://www.eurekashadow.xin/blog/LeetCode125#-%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81" class="hash-link" aria-label="💡 参考代码：的直接链接" title="💡 参考代码：的直接链接">​</a></h3>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 判断字符串是否为回文串</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 解题思路：</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 1. 使用双指针法，从字符串两端向中间移动</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 2. 跳过所有非字母数字字符</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 3. 将大写字母转换为小写进行比较</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 4. 如果所有对应字符都相等，则为回文串</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param s 输入字符串</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return true 表示是回文串，false 表示不是回文串</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">bool </span><span class="token function" style="color:#d73a49">isPalindrome</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 检查输入是否为空指针</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> true</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 初始化双指针</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> left </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">                    </span><span class="token comment" style="color:#999988;font-style:italic">// 左指针指向字符串开头</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> right </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">strlen</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">       </span><span class="token comment" style="color:#999988;font-style:italic">// 右指针指向字符串末尾</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 当左指针小于右指针时继续循环</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">left </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> right</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 跳过左侧非字母数字字符</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">left </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> right </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!</span><span class="token function" style="color:#d73a49">isalnum</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">left</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            left</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 跳过右侧非字母数字字符</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">left </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> right </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!</span><span class="token function" style="color:#d73a49">isalnum</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">right</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            right</span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 比较左右字符（转换为小写后比较）</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">tolower</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">left</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">tolower</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">right</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> false</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 字符不相等，不是回文串</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 移动指针向中间靠拢</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        left</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        right</span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 所有对应字符都相等，是回文串</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> true</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-总结">📖 总结：<a href="https://www.eurekashadow.xin/blog/LeetCode125#-%E6%80%BB%E7%BB%93" class="hash-link" aria-label="📖 总结：的直接链接" title="📖 总结：的直接链接">​</a></h3>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>点击展开题目总结</summary><div><div class="collapsibleContent_i85q"><h1>🤔 验证回文串</h1><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1️⃣-题目核心信息">1️⃣ 题目核心信息<a href="https://www.eurekashadow.xin/blog/LeetCode125#1%EF%B8%8F%E2%83%A3-%E9%A2%98%E7%9B%AE%E6%A0%B8%E5%BF%83%E4%BF%A1%E6%81%AF" class="hash-link" aria-label="1️⃣ 题目核心信息的直接链接" title="1️⃣ 题目核心信息的直接链接">​</a></h2><p>🎯 <strong>功能描述</strong>：判断一个字符串在去除所有非字母数字字符并转换为小写后，是否为回文串</p><p>📥 <strong>输入输出</strong>：</p><ul>
<li><strong>输入</strong>：char * s - 待判断的字符串</li>
<li><strong>输出</strong>：bool - true表示是回文串，false表示不是回文串</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2️⃣-实现原理">2️⃣ 实现原理<a href="https://www.eurekashadow.xin/blog/LeetCode125#2%EF%B8%8F%E2%83%A3-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86" class="hash-link" aria-label="2️⃣ 实现原理的直接链接" title="2️⃣ 实现原理的直接链接">​</a></h2><p>💡 <strong>核心思路</strong>：使用双指针法从字符串两端向中间移动，跳过非字母数字字符并忽略大小写进行比较</p><p>📋 <strong>实现步骤</strong>：</p><ol>
<li>初始化左右两个指针分别指向字符串的开始和结束位置</li>
<li>移动左指针跳过所有非字母数字字符</li>
<li>移动右指针跳过所有非字母数字字符</li>
<li>比较左右指针指向字符的小写形式，如果不相等则返回false</li>
<li>继续向中间移动指针，重复步骤2-4直到指针相遇</li>
</ol><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3️⃣-关键点解析">3️⃣ 关键点解析<a href="https://www.eurekashadow.xin/blog/LeetCode125#3%EF%B8%8F%E2%83%A3-%E5%85%B3%E9%94%AE%E7%82%B9%E8%A7%A3%E6%9E%90" class="hash-link" aria-label="3️⃣ 关键点解析的直接链接" title="3️⃣ 关键点解析的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-代码技巧">🎯 代码技巧<a href="https://www.eurekashadow.xin/blog/LeetCode125#-%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7" class="hash-link" aria-label="🎯 代码技巧的直接链接" title="🎯 代码技巧的直接链接">​</a></h3><ul>
<li>使用双指针法避免创建新字符串，节省空间</li>
<li>利用 <code>isalnum()</code> 函数判断字符是否为字母或数字</li>
<li>使用 <code>tolower()</code> 函数统一字符大小写进行比较</li>
<li>在循环中同时处理字符过滤和比较逻辑</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4️⃣-使用场景">4️⃣ 使用场景<a href="https://www.eurekashadow.xin/blog/LeetCode125#4%EF%B8%8F%E2%83%A3-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="4️⃣ 使用场景的直接链接" title="4️⃣ 使用场景的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-适用情况">✅ 适用情况：<a href="https://www.eurekashadow.xin/blog/LeetCode125#-%E9%80%82%E7%94%A8%E6%83%85%E5%86%B5" class="hash-link" aria-label="✅ 适用情况：的直接链接" title="✅ 适用情况：的直接链接">​</a></h3><ul>
<li>需要验证文本是否为回文格式</li>
<li>文本预处理后判断对称性</li>
<li>验证标识符或代码中的回文模式</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-前提条件">⚠️ 前提条件：<a href="https://www.eurekashadow.xin/blog/LeetCode125#%EF%B8%8F-%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6" class="hash-link" aria-label="⚠️ 前提条件：的直接链接" title="⚠️ 前提条件：的直接链接">​</a></h3><ul>
<li>输入字符串为ASCII字符</li>
<li>需要忽略大小写和非字母数字字符</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5️⃣-复杂度分析">5️⃣ 复杂度分析<a href="https://www.eurekashadow.xin/blog/LeetCode125#5%EF%B8%8F%E2%83%A3-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90" class="hash-link" aria-label="5️⃣ 复杂度分析的直接链接" title="5️⃣ 复杂度分析的直接链接">​</a></h2><ul>
<li>
<p>⏱️ 时间复杂度：O(n)，其中n为字符串长度，每个字符最多被访问一次</p>
</li>
<li>
<p>💾 空间复杂度：O(1)，只使用了常数级别的额外空间</p>
</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6️⃣-注意事项">6️⃣ 注意事项<a href="https://www.eurekashadow.xin/blog/LeetCode125#6%EF%B8%8F%E2%83%A3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="6️⃣ 注意事项的直接链接" title="6️⃣ 注意事项的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-边界情况">🚩 边界情况：<a href="https://www.eurekashadow.xin/blog/LeetCode125#-%E8%BE%B9%E7%95%8C%E6%83%85%E5%86%B5" class="hash-link" aria-label="🚩 边界情况：的直接链接" title="🚩 边界情况：的直接链接">​</a></h3><ul>
<li>空字符串或NULL指针</li>
<li>只包含非字母数字字符的字符串</li>
<li>单个字符的字符串</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-易错点">💥 易错点：<a href="https://www.eurekashadow.xin/blog/LeetCode125#-%E6%98%93%E9%94%99%E7%82%B9" class="hash-link" aria-label="💥 易错点：的直接链接" title="💥 易错点：的直接链接">​</a></h3><ul>
<li>忘记跳过非字母数字字符</li>
<li>忽略大小写转换导致判断错误</li>
<li>指针边界条件处理不当导致数组越界</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="7️⃣-补充说明">7️⃣ 补充说明<a href="https://www.eurekashadow.xin/blog/LeetCode125#7%EF%B8%8F%E2%83%A3-%E8%A1%A5%E5%85%85%E8%AF%B4%E6%98%8E" class="hash-link" aria-label="7️⃣ 补充说明的直接链接" title="7️⃣ 补充说明的直接链接">​</a></h2><p>函数的工作原理：</p><p>1.输入检查：首先检查输入字符串是否为 <code>NULL</code>，如果是则返回 <code>true</code></p><p>2.双指针初始化：使用两个指针，<code>left</code> 指向字符串开始，<code>right</code> 指向字符串结束</p><p>3.双指针向中间移动：跳过非字母数字字符，只比较有效字符</p><p>4.字符比较：将字符转换为小写后进行比较</p><p>5.返回结果：如果所有对应字符都匹配，则返回 <code>true</code>，否则返回 <code>false</code></p><p>例：简单回文 "A man, a plan, a canal: Panama"</p><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">原始字符串: "A man, a plan, a canal: Panama"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">有效字符:   A m a n a p l a n a c a n a l P a n a m a</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">转换为小写: a m a n a p l a n a c a n a l p a n a m a</span><br></span></code></pre></div></div><p>执行过程：</p><p>1.<code>left=0</code> 指向 'A'，<code>right=32</code> 指向 'a'</p><p>2.比较 <code>tolower('A')</code>和 <code>tolower('a')</code>，都是<code>'a'</code>，相等</p><p>3.继续向中间移动指针，跳过逗号和空格等非字母数字字符</p><p>4.依次比较每一对字符：(m,m), (a,a), (n,n)...</p><p>5.所有对应字符都相等，返回 <code>true</code></p></div></div></details>]]></content>
        <author>
            <name>Eureka X</name>
            <uri>https://github.com/EurekaShadow</uri>
        </author>
        <category label="双指针" term="双指针"/>
        <category label="字符串" term="字符串"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[文本左右对齐]]></title>
        <id>https://www.eurekashadow.xin/blog/LeetCode68</id>
        <link href="https://www.eurekashadow.xin/blog/LeetCode68"/>
        <updated>2025-08-17T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[力扣面试经典——68题]]></summary>
        <content type="html"><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="力扣面试经典68题"><span class="B2_JnYG"><a href="https://leetcode.cn/problems/text-justification/description/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer" title="力扣">力扣面试经典——68题</a></span><a href="https://www.eurekashadow.xin/blog/LeetCode68#%E5%8A%9B%E6%89%A3%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B868%E9%A2%98" class="hash-link" aria-label="力扣面试经典68题的直接链接" title="力扣面试经典68题的直接链接">​</a></h3>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-参考代码">💡 参考代码：<a href="https://www.eurekashadow.xin/blog/LeetCode68#-%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81" class="hash-link" aria-label="💡 参考代码：的直接链接" title="💡 参考代码：的直接链接">​</a></h3>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 根据给定的单词数组和最大宽度，生成左右对齐的文本行</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param words 单词数组</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param wordsSize 单词数量</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param maxWidth 每行的最大字符数</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param returnSize 返回结果数组的大小</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 对齐后的文本行数组</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">fullJustify</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> words</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> wordsSize</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> maxWidth</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> returnSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 分配结果数组内存</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token function" style="color:#d73a49">malloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> wordsSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">returnSize </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 遍历所有单词</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> wordsSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 确定当前行可以容纳的单词范围 [i, j)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> j </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> lineLength </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 当前行单词总长度（不包括空格）</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 贪心算法：尽可能多地放置单词</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 条件：还有单词未处理 且 当前行还能放下下一个单词（包括必要的空格）</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">j </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> wordsSize </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> lineLength </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">strlen</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">words</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">j</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">j </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token plain"> maxWidth</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            lineLength </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">strlen</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">words</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">j</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            j</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 分配当前行内存</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        result</span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">returnSize</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token function" style="color:#d73a49">malloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">char</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">maxWidth </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        result</span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">returnSize</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">maxWidth</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token char">'\0'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 字符串结束符</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 计算空格分配</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> wordCount </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> j </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 当前行的单词数</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> spaces </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> maxWidth </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> lineLength</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 需要填充的空格总数</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 处理不同情况</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">j </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> wordsSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 最后一行：左对齐</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> pos </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> k </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> k </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> j</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> k</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token comment" style="color:#999988;font-style:italic">// 复制单词</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> l </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> l </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">strlen</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">words</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">k</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> l</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    result</span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">returnSize</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">pos</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> words</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">k</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">l</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token comment" style="color:#999988;font-style:italic">// 单词间添加一个空格（除了最后一个单词）</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">k </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> j </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    result</span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">returnSize</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">pos</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token char">' '</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 在行尾填充剩余空格</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">pos </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> maxWidth</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                result</span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">returnSize</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">pos</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token char">' '</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">wordCount </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 只有一个单词：左对齐，右侧填充空格</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> pos </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 复制单词</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> k </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> k </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">strlen</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">words</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> k</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                result</span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">returnSize</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">pos</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> words</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">k</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 右侧填充空格</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> k </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> k </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> spaces</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> k</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                result</span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">returnSize</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">pos</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token char">' '</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 多个单词且非最后一行：左右对齐</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> avgSpaces </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> spaces </span><span class="token operator" style="color:#393A34">/</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">wordCount </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 平均每个间隔的空格数</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> extraSpaces </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> spaces </span><span class="token operator" style="color:#393A34">%</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">wordCount </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 需要额外分配的空格数</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> pos </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> k </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> k </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> j</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> k</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token comment" style="color:#999988;font-style:italic">// 复制单词</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> l </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> l </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">strlen</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">words</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">k</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> l</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    result</span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">returnSize</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">pos</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> words</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">k</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">l</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token comment" style="color:#999988;font-style:italic">// 添加空格（除了最后一个单词）</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">k </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> j </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token comment" style="color:#999988;font-style:italic">// 先添加平均分配的空格</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> l </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> l </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> avgSpaces</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> l</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        result</span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">returnSize</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">pos</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token char">' '</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token comment" style="color:#999988;font-style:italic">// 再分配额外的空格（左侧优先）</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">k </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> extraSpaces</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        result</span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">returnSize</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">pos</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token char">' '</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">returnSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> j</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 移动到下一行的第一个单词</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> result</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-总结">📖 总结：<a href="https://www.eurekashadow.xin/blog/LeetCode68#-%E6%80%BB%E7%BB%93" class="hash-link" aria-label="📖 总结：的直接链接" title="📖 总结：的直接链接">​</a></h3>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>点击展开题目总结</summary><div><div class="collapsibleContent_i85q"><h1>🤔 字符串左右对齐</h1><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1️⃣-题目核心信息">1️⃣ 题目核心信息<a href="https://www.eurekashadow.xin/blog/LeetCode68#1%EF%B8%8F%E2%83%A3-%E9%A2%98%E7%9B%AE%E6%A0%B8%E5%BF%83%E4%BF%A1%E6%81%AF" class="hash-link" aria-label="1️⃣ 题目核心信息的直接链接" title="1️⃣ 题目核心信息的直接链接">​</a></h2><p>🎯 <strong>功能描述</strong>：给定一个单词数组和最大行宽，将单词重新排版成每行恰好有 maxWidth 个字符且左右两端对齐的文本，最后一行左对齐。</p><p>📥 <strong>输入输出</strong>：</p><ul>
<li><strong>输入</strong>：<!-- -->
<ul>
<li><code>words</code>: 单词数组，每个元素是一个非空字符串</li>
<li><code>wordsSize</code>: 单词数组长度</li>
<li><code>maxWidth</code>: 每行最大字符数</li>
</ul>
</li>
<li><strong>输出</strong>：<!-- -->
<ul>
<li>返回重新排版后的字符串数组</li>
<li><code>returnSize</code>: 返回数组的实际大小</li>
</ul>
</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2️⃣-实现原理">2️⃣ 实现原理<a href="https://www.eurekashadow.xin/blog/LeetCode68#2%EF%B8%8F%E2%83%A3-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86" class="hash-link" aria-label="2️⃣ 实现原理的直接链接" title="2️⃣ 实现原理的直接链接">​</a></h2><p>💡 <strong>核心思路</strong>：使用贪心算法，每行尽可能多地放置单词，然后根据对齐规则分配空格。</p><p>📋 <strong>实现步骤</strong>：</p><ol>
<li>遍历单词数组，确定每一行可以放置的单词范围</li>
<li>根据行的类型（最后一行、单个单词行、普通行）采用不同的空格分配策略</li>
<li>对于普通行，计算平均空格数和额外空格数，左侧优先分配额外空格</li>
<li>构造每行字符串并添加到结果数组中</li>
</ol><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3️⃣-关键点解析">3️⃣ 关键点解析<a href="https://www.eurekashadow.xin/blog/LeetCode68#3%EF%B8%8F%E2%83%A3-%E5%85%B3%E9%94%AE%E7%82%B9%E8%A7%A3%E6%9E%90" class="hash-link" aria-label="3️⃣ 关键点解析的直接链接" title="3️⃣ 关键点解析的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-代码技巧">🎯 代码技巧<a href="https://www.eurekashadow.xin/blog/LeetCode68#-%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7" class="hash-link" aria-label="🎯 代码技巧的直接链接" title="🎯 代码技巧的直接链接">​</a></h3><ul>
<li><strong>贪心策略</strong>：每行尽可能多地放置单词，通过 <code>lineLength + strlen(words[j]) + (j - i) &lt;= maxWidth</code> 判断</li>
<li><strong>空格均匀分配</strong>：使用除法和取模运算分别计算平均空格数和额外空格数</li>
<li><strong>边界处理</strong>：针对最后一行、单个单词行等特殊情况采用不同的对齐策略</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4️⃣-使用场景">4️⃣ 使用场景<a href="https://www.eurekashadow.xin/blog/LeetCode68#4%EF%B8%8F%E2%83%A3-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="4️⃣ 使用场景的直接链接" title="4️⃣ 使用场景的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-适用情况">✅ 适用情况：<a href="https://www.eurekashadow.xin/blog/LeetCode68#-%E9%80%82%E7%94%A8%E6%83%85%E5%86%B5" class="hash-link" aria-label="✅ 适用情况：的直接链接" title="✅ 适用情况：的直接链接">​</a></h3><ul>
<li>文本排版和格式化</li>
<li>打印预览和文档处理</li>
<li>控制台输出格式化</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-前提条件">⚠️ 前提条件：<a href="https://www.eurekashadow.xin/blog/LeetCode68#%EF%B8%8F-%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6" class="hash-link" aria-label="⚠️ 前提条件：的直接链接" title="⚠️ 前提条件：的直接链接">​</a></h3><ul>
<li>每个单词长度不超过 maxWidth</li>
<li>单词数组至少包含一个单词</li>
<li>maxWidth 大于等于1</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5️⃣-复杂度分析">5️⃣ 复杂度分析<a href="https://www.eurekashadow.xin/blog/LeetCode68#5%EF%B8%8F%E2%83%A3-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90" class="hash-link" aria-label="5️⃣ 复杂度分析的直接链接" title="5️⃣ 复杂度分析的直接链接">​</a></h2><ul>
<li>
<p>⏱️ 时间复杂度：O(N × M)，其中 N 是单词总数，M 是最大宽度，需要遍历每个单词并构造每行字符串</p>
</li>
<li>
<p>💾 空间复杂度：O(M)，用于存储每行结果字符串</p>
</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6️⃣-注意事项">6️⃣ 注意事项<a href="https://www.eurekashadow.xin/blog/LeetCode68#6%EF%B8%8F%E2%83%A3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="6️⃣ 注意事项的直接链接" title="6️⃣ 注意事项的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-边界情况">🚩 边界情况：<a href="https://www.eurekashadow.xin/blog/LeetCode68#-%E8%BE%B9%E7%95%8C%E6%83%85%E5%86%B5" class="hash-link" aria-label="🚩 边界情况：的直接链接" title="🚩 边界情况：的直接链接">​</a></h3><ul>
<li>最后一行需要特殊处理为左对齐</li>
<li>只包含一个单词的行需要左对齐</li>
<li>空格不能均匀分配时需要左侧优先</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-易错点">💥 易错点：<a href="https://www.eurekashadow.xin/blog/LeetCode68#-%E6%98%93%E9%94%99%E7%82%B9" class="hash-link" aria-label="💥 易错点：的直接链接" title="💥 易错点：的直接链接">​</a></h3><ul>
<li>忘记处理最后一行的左对齐特殊情况</li>
<li>空格分配不均匀，右侧空格多于左侧</li>
<li>单词间空格计算错误，没有考虑单词数量与间隔数的关系</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="7⃣-补充说明">7⃣ 补充说明<a href="https://www.eurekashadow.xin/blog/LeetCode68#7%E2%83%A3-%E8%A1%A5%E5%85%85%E8%AF%B4%E6%98%8E" class="hash-link" aria-label="7⃣ 补充说明的直接链接" title="7⃣ 补充说明的直接链接">​</a></h2><p>以示例1为例：</p><ul>
<li><code>words = ["This", "is", "an", "example", "of", "text", "justification."]</code></li>
<li><code>maxWidth = 16</code></li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="执行步骤详解">执行步骤详解<a href="https://www.eurekashadow.xin/blog/LeetCode68#%E6%89%A7%E8%A1%8C%E6%AD%A5%E9%AA%A4%E8%AF%A6%E8%A7%A3" class="hash-link" aria-label="执行步骤详解的直接链接" title="执行步骤详解的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="第一行处理">第一行处理<a href="https://www.eurekashadow.xin/blog/LeetCode68#%E7%AC%AC%E4%B8%80%E8%A1%8C%E5%A4%84%E7%90%86" class="hash-link" aria-label="第一行处理的直接链接" title="第一行处理的直接链接">​</a></h3><h4 class="anchor anchorWithStickyNavbar_LWe7" id="确定单词范围">确定单词范围：<a href="https://www.eurekashadow.xin/blog/LeetCode68#%E7%A1%AE%E5%AE%9A%E5%8D%95%E8%AF%8D%E8%8C%83%E5%9B%B4" class="hash-link" aria-label="确定单词范围：的直接链接" title="确定单词范围：的直接链接">​</a></h4><ul>
<li>从索引0开始（"This"）</li>
<li>尝试添加单词："This"(4字符) + "is"(2字符) + "an"(2字符) + "example"(7字符)</li>
<li>计算总长度：4 + 2 + 2 + 7 = 15字符</li>
<li>计算空格：3个间隔（4个单词间需要3个空格）</li>
<li>总计：15 + 3 = 18 &gt; 16，超出限制</li>
<li>回退到："This"(4) + "is"(2) + "an"(2) = 8字符，2个间隔</li>
<li>总计：8 + 2 = 10 ≤ 16，符合要求</li>
<li>所以第一行单词为：["This", "is", "an"]</li>
</ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="空格分配">空格分配：<a href="https://www.eurekashadow.xin/blog/LeetCode68#%E7%A9%BA%E6%A0%BC%E5%88%86%E9%85%8D" class="hash-link" aria-label="空格分配：的直接链接" title="空格分配：的直接链接">​</a></h4><ul>
<li>单词总长度：4 + 2 + 2 = 8</li>
<li>需要空格数：16 - 8 = 8个空格</li>
<li>单词间隔数：3 - 1 = 2个间隔</li>
<li>平均每个间隔：8 / 2 = 4个空格</li>
<li>额外空格：8 % 2 = 0个</li>
<li>每个间隔都放4个空格</li>
</ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="构造结果">构造结果：<a href="https://www.eurekashadow.xin/blog/LeetCode68#%E6%9E%84%E9%80%A0%E7%BB%93%E6%9E%9C" class="hash-link" aria-label="构造结果：的直接链接" title="构造结果：的直接链接">​</a></h4><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">"This" + "    " + "is" + "    " + "an" = "This    is    an"</span><br></span></code></pre></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="第二行处理">第二行处理<a href="https://www.eurekashadow.xin/blog/LeetCode68#%E7%AC%AC%E4%BA%8C%E8%A1%8C%E5%A4%84%E7%90%86" class="hash-link" aria-label="第二行处理的直接链接" title="第二行处理的直接链接">​</a></h3><h4 class="anchor anchorWithStickyNavbar_LWe7" id="确定单词范围-1">确定单词范围：<a href="https://www.eurekashadow.xin/blog/LeetCode68#%E7%A1%AE%E5%AE%9A%E5%8D%95%E8%AF%8D%E8%8C%83%E5%9B%B4-1" class="hash-link" aria-label="确定单词范围：的直接链接" title="确定单词范围：的直接链接">​</a></h4><ul>
<li>从索引3开始（"example"）</li>
<li>尝试添加："example"(7) + "of"(2) + "text"(4) = 13字符</li>
<li>空格间隔：2个</li>
<li>总计：13 + 2 = 15 ≤ 16，符合要求</li>
<li>所以第二行单词为：["example", "of", "text"]</li>
</ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="空格分配-1">空格分配：<a href="https://www.eurekashadow.xin/blog/LeetCode68#%E7%A9%BA%E6%A0%BC%E5%88%86%E9%85%8D-1" class="hash-link" aria-label="空格分配：的直接链接" title="空格分配：的直接链接">​</a></h4><ul>
<li>单词总长度：7 + 2 + 4 = 13</li>
<li>需要空格数：16 - 13 = 3个空格</li>
<li>单词间隔数：3 - 1 = 2个间隔</li>
<li>平均每个间隔：3 / 2 = 1个空格</li>
<li>额外空格：3 % 2 = 1个</li>
<li>第一个间隔放：1 + 1 = 2个空格</li>
<li>第二个间隔放：1个空格</li>
</ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="构造结果-1">构造结果：<a href="https://www.eurekashadow.xin/blog/LeetCode68#%E6%9E%84%E9%80%A0%E7%BB%93%E6%9E%9C-1" class="hash-link" aria-label="构造结果：的直接链接" title="构造结果：的直接链接">​</a></h4><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">"example" + "  " + "of" + " " + "text" = "example  of text"</span><br></span></code></pre></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="第三行处理最后一行">第三行处理（最后一行）<a href="https://www.eurekashadow.xin/blog/LeetCode68#%E7%AC%AC%E4%B8%89%E8%A1%8C%E5%A4%84%E7%90%86%E6%9C%80%E5%90%8E%E4%B8%80%E8%A1%8C" class="hash-link" aria-label="第三行处理（最后一行）的直接链接" title="第三行处理（最后一行）的直接链接">​</a></h3><h4 class="anchor anchorWithStickyNavbar_LWe7" id="确定单词范围-2">确定单词范围：<a href="https://www.eurekashadow.xin/blog/LeetCode68#%E7%A1%AE%E5%AE%9A%E5%8D%95%E8%AF%8D%E8%8C%83%E5%9B%B4-2" class="hash-link" aria-label="确定单词范围：的直接链接" title="确定单词范围：的直接链接">​</a></h4><ul>
<li>从索引6开始（"justification."）</li>
<li>只剩这一个单词，长度为15 ≤ 16</li>
<li>所以第三行为：["justification."]</li>
</ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="特殊处理">特殊处理：<a href="https://www.eurekashadow.xin/blog/LeetCode68#%E7%89%B9%E6%AE%8A%E5%A4%84%E7%90%86" class="hash-link" aria-label="特殊处理：的直接链接" title="特殊处理：的直接链接">​</a></h4><ul>
<li>由于是最后一行，采用左对齐</li>
<li>单词后不添加额外空格（只有一个单词）</li>
<li>行尾填充剩余空格：16 - 15 = 1个空格</li>
</ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="构造结果-2">构造结果：<a href="https://www.eurekashadow.xin/blog/LeetCode68#%E6%9E%84%E9%80%A0%E7%BB%93%E6%9E%9C-2" class="hash-link" aria-label="构造结果：的直接链接" title="构造结果：的直接链接">​</a></h4><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">"justification." + " " = "justification.  "</span><br></span></code></pre></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="最终输出">最终输出<a href="https://www.eurekashadow.xin/blog/LeetCode68#%E6%9C%80%E7%BB%88%E8%BE%93%E5%87%BA" class="hash-link" aria-label="最终输出的直接链接" title="最终输出的直接链接">​</a></h2><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   "This    is    an",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   "example  of text",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   "justification.  "</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">]</span><br></span></code></pre></div></div><p>通过这个例子可以看出，算法的核心在于：</p><p>1.贪心地确定每行单词数量</p><p>2.根据行的类型采用不同的空格分配策略</p><p>3.特别处理最后一行的左对齐要求</p></div></div></details>]]></content>
        <author>
            <name>Eureka X</name>
            <uri>https://github.com/EurekaShadow</uri>
        </author>
        <category label="字符串" term="字符串"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[找出字符串中第一个匹配项的下标]]></title>
        <id>https://www.eurekashadow.xin/blog/LeetCode28</id>
        <link href="https://www.eurekashadow.xin/blog/LeetCode28"/>
        <updated>2025-08-16T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[力扣面试经典——28题]]></summary>
        <content type="html"><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="力扣面试经典28题"><span class="B2_JnYG"><a href="https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/description/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer" title="力扣">力扣面试经典——28题</a></span><a href="https://www.eurekashadow.xin/blog/LeetCode28#%E5%8A%9B%E6%89%A3%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B828%E9%A2%98" class="hash-link" aria-label="力扣面试经典28题的直接链接" title="力扣面试经典28题的直接链接">​</a></h3>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-参考代码">💡 参考代码：<a href="https://www.eurekashadow.xin/blog/LeetCode28#-%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81" class="hash-link" aria-label="💡 参考代码：的直接链接" title="💡 参考代码：的直接链接">​</a></h3>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 在haystack字符串中查找needle字符串的第一个匹配位置</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param haystack 主字符串</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param needle 要查找的子字符串</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 返回第一次匹配的索引，如果未找到则返回-1</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">strStr</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">char</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> haystack</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">char</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> needle</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 边界条件处理</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">needle </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">needle </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token char">'\0'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 空字符串在任何字符串的索引0处匹配</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">haystack </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">haystack </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token char">'\0'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 主字符串为空但要查找的字符串非空，返回-1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> hLen </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">strlen</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">haystack</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 主字符串长度</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> nLen </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">strlen</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">needle</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 子字符串长度</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 如果子字符串比主字符串长，不可能匹配</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">nLen </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> hLen</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 构建next数组（KMP算法的核心）</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> next </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token function" style="color:#d73a49">malloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> nLen</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    next</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 第一个字符的最长相等前后缀长度为0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> j </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 前缀末尾索引</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 构造next数组</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> nLen</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 当前后缀不匹配时，回退到前一个位置的next值</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">j </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> needle</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> needle</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">j</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            j </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> next</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">j </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 如果当前字符匹配，前缀长度加1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">needle</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> needle</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">j</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            j</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        next</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> j</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 记录当前位置的最长相等前后缀长度</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// KMP匹配过程</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    j </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// needle的索引</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> hLen</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 当字符不匹配时，根据next数组回退</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">j </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> haystack</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> needle</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">j</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            j </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> next</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">j </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 如果字符匹配，移动needle的指针</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">haystack</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> needle</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">j</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            j</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 如果needle已经完全匹配，返回匹配起始位置</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">j </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> nLen</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token function" style="color:#d73a49">free</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">next</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 释放内存</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> nLen </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">free</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">next</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 释放内存</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">   </span><span class="token comment" style="color:#999988;font-style:italic">// 未找到匹配</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-总结">📖 总结：<a href="https://www.eurekashadow.xin/blog/LeetCode28#-%E6%80%BB%E7%BB%93" class="hash-link" aria-label="📖 总结：的直接链接" title="📖 总结：的直接链接">​</a></h3>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>点击展开题目总结</summary><div><div class="collapsibleContent_i85q"><h1>🤔 找出字符串中第一个匹配项的下标</h1><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1️⃣-题目核心信息">1️⃣ 题目核心信息<a href="https://www.eurekashadow.xin/blog/LeetCode28#1%EF%B8%8F%E2%83%A3-%E9%A2%98%E7%9B%AE%E6%A0%B8%E5%BF%83%E4%BF%A1%E6%81%AF" class="hash-link" aria-label="1️⃣ 题目核心信息的直接链接" title="1️⃣ 题目核心信息的直接链接">​</a></h2><p>🎯 <strong>功能描述</strong>：在主字符串(haystack)中查找子字符串(needle)第一次出现的位置，若不存在则返回-1</p><p>📥 <strong>输入输出</strong>：</p><ul>
<li><strong>输入</strong>：<!-- -->
<ul>
<li><code>haystack</code>：主字符串，被搜索的字符串</li>
<li><code>needle</code>：模式字符串，需要查找的子字符串</li>
</ul>
</li>
<li><strong>输出</strong>：返回<code>needle</code>在<code>haystack</code>中第一次出现的索引位置，如果不存在则返回-1</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2️⃣-实现原理">2️⃣ 实现原理<a href="https://www.eurekashadow.xin/blog/LeetCode28#2%EF%B8%8F%E2%83%A3-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86" class="hash-link" aria-label="2️⃣ 实现原理的直接链接" title="2️⃣ 实现原理的直接链接">​</a></h2><p>💡 <strong>核心思路</strong>：使用KMP(Knuth-Morris-Pratt)字符串匹配算法，通过预处理模式串构建next数组来避免不必要的字符比较</p><p>📋 <strong>实现步骤</strong>：</p><ol>
<li>处理边界情况：空字符串、主串为空等情况</li>
<li>构建next数组：记录模式串中每个位置的最长相等前后缀长度</li>
<li>使用KMP算法进行匹配：利用next数组避免主串指针回溯</li>
<li>返回匹配结果：找到匹配则返回起始位置，否则返回-1</li>
</ol><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3️⃣-关键点解析">3️⃣ 关键点解析<a href="https://www.eurekashadow.xin/blog/LeetCode28#3%EF%B8%8F%E2%83%A3-%E5%85%B3%E9%94%AE%E7%82%B9%E8%A7%A3%E6%9E%90" class="hash-link" aria-label="3️⃣ 关键点解析的直接链接" title="3️⃣ 关键点解析的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-代码技巧">🎯 代码技巧<a href="https://www.eurekashadow.xin/blog/LeetCode28#-%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7" class="hash-link" aria-label="🎯 代码技巧的直接链接" title="🎯 代码技巧的直接链接">​</a></h3><ul>
<li><strong>KMP算法应用</strong>：通过构建next数组实现高效的字符串匹配</li>
<li><strong>双指针技术</strong>：使用两个指针分别遍历主串和模式串</li>
<li><strong>状态回退优化</strong>：利用next数组实现匹配失败时的智能回退，避免重复比较</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4️⃣-使用场景">4️⃣ 使用场景<a href="https://www.eurekashadow.xin/blog/LeetCode28#4%EF%B8%8F%E2%83%A3-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="4️⃣ 使用场景的直接链接" title="4️⃣ 使用场景的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-适用情况">✅ 适用情况：<a href="https://www.eurekashadow.xin/blog/LeetCode28#-%E9%80%82%E7%94%A8%E6%83%85%E5%86%B5" class="hash-link" aria-label="✅ 适用情况：的直接链接" title="✅ 适用情况：的直接链接">​</a></h3><ul>
<li>在大文本中查找特定子串的位置</li>
<li>需要高效字符串匹配的场景</li>
<li>文本编辑器的查找功能实现</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-前提条件">⚠️ 前提条件：<a href="https://www.eurekashadow.xin/blog/LeetCode28#%EF%B8%8F-%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6" class="hash-link" aria-label="⚠️ 前提条件：的直接链接" title="⚠️ 前提条件：的直接链接">​</a></h3><ul>
<li>输入参数为有效的C风格字符串</li>
<li>字符串以'\0'结尾</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5️⃣-复杂度分析">5️⃣ 复杂度分析<a href="https://www.eurekashadow.xin/blog/LeetCode28#5%EF%B8%8F%E2%83%A3-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90" class="hash-link" aria-label="5️⃣ 复杂度分析的直接链接" title="5️⃣ 复杂度分析的直接链接">​</a></h2><ul>
<li>
<p>⏱️ 时间复杂度：O(n + m)，其中n是主串长度，m是模式串长度，避免了暴力算法的O(n*m)复杂度</p>
</li>
<li>
<p>💾 空间复杂度：O(m)，主要用于存储next数组</p>
</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6️⃣-注意事项">6️⃣ 注意事项<a href="https://www.eurekashadow.xin/blog/LeetCode28#6%EF%B8%8F%E2%83%A3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="6️⃣ 注意事项的直接链接" title="6️⃣ 注意事项的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-边界情况">🚩 边界情况：<a href="https://www.eurekashadow.xin/blog/LeetCode28#-%E8%BE%B9%E7%95%8C%E6%83%85%E5%86%B5" class="hash-link" aria-label="🚩 边界情况：的直接链接" title="🚩 边界情况：的直接链接">​</a></h3><ul>
<li>needle为空字符串时应返回0</li>
<li>haystack为空字符串但needle非空时应返回-1</li>
<li>needle长度大于haystack时直接返回-1</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-易错点">💥 易错点：<a href="https://www.eurekashadow.xin/blog/LeetCode28#-%E6%98%93%E9%94%99%E7%82%B9" class="hash-link" aria-label="💥 易错点：的直接链接" title="💥 易错点：的直接链接">​</a></h3><ul>
<li>next数组的构建逻辑容易出错，特别是回退条件的判断</li>
<li>匹配成功后的返回索引计算容易错误，应返回i - nLen + 1</li>
<li>内存管理需要注意，使用完next数组后需要释放内存</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="7️⃣-注意事项">7️⃣ 注意事项<a href="https://www.eurekashadow.xin/blog/LeetCode28#7%EF%B8%8F%E2%83%A3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="7️⃣ 注意事项的直接链接" title="7️⃣ 注意事项的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="kmp算法原理简述">KMP算法原理简述<a href="https://www.eurekashadow.xin/blog/LeetCode28#kmp%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86%E7%AE%80%E8%BF%B0" class="hash-link" aria-label="KMP算法原理简述的直接链接" title="KMP算法原理简述的直接链接">​</a></h3><p><code>KMP算法</code>是一种改进的字符串匹配算法，它的核心思想是当字符匹配失败时，利用已经匹配的部分信息，尽可能地跳过一些不必要的比较。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="第一步边界条件处理">第一步：边界条件处理<a href="https://www.eurekashadow.xin/blog/LeetCode28#%E7%AC%AC%E4%B8%80%E6%AD%A5%E8%BE%B9%E7%95%8C%E6%9D%A1%E4%BB%B6%E5%A4%84%E7%90%86" class="hash-link" aria-label="第一步：边界条件处理的直接链接" title="第一步：边界条件处理的直接链接">​</a></h3><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">if (needle == NULL || *needle == '\0') {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return 0;  // 空字符串在任何字符串的索引0处匹配</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">if (haystack == NULL || *haystack == '\0') {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return -1; // 主字符串为空但要查找的字符串非空，返回-1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre></div></div><p>这部分处理特殊情况：</p><ul>
<li>如果要查找的字符串为空，则在任何字符串的第0个位置都能找到它</li>
<li>如果主字符串为空但要查找的字符串不为空，则肯定找不到</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="第二步获取字符串长度并比较">第二步：获取字符串长度并比较<a href="https://www.eurekashadow.xin/blog/LeetCode28#%E7%AC%AC%E4%BA%8C%E6%AD%A5%E8%8E%B7%E5%8F%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%95%BF%E5%BA%A6%E5%B9%B6%E6%AF%94%E8%BE%83" class="hash-link" aria-label="第二步：获取字符串长度并比较的直接链接" title="第二步：获取字符串长度并比较的直接链接">​</a></h3><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">int hLen = strlen(haystack);  // 主字符串长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">int nLen = strlen(needle);    // 子字符串长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">if (nLen &gt; hLen) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return -1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre></div></div><p>如果要查找的字符串比主字符串还长，那肯定找不到。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="第三步构建next数组kmp算法的核心">第三步：构建next数组（KMP算法的核心）<a href="https://www.eurekashadow.xin/blog/LeetCode28#%E7%AC%AC%E4%B8%89%E6%AD%A5%E6%9E%84%E5%BB%BAnext%E6%95%B0%E7%BB%84kmp%E7%AE%97%E6%B3%95%E7%9A%84%E6%A0%B8%E5%BF%83" class="hash-link" aria-label="第三步：构建next数组（KMP算法的核心）的直接链接" title="第三步：构建next数组（KMP算法的核心）的直接链接">​</a></h3><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">int* next = (int*)malloc(sizeof(int) * nLen);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">next[0] = 0;  // 第一个字符的最长相等前后缀长度为0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">int j = 0;    // 前缀末尾索引</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// 构造next数组</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">for (int i = 1; i &lt; nLen; i++) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 当前后缀不匹配时，回退到前一个位置的next值</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    while (j &gt; 0 &amp;&amp; needle[i] != needle[j]) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        j = next[j - 1];</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 如果当前字符匹配，前缀长度加1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if (needle[i] == needle[j]) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        j++;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    next[i] = j;  // 记录当前位置的最长相等前后缀长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre></div></div><p>我们通过一个具体例子来理解next数组的构建过程。假设<code>needle = "ababa"</code>：</p><table><thead><tr><th>i</th><th>needle[i]</th><th>j</th><th>next[i]</th><th>说明</th></tr></thead><tbody><tr><td>0</td><td>a</td><td>0</td><td>0</td><td>初始值</td></tr><tr><td>1</td><td>b</td><td>0</td><td>0</td><td>'a' != 'b'，j保持0</td></tr><tr><td>2</td><td>a</td><td>1</td><td>1</td><td>'b' != 'a'，j回退到next[0]=0，然后'a' == 'a'，j=1</td></tr><tr><td>3</td><td>b</td><td>2</td><td>2</td><td>'a' != 'b'，j回退到next[1]=0，然后'b' == 'b'，j=1，再'a' == 'a'，j=2</td></tr><tr><td>4</td><td>a</td><td>3</td><td>3</td><td>同上逻辑，j=3</td></tr></tbody></table><p>所以<code>next = [0, 0, 1, 2, 3]</code></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="第四步kmp匹配过程">第四步：KMP匹配过程<a href="https://www.eurekashadow.xin/blog/LeetCode28#%E7%AC%AC%E5%9B%9B%E6%AD%A5kmp%E5%8C%B9%E9%85%8D%E8%BF%87%E7%A8%8B" class="hash-link" aria-label="第四步：KMP匹配过程的直接链接" title="第四步：KMP匹配过程的直接链接">​</a></h3><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">j = 0;  // needle的索引</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">for (int i = 0; i &lt; hLen; i++) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 当字符不匹配时，根据next数组回退</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    while (j &gt; 0 &amp;&amp; haystack[i] != needle[j]) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        j = next[j - 1];</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 如果字符匹配，移动needle的指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if (haystack[i] == needle[j]) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        j++;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 如果needle已经完全匹配，返回匹配起始位置</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if (j == nLen) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        free(next);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return i - nLen + 1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre></div></div><p>示例1：<code>haystack = "sadbutsad", needle = "sad"</code></p><p>首先构建的next数组为[0, 0, 0]（因为"sad"中没有重复的前后缀）</p><table><thead><tr><th>i</th><th>haystack[i]</th><th>j</th><th>needle[j]</th><th>匹配情况</th><th>说明</th></tr></thead><tbody><tr><td>0</td><td>s</td><td>0</td><td>s</td><td>匹配</td><td>j++ → 1</td></tr><tr><td>1</td><td>a</td><td>1</td><td>a</td><td>匹配</td><td>j++ → 2</td></tr><tr><td>2</td><td>d</td><td>2</td><td>d</td><td>匹配</td><td>j++ → 3</td></tr><tr><td>-</td><td>-</td><td>3</td><td>-</td><td>-</td><td>j==nLen，匹配成功，返回 2-3+1=0</td></tr></tbody></table><p>所以返回索引0。</p><p>示例2：<code>haystack = "leetcode", needle = "leeto"</code></p><p>构建的next数组为[0, 0, 0, 0, 0]（因为"leeto"中没有重复前后缀）</p><table><thead><tr><th>i</th><th>haystack[i]</th><th>j</th><th>needle[j]</th><th>匹配情况</th><th>说明</th></tr></thead><tbody><tr><td>0</td><td>l</td><td>0</td><td>l</td><td>匹配</td><td>j++ → 1</td></tr><tr><td>1</td><td>e</td><td>1</td><td>e</td><td>匹配</td><td>j++ → 2</td></tr><tr><td>2</td><td>e</td><td>2</td><td>e</td><td>匹配</td><td>j++ → 3</td></tr><tr><td>3</td><td>t</td><td>3</td><td>t</td><td>匹配</td><td>j++ → 4</td></tr><tr><td>4</td><td>c</td><td>4</td><td>o</td><td>不匹配</td><td>j回退到next[3]=0，仍不匹配，j保持0</td></tr><tr><td>5</td><td>o</td><td>0</td><td>l</td><td>不匹配</td><td>j保持0</td></tr><tr><td>6</td><td>d</td><td>0</td><td>l</td><td>不匹配</td><td>j保持0</td></tr><tr><td>7</td><td>e</td><td>0</td><td>l</td><td>不匹配</td><td>j保持0</td></tr></tbody></table><p>整个过程j从未达到nLen=5，所以返回-1。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="kmp算法的优势">KMP算法的优势<a href="https://www.eurekashadow.xin/blog/LeetCode28#kmp%E7%AE%97%E6%B3%95%E7%9A%84%E4%BC%98%E5%8A%BF" class="hash-link" aria-label="KMP算法的优势的直接链接" title="KMP算法的优势的直接链接">​</a></h3><p>相比暴力匹配算法，KMP算法的优势在于：</p><p>1.时间复杂度从O(n*m)降低到O(n+m)</p><p>2.当发生不匹配时，主串的指针不会回溯，避免了重复比较</p><p>3.利用已匹配的信息，通过next数组决定模式串应该移动多少位</p><p>这就是KMP算法解决字符串匹配问题的完整过程。</p><p>这个 <code>KMP算法</code> 我至今不理解！（20250816）</p></div></div></details>]]></content>
        <author>
            <name>Eureka X</name>
            <uri>https://github.com/EurekaShadow</uri>
        </author>
        <category label="字符串" term="字符串"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Z 字形变换]]></title>
        <id>https://www.eurekashadow.xin/blog/LeetCode6</id>
        <link href="https://www.eurekashadow.xin/blog/LeetCode6"/>
        <updated>2025-08-15T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[力扣面试经典——6题]]></summary>
        <content type="html"><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="力扣面试经典6题"><span class="B2_JnYG"><a href="https://leetcode.cn/problems/zigzag-conversion/description/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer" title="力扣">力扣面试经典——6题</a></span><a href="https://www.eurekashadow.xin/blog/LeetCode6#%E5%8A%9B%E6%89%A3%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B86%E9%A2%98" class="hash-link" aria-label="力扣面试经典6题的直接链接" title="力扣面试经典6题的直接链接">​</a></h3>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-参考代码">💡 参考代码：<a href="https://www.eurekashadow.xin/blog/LeetCode6#-%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81" class="hash-link" aria-label="💡 参考代码：的直接链接" title="💡 参考代码：的直接链接">​</a></h3>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * Z字形变换函数</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param s 输入字符串</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param numRows 指定行数</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 变换后的字符串</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 解题思路:</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 1. 对于第0行和第numRows-1行，字符间隔固定为2*(numRows-1)</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 2. 对于中间行，字符交替出现在两个等差数列中</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 3. 特殊情况：numRows=1时直接返回原字符串</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">char</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">convert</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">char</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> numRows</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> len </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">strlen</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 特殊情况：行数为1或字符串长度小于行数时，直接返回原字符串</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">numRows </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"> numRows </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> len</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 分配结果字符串空间</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">char</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">char</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token function" style="color:#d73a49">malloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">len </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">char</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> index </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 计算周期长度</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> cycleLen </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> numRows </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 按行遍历</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> numRows</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 遍历每个周期</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> j </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> j </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> len</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> j </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> cycleLen</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 每行的第一个字符（垂直列上的字符）</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            result</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">index</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">j </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 中间行的第二个字符（斜线上的字符）</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 条件：不是第一行和最后一行，且索引不越界</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> numRows </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> j </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> cycleLen </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> len</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                result</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">index</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">j </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> cycleLen </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    result</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">index</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token char">'\0'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 字符串结束符</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> result</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-总结">📖 总结：<a href="https://www.eurekashadow.xin/blog/LeetCode6#-%E6%80%BB%E7%BB%93" class="hash-link" aria-label="📖 总结：的直接链接" title="📖 总结：的直接链接">​</a></h3>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>点击展开题目总结</summary><div><div class="collapsibleContent_i85q"><h1>🤔 Z字形变换</h1><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1️⃣-题目核心信息">1️⃣ 题目核心信息<a href="https://www.eurekashadow.xin/blog/LeetCode6#1%EF%B8%8F%E2%83%A3-%E9%A2%98%E7%9B%AE%E6%A0%B8%E5%BF%83%E4%BF%A1%E6%81%AF" class="hash-link" aria-label="1️⃣ 题目核心信息的直接链接" title="1️⃣ 题目核心信息的直接链接">​</a></h2><p>🎯 <strong>功能描述</strong>：将字符串按照Z字形方式排列后，按行读取生成新字符串</p><p>📥 <strong>输入输出</strong>：</p><ul>
<li><strong>输入</strong>：<code>s</code>（输入字符串），<code>numRows</code>（指定行数）</li>
<li><strong>输出</strong>：按Z字形排列后逐行读取的新字符串</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2️⃣-实现原理">2️⃣ 实现原理<a href="https://www.eurekashadow.xin/blog/LeetCode6#2%EF%B8%8F%E2%83%A3-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86" class="hash-link" aria-label="2️⃣ 实现原理的直接链接" title="2️⃣ 实现原理的直接链接">​</a></h2><p>💡 <strong>核心思路</strong>：通过数学方法直接计算每行字符的位置，避免构造二维矩阵</p><p>📋 <strong>实现步骤</strong>：</p><ol>
<li>处理特殊情况：当<code>numRows</code>为1或大于等于字符串长度时直接返回原字符串</li>
<li>计算Z字形周期长度：<code>2*numRows-2</code></li>
<li>按行遍历，对每行计算对应字符位置</li>
<li>对于首尾行，字符间隔固定；对于中间行，每个周期有两个字符位置</li>
</ol><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3️⃣-关键点解析">3️⃣ 关键点解析<a href="https://www.eurekashadow.xin/blog/LeetCode6#3%EF%B8%8F%E2%83%A3-%E5%85%B3%E9%94%AE%E7%82%B9%E8%A7%A3%E6%9E%90" class="hash-link" aria-label="3️⃣ 关键点解析的直接链接" title="3️⃣ 关键点解析的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-代码技巧">🎯 代码技巧<a href="https://www.eurekashadow.xin/blog/LeetCode6#-%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7" class="hash-link" aria-label="🎯 代码技巧的直接链接" title="🎯 代码技巧的直接链接">​</a></h3><ul>
<li>利用周期性规律避免实际构造Z字形矩阵</li>
<li>通过索引计算直接定位字符位置</li>
<li>分别处理首尾行和中间行的不同字符分布规律</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4️⃣-使用场景">4️⃣ 使用场景<a href="https://www.eurekashadow.xin/blog/LeetCode6#4%EF%B8%8F%E2%83%A3-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="4️⃣ 使用场景的直接链接" title="4️⃣ 使用场景的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-适用情况">✅ 适用情况：<a href="https://www.eurekashadow.xin/blog/LeetCode6#-%E9%80%82%E7%94%A8%E6%83%85%E5%86%B5" class="hash-link" aria-label="✅ 适用情况：的直接链接" title="✅ 适用情况：的直接链接">​</a></h3><ul>
<li>需要按特定规律重新排列字符串</li>
<li>字符串变换类问题</li>
<li>需要优化空间复杂度的场景</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-前提条件">⚠️ 前提条件：<a href="https://www.eurekashadow.xin/blog/LeetCode6#%EF%B8%8F-%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6" class="hash-link" aria-label="⚠️ 前提条件：的直接链接" title="⚠️ 前提条件：的直接链接">​</a></h3><ul>
<li>输入字符串非空</li>
<li>行数大于0</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5️⃣-复杂度分析">5️⃣ 复杂度分析<a href="https://www.eurekashadow.xin/blog/LeetCode6#5%EF%B8%8F%E2%83%A3-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90" class="hash-link" aria-label="5️⃣ 复杂度分析的直接链接" title="5️⃣ 复杂度分析的直接链接">​</a></h2><ul>
<li>
<p>⏱️ 时间复杂度：O(n)，其中n为字符串长度，每个字符访问一次</p>
</li>
<li>
<p>💾 空间复杂度：O(1)，不考虑结果字符串的话只使用常数额外空间</p>
</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6️⃣-注意事项">6️⃣ 注意事项<a href="https://www.eurekashadow.xin/blog/LeetCode6#6%EF%B8%8F%E2%83%A3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="6️⃣ 注意事项的直接链接" title="6️⃣ 注意事项的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-边界情况">🚩 边界情况：<a href="https://www.eurekashadow.xin/blog/LeetCode6#-%E8%BE%B9%E7%95%8C%E6%83%85%E5%86%B5" class="hash-link" aria-label="🚩 边界情况：的直接链接" title="🚩 边界情况：的直接链接">​</a></h3><ul>
<li><code>numRows = 1</code>时，直接返回原字符串</li>
<li>字符串长度为1的情况</li>
<li><code>numRows</code>大于字符串长度的情况</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-易错点">💥 易错点：<a href="https://www.eurekashadow.xin/blog/LeetCode6#-%E6%98%93%E9%94%99%E7%82%B9" class="hash-link" aria-label="💥 易错点：的直接链接" title="💥 易错点：的直接链接">​</a></h3><ul>
<li>忘记处理<code>numRows = 1</code>的特殊情况导致除零错误</li>
<li>中间行字符位置计算错误</li>
<li>字符串结束符<code>\0</code>忘记添加</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="7⃣-补充说明">7⃣ 补充说明<a href="https://www.eurekashadow.xin/blog/LeetCode6#7%E2%83%A3-%E8%A1%A5%E5%85%85%E8%AF%B4%E6%98%8E" class="hash-link" aria-label="7⃣ 补充说明的直接链接" title="7⃣ 补充说明的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="整体思路">整体思路<a href="https://www.eurekashadow.xin/blog/LeetCode6#%E6%95%B4%E4%BD%93%E6%80%9D%E8%B7%AF" class="hash-link" aria-label="整体思路的直接链接" title="整体思路的直接链接">​</a></h3><p>这个算法采用<strong>按行读取</strong>的方式，直接从原字符串中按Z字形顺序提取字符。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="代码详解">代码详解<a href="https://www.eurekashadow.xin/blog/LeetCode6#%E4%BB%A3%E7%A0%81%E8%AF%A6%E8%A7%A3" class="hash-link" aria-label="代码详解的直接链接" title="代码详解的直接链接">​</a></h3><ol>
<li>初始化和特殊情况处理</li>
</ol><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">int len = strlen(s);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// 特殊情况：行数为1或字符串长度小于行数时，直接返回原字符串</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">if (numRows == 1 || numRows &gt;= len) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return s;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre></div></div><p>解释：</p><ul>
<li>当 <code>numRows = 1</code> 时，Z字形排列就是原字符串本身</li>
<li>当 <code>numRows &gt;= len</code> 时，每行最多一个字符，结果也是原字符串</li>
</ul><ol start="2">
<li>关键参数计算</li>
</ol><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">int cycleLen = 2 * numRows - 2;</span><br></span></code></pre></div></div><p>解释：计算Z字形的周期长度</p><ul>
<li>例如 <code>numRows = 3</code> 时，<code>cycleLen = 2*3-2 = 4</code></li>
<li>这意味着每<code>4</code>个字符为一个完整的<code>V</code>字形周期</li>
</ul><ol start="3">
<li>按行遍历核心逻辑</li>
</ol><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">for (int i = 0; i &lt; numRows; i++) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    for (int j = 0; j + i &lt; len; j += cycleLen) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        result[index++] = s[j + i];</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (i != 0 &amp;&amp; i != numRows - 1 &amp;&amp; j + cycleLen - i &lt; len) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            result[index++] = s[j + cycleLen - i];</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="详细例子演示">详细例子演示<a href="https://www.eurekashadow.xin/blog/LeetCode6#%E8%AF%A6%E7%BB%86%E4%BE%8B%E5%AD%90%E6%BC%94%E7%A4%BA" class="hash-link" aria-label="详细例子演示的直接链接" title="详细例子演示的直接链接">​</a></h3><p>以 <code>s = "PAYPALISHIRING"</code>, <code>numRows = 3</code> 为例：</p><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">原字符串索引: 0 1 2 3 4 5 6 7 8 9 10 11 12 13</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">原字符串:     P A Y P A L I S H I R  I  N  G</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cycleLen = 2*3-2 = 4</span><br></span></code></pre></div></div><p>第0行 (i=0)：</p><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">j=0:  j+i=0, 取s[0]='P'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">j=4:  j+i=4, 取s[4]='A'  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">j=8:  j+i=8, 取s[8]='H'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">j=12: j+i=12,取s[12]='N'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">第0行结果: PAHN</span><br></span></code></pre></div></div><p>第1行 (i=1)：</p><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">j=0: j+i=1, 取s[1]='A'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     j+cycleLen-i = 0+4-1=3, 取s[3]='P'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">j=4: j+i=5, 取s[5]='L'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     j+cycleLen-i = 4+4-1=7, 取s[7]='S'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">j=8: j+i=9, 取s[9]='I'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     j+cycleLen-i = 8+4-1=11,取s[11]='I'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">j=12:j+i=13,取s[13]='G'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">第1行结果: APLSIIG</span><br></span></code></pre></div></div><p>第2行 (i=2)：</p><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">j=0: j+i=2, 取s[2]='Y'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">j=4: j+i=6, 取s[6]='I'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">j=8: j+i=10,取s[10]='R'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">第2行结果: YIR</span><br></span></code></pre></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="z字形图形化理解">Z字形图形化理解<a href="https://www.eurekashadow.xin/blog/LeetCode6#z%E5%AD%97%E5%BD%A2%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%90%86%E8%A7%A3" class="hash-link" aria-label="Z字形图形化理解的直接链接" title="Z字形图形化理解的直接链接">​</a></h3><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">P     A     H     N        // i=0, 索引: 0,4,8,12</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> A   P L   S I   I G       // i=1, 索引: 1,3,5,7,9,11,13</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Y     I     R            // i=2, 索引: 2,6,10</span><br></span></code></pre></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="核心规律">核心规律<a href="https://www.eurekashadow.xin/blog/LeetCode6#%E6%A0%B8%E5%BF%83%E8%A7%84%E5%BE%8B" class="hash-link" aria-label="核心规律的直接链接" title="核心规律的直接链接">​</a></h3><p>1.垂直列字符：位于索引 <code>j + i</code> 处</p><p>2.斜线字符：位于索引 <code>j + cycleLen - i</code> 处（仅中间行）</p><p>3.周期跳跃：每次跳跃 <code>cycleLen</code> 个位置</p><p><strong>时间复杂度</strong></p><ul>
<li>时间复杂度：O(n)，每个字符只访问一次</li>
<li>空间复杂度：O(n)，用于存储结果字符串</li>
</ul><p>这种方法避免了构造二维数组的额外空间，直接通过数学计算定位字符位置，效率很高。</p><p>这道题我至今<strong>尚未完全理解</strong>（20250815）</p></div></div></details>]]></content>
        <author>
            <name>Eureka X</name>
            <uri>https://github.com/EurekaShadow</uri>
        </author>
        <category label="数组" term="数组"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[反转字符串中的单词]]></title>
        <id>https://www.eurekashadow.xin/blog/LeetCode151</id>
        <link href="https://www.eurekashadow.xin/blog/LeetCode151"/>
        <updated>2025-08-14T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[力扣面试经典——151题]]></summary>
        <content type="html"><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="力扣面试经典151题"><span class="B2_JnYG"><a href="https://leetcode.cn/problems/reverse-words-in-a-string/description/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer" title="力扣">力扣面试经典——151题</a></span><a href="https://www.eurekashadow.xin/blog/LeetCode151#%E5%8A%9B%E6%89%A3%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B8151%E9%A2%98" class="hash-link" aria-label="力扣面试经典151题的直接链接" title="力扣面试经典151题的直接链接">​</a></h3>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-参考代码">💡 参考代码：<a href="https://www.eurekashadow.xin/blog/LeetCode151#-%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81" class="hash-link" aria-label="💡 参考代码：的直接链接" title="💡 参考代码：的直接链接">​</a></h3>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 移除字符串中的多余空格</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param s 输入字符串</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 处理后的字符串长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">removeExtraSpaces</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">char</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> slow </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> fast </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 跳过前导空格</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">fast</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token char">' '</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        fast</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 处理中间部分：移除单词间多余的空格</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">fast </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">strlen</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 如果当前字符不是空格，或者是第一个空格，则保留</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">fast</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token char">' '</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">fast </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">fast </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token char">' '</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            s</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">slow</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">fast</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        fast</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 处理结尾可能的空格</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">slow </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">slow </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token char">' '</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        slow</span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    s</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">slow</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token char">'\0'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 添加字符串结束符</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> slow</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 反转字符串指定范围内的字符</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param s 字符串</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param start 起始位置（包含）</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param end 结束位置（包含）</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">reverseString</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">char</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> start</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> end</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">start </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> end</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> temp </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">start</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        s</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">start</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">end</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        s</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">end</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> temp</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        start</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        end</span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 反转字符串中单词的顺序</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param s 输入字符串</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 反转后的字符串</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">char</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">reverseWords</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">char</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 第一步：移除多余空格</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> len </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">removeExtraSpaces</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 第二步：反转整个字符串</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">reverseString</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> len </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 第三步：反转每个单词</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> start </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token plain"> len</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 遇到空格或字符串结尾时，反转当前单词</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token char">' '</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token char">'\0'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token function" style="color:#d73a49">reverseString</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> start</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            start </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-总结">📖 总结：<a href="https://www.eurekashadow.xin/blog/LeetCode151#-%E6%80%BB%E7%BB%93" class="hash-link" aria-label="📖 总结：的直接链接" title="📖 总结：的直接链接">​</a></h3>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>点击展开题目总结</summary><div><div class="collapsibleContent_i85q"><h1>🤔 反转字符串中的单词</h1><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1️⃣-题目核心信息">1️⃣ 题目核心信息<a href="https://www.eurekashadow.xin/blog/LeetCode151#1%EF%B8%8F%E2%83%A3-%E9%A2%98%E7%9B%AE%E6%A0%B8%E5%BF%83%E4%BF%A1%E6%81%AF" class="hash-link" aria-label="1️⃣ 题目核心信息的直接链接" title="1️⃣ 题目核心信息的直接链接">​</a></h2><p>🎯 <strong>功能描述</strong>：给定一个字符串，反转其中单词的顺序，同时处理多余的空格问题</p><p>📥 <strong>输入输出</strong>：</p><ul>
<li><strong>输入</strong>：<code>char* s</code> - 输入的字符串，可能包含前导空格、尾随空格或单词间多个空格</li>
<li><strong>输出</strong>：<code>char*</code> - 返回单词顺序颠倒且单词间仅用单个空格分隔的字符串</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2️⃣-实现原理">2️⃣ 实现原理<a href="https://www.eurekashadow.xin/blog/LeetCode151#2%EF%B8%8F%E2%83%A3-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86" class="hash-link" aria-label="2️⃣ 实现原理的直接链接" title="2️⃣ 实现原理的直接链接">​</a></h2><p>💡 <strong>核心思路</strong>：使用双指针技术移除多余空格，然后通过整体反转加局部反转的方式实现单词顺序调换</p><p>📋 <strong>实现步骤</strong>：</p><ol>
<li>使用双指针移除字符串中的前导空格、尾随空格和单词间的多余空格</li>
<li>反转整个字符串</li>
<li>遍历字符串，识别每个单词的边界并单独反转每个单词</li>
<li>返回处理后的字符串</li>
</ol><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3️⃣-关键点解析">3️⃣ 关键点解析<a href="https://www.eurekashadow.xin/blog/LeetCode151#3%EF%B8%8F%E2%83%A3-%E5%85%B3%E9%94%AE%E7%82%B9%E8%A7%A3%E6%9E%90" class="hash-link" aria-label="3️⃣ 关键点解析的直接链接" title="3️⃣ 关键点解析的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-代码技巧">🎯 代码技巧<a href="https://www.eurekashadow.xin/blog/LeetCode151#-%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7" class="hash-link" aria-label="🎯 代码技巧的直接链接" title="🎯 代码技巧的直接链接">​</a></h3><ul>
<li><strong>双指针技术</strong>：用于高效地移除多余空格，避免使用额外空间</li>
<li><strong>两次反转法</strong>：先整体反转再局部反转，巧妙实现单词顺序调换</li>
<li><strong>原地操作</strong>：所有操作都在原字符串上进行，满足O(1)空间复杂度要求</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4️⃣-使用场景">4️⃣ 使用场景<a href="https://www.eurekashadow.xin/blog/LeetCode151#4%EF%B8%8F%E2%83%A3-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="4️⃣ 使用场景的直接链接" title="4️⃣ 使用场景的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-适用情况">✅ 适用情况：<a href="https://www.eurekashadow.xin/blog/LeetCode151#-%E9%80%82%E7%94%A8%E6%83%85%E5%86%B5" class="hash-link" aria-label="✅ 适用情况：的直接链接" title="✅ 适用情况：的直接链接">​</a></h3><ul>
<li>需要反转句子中单词顺序的文本处理</li>
<li>内存受限环境下处理字符串</li>
<li>需要规范化空格的字符串处理场景</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-前提条件">⚠️ 前提条件：<a href="https://www.eurekashadow.xin/blog/LeetCode151#%EF%B8%8F-%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6" class="hash-link" aria-label="⚠️ 前提条件：的直接链接" title="⚠️ 前提条件：的直接链接">​</a></h3><ul>
<li>字符串必须是可变的（C语言中为字符数组）</li>
<li>字符串至少包含一个单词</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5️⃣-复杂度分析">5️⃣ 复杂度分析<a href="https://www.eurekashadow.xin/blog/LeetCode151#5%EF%B8%8F%E2%83%A3-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90" class="hash-link" aria-label="5️⃣ 复杂度分析的直接链接" title="5️⃣ 复杂度分析的直接链接">​</a></h2><ul>
<li>
<p>⏱️ 时间复杂度：O(n)，其中n是字符串长度，需要遍历字符串常数次</p>
</li>
<li>
<p>💾 空间复杂度：O(1)，只使用常数级别的额外空间，原地修改字符串</p>
</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6️⃣-注意事项">6️⃣ 注意事项<a href="https://www.eurekashadow.xin/blog/LeetCode151#6%EF%B8%8F%E2%83%A3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="6️⃣ 注意事项的直接链接" title="6️⃣ 注意事项的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-边界情况">🚩 边界情况：<a href="https://www.eurekashadow.xin/blog/LeetCode151#-%E8%BE%B9%E7%95%8C%E6%83%85%E5%86%B5" class="hash-link" aria-label="🚩 边界情况：的直接链接" title="🚩 边界情况：的直接链接">​</a></h3><ul>
<li>空字符串或只包含空格的字符串</li>
<li>只有一个单词的字符串</li>
<li>字符串中包含大量多余空格的情况</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-易错点">💥 易错点：<a href="https://www.eurekashadow.xin/blog/LeetCode151#-%E6%98%93%E9%94%99%E7%82%B9" class="hash-link" aria-label="💥 易错点：的直接链接" title="💥 易错点：的直接链接">​</a></h3><ul>
<li>忘记处理前导空格和尾随空格</li>
<li>单词间空格处理不正确，可能保留多个空格</li>
<li>反转区间边界处理错误，导致数组越界</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="7️⃣-补充说明">7️⃣ 补充说明<a href="https://www.eurekashadow.xin/blog/LeetCode151#7%EF%B8%8F%E2%83%A3-%E8%A1%A5%E5%85%85%E8%AF%B4%E6%98%8E" class="hash-link" aria-label="7️⃣ 补充说明的直接链接" title="7️⃣ 补充说明的直接链接">​</a></h2><p>以字符串 " the sky is blue " 为例来演示整个算法过程：</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="初始状态">初始状态<a href="https://www.eurekashadow.xin/blog/LeetCode151#%E5%88%9D%E5%A7%8B%E7%8A%B6%E6%80%81" class="hash-link" aria-label="初始状态的直接链接" title="初始状态的直接链接">​</a></h3><p>输入字符串：<code>" the sky is blue "</code></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="第一步移除多余空格">第一步：移除多余空格<a href="https://www.eurekashadow.xin/blog/LeetCode151#%E7%AC%AC%E4%B8%80%E6%AD%A5%E7%A7%BB%E9%99%A4%E5%A4%9A%E4%BD%99%E7%A9%BA%E6%A0%BC" class="hash-link" aria-label="第一步：移除多余空格的直接链接" title="第一步：移除多余空格的直接链接">​</a></h3><p>执行 <code>removeExtraSpaces</code> 函数：</p><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">原字符串: "  the sky is blue  "</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          ↑</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        fast=0, slow=0</span><br></span></code></pre></div></div><p>过程：</p><ul>
<li>fast=0,1: 空格，跳过</li>
<li>fast=2: 't' -&gt; s[0]='t', slow=1</li>
<li>fast=3: 'h' -&gt; s[1]='h', slow=2</li>
<li>fast=4: 'e' -&gt; s[2]='e', slow=3</li>
<li>fast=5: 空格 -&gt; s[3]=' ', slow=4</li>
<li>fast=6: 空格 -&gt; 与前一字符都是空格，跳过</li>
<li>fast=7: 's' -&gt; s[4]='s', slow=5</li>
<li>fast=8: 'k' -&gt; s[5]='k', slow=6</li>
<li>fast=9: 'y' -&gt; s[6]='y', slow=7</li>
<li>fast=10: 空格 -&gt; s[7]=' ', slow=8</li>
<li>fast=11: 'i' -&gt; s[8]='i', slow=9</li>
<li>fast=12: 's' -&gt; s[9]='s', slow=10</li>
<li>fast=13: 空格 -&gt; s[10]=' ', slow=11</li>
<li>fast=14: 'b' -&gt; s[11]='b', slow=12</li>
<li>fast=15: 'l' -&gt; s[12]='l', slow=13</li>
<li>fast=16: 'u' -&gt; s[13]='u', slow=14</li>
<li>fast=17: 'e' -&gt; s[14]='e', slow=15</li>
<li>fast=18,19: 空格 -&gt; 检查到结尾空格，不做处理</li>
</ul><p>最终结果: "the sky is blue"
索引:      0123456789ABCDEF
长度: 15</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="第二步反转整个字符串">第二步：反转整个字符串<a href="https://www.eurekashadow.xin/blog/LeetCode151#%E7%AC%AC%E4%BA%8C%E6%AD%A5%E5%8F%8D%E8%BD%AC%E6%95%B4%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2" class="hash-link" aria-label="第二步：反转整个字符串的直接链接" title="第二步：反转整个字符串的直接链接">​</a></h3><p>执行 <code>reverseString(s, 0, 14)</code>：</p><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">原字符串: "the sky is blue"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">反转后:   "eulb si yks eht"</span><br></span></code></pre></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="第三步逐个反转单词">第三步：逐个反转单词<a href="https://www.eurekashadow.xin/blog/LeetCode151#%E7%AC%AC%E4%B8%89%E6%AD%A5%E9%80%90%E4%B8%AA%E5%8F%8D%E8%BD%AC%E5%8D%95%E8%AF%8D" class="hash-link" aria-label="第三步：逐个反转单词的直接链接" title="第三步：逐个反转单词的直接链接">​</a></h3><p>遍历字符串，对每个单词进行反转：</p><p>1.处理第一个单词 "eulb"（索引0-3）：</p><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">反转前: "eulb si yks eht"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">反转后: "blue si yks eht"</span><br></span></code></pre></div></div><p>2.处理第二个单词 "si"（索引5-6）：</p><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">反转前: "blue si yks eht"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">反转后: "blue is yks eht"</span><br></span></code></pre></div></div><p>3.处理第三个单词 "yks"（索引8-10）：</p><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">反转前: "blue is yks eht"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">反转后: "blue is sky eht"</span><br></span></code></pre></div></div><p>4.处理第四个单词 "eht"（索引12-14）：</p><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">反转前: "blue is sky eht"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">反转后: "blue is sky the"  </span><br></span></code></pre></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="最终结果">最终结果<a href="https://www.eurekashadow.xin/blog/LeetCode151#%E6%9C%80%E7%BB%88%E7%BB%93%E6%9E%9C" class="hash-link" aria-label="最终结果的直接链接" title="最终结果的直接链接">​</a></h3><p>输出字符串：<code>"blue is sky the"</code></p><p>这个过程通过三步操作完成了单词顺序的反转：</p><p>1.首先清理输入字符串，移除多余空格</p><p>2.然后整体反转字符串</p><p>3.最后将每个单词再次反转以恢复其正确顺序</p><p>这种方法的优势在于只需要常数级别的额外空间，完全在原字符串上进行操作。</p></div></div></details>]]></content>
        <author>
            <name>Eureka X</name>
            <uri>https://github.com/EurekaShadow</uri>
        </author>
        <category label="字符串" term="字符串"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[最长公共前缀]]></title>
        <id>https://www.eurekashadow.xin/blog/LeetCode14</id>
        <link href="https://www.eurekashadow.xin/blog/LeetCode14"/>
        <updated>2025-08-13T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[力扣面试经典——14题]]></summary>
        <content type="html"><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="力扣面试经典14题"><span class="B2_JnYG"><a href="https://leetcode.cn/problems/longest-common-prefix/description/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer" title="力扣">力扣面试经典——14题</a></span><a href="https://www.eurekashadow.xin/blog/LeetCode14#%E5%8A%9B%E6%89%A3%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B814%E9%A2%98" class="hash-link" aria-label="力扣面试经典14题的直接链接" title="力扣面试经典14题的直接链接">​</a></h3>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-参考代码">💡 参考代码：<a href="https://www.eurekashadow.xin/blog/LeetCode14#-%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81" class="hash-link" aria-label="💡 参考代码：的直接链接" title="💡 参考代码：的直接链接">​</a></h3>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 查找字符串数组中的最长公共前缀</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param strs 字符串数组</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param strsSize 数组长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 返回最长公共前缀字符串</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">longestCommonPrefix</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> strs</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> strsSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 边界条件：如果数组为空，返回空字符串</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">strsSize </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">char</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">malloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        result</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token char">'\0'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> result</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 边界条件：如果只有一个字符串，返回该字符串</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">strsSize </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">char</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">malloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">strlen</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">strs</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">strcpy</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">result</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> strs</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> result</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 获取第一个字符串的长度作为比较基准</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> firstStrLen </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">strlen</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">strs</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 逐个字符比较</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> firstStrLen</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> currentChar </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> strs</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 当前比较的字符</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 检查其他所有字符串在位置i处是否都有相同的字符</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> j </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> j </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> strsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> j</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 如果当前字符串在位置i处没有字符或者字符不匹配</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">strlen</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">strs</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">j</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"> strs</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">j</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> currentChar</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token comment" style="color:#999988;font-style:italic">// 找到公共前缀的结束位置，分配内存并复制前缀</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">char</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">malloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token function" style="color:#d73a49">strncpy</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">result</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> strs</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                result</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token char">'\0'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 添加字符串结束符</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> result</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 如果第一个字符串的所有字符都是公共前缀</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">char</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">malloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">firstStrLen </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">strcpy</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">result</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> strs</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> result</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-总结">📖 总结：<a href="https://www.eurekashadow.xin/blog/LeetCode14#-%E6%80%BB%E7%BB%93" class="hash-link" aria-label="📖 总结：的直接链接" title="📖 总结：的直接链接">​</a></h3>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>点击展开题目总结</summary><div><div class="collapsibleContent_i85q"><h1>🤔 最长公共前缀</h1><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1️⃣-题目核心信息">1️⃣ 题目核心信息<a href="https://www.eurekashadow.xin/blog/LeetCode14#1%EF%B8%8F%E2%83%A3-%E9%A2%98%E7%9B%AE%E6%A0%B8%E5%BF%83%E4%BF%A1%E6%81%AF" class="hash-link" aria-label="1️⃣ 题目核心信息的直接链接" title="1️⃣ 题目核心信息的直接链接">​</a></h2><p>🎯 <strong>功能描述</strong>：查找字符串数组中所有字符串的最长公共前缀，如果不存在公共前缀则返回空字符串</p><p>📥 <strong>输入输出</strong>：</p><ul>
<li><strong>输入</strong>：<code>strs</code> - 字符串数组，<code>strsSize</code> - 数组长度</li>
<li><strong>输出</strong>：返回最长公共前缀字符串（需要手动释放内存）</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2️⃣-实现原理">2️⃣ 实现原理<a href="https://www.eurekashadow.xin/blog/LeetCode14#2%EF%B8%8F%E2%83%A3-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86" class="hash-link" aria-label="2️⃣ 实现原理的直接链接" title="2️⃣ 实现原理的直接链接">​</a></h2><p>💡 <strong>核心思路</strong>：采用垂直扫描法，从左到右逐个字符比较所有字符串在相同位置的字符是否一致</p><p>📋 <strong>实现步骤</strong>：</p><ol>
<li>处理边界情况：空数组和单字符串数组</li>
<li>以第一个字符串为基准，从第0个字符开始逐个检查</li>
<li>对每个字符位置，遍历所有字符串验证该位置字符是否相同</li>
<li>一旦发现不匹配或某个字符串长度不足，立即返回当前找到的公共前缀</li>
</ol><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3️⃣-关键点解析">3️⃣ 关键点解析<a href="https://www.eurekashadow.xin/blog/LeetCode14#3%EF%B8%8F%E2%83%A3-%E5%85%B3%E9%94%AE%E7%82%B9%E8%A7%A3%E6%9E%90" class="hash-link" aria-label="3️⃣ 关键点解析的直接链接" title="3️⃣ 关键点解析的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-代码技巧">🎯 代码技巧<a href="https://www.eurekashadow.xin/blog/LeetCode14#-%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7" class="hash-link" aria-label="🎯 代码技巧的直接链接" title="🎯 代码技巧的直接链接">​</a></h3><ul>
<li>垂直扫描：按列比较而非按行比较，提高比较效率</li>
<li>提前终止：发现不匹配时立即停止，避免无效计算</li>
<li>动态内存分配：根据实际需要的前缀长度分配内存空间</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4️⃣-使用场景">4️⃣ 使用场景<a href="https://www.eurekashadow.xin/blog/LeetCode14#4%EF%B8%8F%E2%83%A3-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="4️⃣ 使用场景的直接链接" title="4️⃣ 使用场景的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-适用情况">✅ 适用情况：<a href="https://www.eurekashadow.xin/blog/LeetCode14#-%E9%80%82%E7%94%A8%E6%83%85%E5%86%B5" class="hash-link" aria-label="✅ 适用情况：的直接链接" title="✅ 适用情况：的直接链接">​</a></h3><ul>
<li>查找多个字符串的公共前缀</li>
<li>文件路径匹配</li>
<li>自动补全功能中的前缀匹配</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-前提条件">⚠️ 前提条件：<a href="https://www.eurekashadow.xin/blog/LeetCode14#%EF%B8%8F-%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6" class="hash-link" aria-label="⚠️ 前提条件：的直接链接" title="⚠️ 前提条件：的直接链接">​</a></h3><ul>
<li>输入字符串数组不为NULL</li>
<li>所有字符串只包含小写英文字母</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5️⃣-复杂度分析">5️⃣ 复杂度分析<a href="https://www.eurekashadow.xin/blog/LeetCode14#5%EF%B8%8F%E2%83%A3-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90" class="hash-link" aria-label="5️⃣ 复杂度分析的直接链接" title="5️⃣ 复杂度分析的直接链接">​</a></h2><ul>
<li>
<p>⏱️ 时间复杂度：O(S)，其中S是所有字符串的字符总数，最坏情况下需要遍历所有字符</p>
</li>
<li>
<p>💾 空间复杂度：O(1)，不考虑返回值的情况下只使用常数额外空间</p>
</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6️⃣-注意事项">6️⃣ 注意事项<a href="https://www.eurekashadow.xin/blog/LeetCode14#6%EF%B8%8F%E2%83%A3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="6️⃣ 注意事项的直接链接" title="6️⃣ 注意事项的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-边界情况">🚩 边界情况：<a href="https://www.eurekashadow.xin/blog/LeetCode14#-%E8%BE%B9%E7%95%8C%E6%83%85%E5%86%B5" class="hash-link" aria-label="🚩 边界情况：的直接链接" title="🚩 边界情况：的直接链接">​</a></h3><ul>
<li>空数组（strsSize = 0）</li>
<li>单个字符串数组（strsSize = 1）</li>
<li>包含空字符串的数组</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-易错点">💥 易错点：<a href="https://www.eurekashadow.xin/blog/LeetCode14#-%E6%98%93%E9%94%99%E7%82%B9" class="hash-link" aria-label="💥 易错点：的直接链接" title="💥 易错点：的直接链接">​</a></h3><ul>
<li>忘记手动释放返回的字符串内存导致内存泄漏</li>
<li>没有正确处理字符串长度不足的情况导致数组越界</li>
<li>字符串结束符'\0'处理不当</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="7️⃣-补充说明">7️⃣ 补充说明<a href="https://www.eurekashadow.xin/blog/LeetCode14#7%EF%B8%8F%E2%83%A3-%E8%A1%A5%E5%85%85%E8%AF%B4%E6%98%8E" class="hash-link" aria-label="7️⃣ 补充说明的直接链接" title="7️⃣ 补充说明的直接链接">​</a></h2><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> * 查找字符串数组中的最长公共前缀</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> * @param strs 字符串数组</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> * @param strsSize 数组长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> * @return 返回最长公共前缀字符串</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">char * longestCommonPrefix(char ** strs, int strsSize){</span><br></span></code></pre></div></div><p>这个函数接收一个字符串数组 <code>strs</code> 和数组长度 <code>strsSize</code>，返回一个新分配内存的字符串，包含最长公共前缀。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="第一步处理边界条件">第一步：处理边界条件<a href="https://www.eurekashadow.xin/blog/LeetCode14#%E7%AC%AC%E4%B8%80%E6%AD%A5%E5%A4%84%E7%90%86%E8%BE%B9%E7%95%8C%E6%9D%A1%E4%BB%B6" class="hash-link" aria-label="第一步：处理边界条件的直接链接" title="第一步：处理边界条件的直接链接">​</a></h3><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    // 边界条件：如果数组为空，返回空字符串</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if (strsSize == 0) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        char* result = malloc(1);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        result[0] = '\0';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return result;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span></code></pre></div></div><p>如果数组为空，直接返回一个空字符串。这里 <code>malloc(1)</code> 分配一个字节用于存储字符串结束符 <code>'\0'</code>。</p><p>例子：<code>strs = []</code>，<code>strsSize = 0</code></p><ul>
<li>直接返回 <code>""	</code></li>
</ul><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    // 边界条件：如果只有一个字符串，返回该字符串</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if (strsSize == 1) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        char* result = malloc(strlen(strs[0]) + 1);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        strcpy(result, strs[0]);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return result;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span></code></pre></div></div><p>如果只有一个字符串，那么它本身就是公共前缀，复制该字符串并返回。</p><p>例子：<code>strs = ["hello"]</code>，<code>strsSize = 1</code></p><ul>
<li>直接返回 <code>"hello"</code></li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="第二步获取比较基准">第二步：获取比较基准<a href="https://www.eurekashadow.xin/blog/LeetCode14#%E7%AC%AC%E4%BA%8C%E6%AD%A5%E8%8E%B7%E5%8F%96%E6%AF%94%E8%BE%83%E5%9F%BA%E5%87%86" class="hash-link" aria-label="第二步：获取比较基准的直接链接" title="第二步：获取比较基准的直接链接">​</a></h3><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    // 获取第一个字符串的长度作为比较基准</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    int firstStrLen = strlen(strs[0]);</span><br></span></code></pre></div></div><p>以第一个字符串的长度作为比较的上限，因为公共前缀不可能比任何一个字符串更长。</p><p>例子：<code>strs = ["flower", "flow", "flight"]</code></p><ul>
<li><code>firstStrLen = 6</code>（"flower"的长度）</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="第三步逐字符垂直比较">第三步：逐字符垂直比较<a href="https://www.eurekashadow.xin/blog/LeetCode14#%E7%AC%AC%E4%B8%89%E6%AD%A5%E9%80%90%E5%AD%97%E7%AC%A6%E5%9E%82%E7%9B%B4%E6%AF%94%E8%BE%83" class="hash-link" aria-label="第三步：逐字符垂直比较的直接链接" title="第三步：逐字符垂直比较的直接链接">​</a></h3><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    // 逐个字符比较</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    for (int i = 0; i &lt; firstStrLen; i++) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        char currentChar = strs[0][i];  // 当前比较的字符</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 检查其他所有字符串在位置i处是否都有相同的字符</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        for (int j = 1; j &lt; strsSize; j++) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            // 如果当前字符串在位置i处没有字符或者字符不匹配</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            if (i &gt;= strlen(strs[j]) || strs[j][i] != currentChar) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                // 找到公共前缀的结束位置，分配内存并复制前缀</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                char* result = malloc(i + 1);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                strncpy(result, strs[0], i);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                result[i] = '\0';  // 添加字符串结束符</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                return result;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span></code></pre></div></div><p><strong>算法核心：垂直扫描法</strong></p><p>这是算法的核心部分，采用垂直扫描的方式：</p><ol>
<li>外层循环遍历第一个字符串的每个字符位置（索引 <code>i</code>）</li>
<li>内层循环检查其他所有字符串在相同位置 <code>i</code> 的字符是否与第一个字符串相同</li>
<li>如果发现不匹配或某个字符串在位置 <code>i</code> 没有字符，则找到了公共前缀的结束位置</li>
</ol><p><strong>详细例子分析</strong></p><p><strong>示例 1:</strong> <code>strs = ["flower", "flow", "flight"]</code></p><table><thead><tr><th>字符位置</th><th>比较内容</th><th>结果</th></tr></thead><tbody><tr><td>i=0</td><td>'f' vs 'f' vs 'f'</td><td>✓ 匹配</td></tr><tr><td>i=1</td><td>'l' vs 'l' vs 'l'</td><td>✓ 匹配</td></tr><tr><td>i=2</td><td>'o' vs 'o' vs 'i'</td><td>✗ 不匹配，返回 "fl"</td></tr></tbody></table><p><strong>示例 2:</strong> <code>strs = ["dog", "racecar", "car"]</code></p><table><thead><tr><th>字符位置</th><th>比较内容</th><th>结果</th></tr></thead><tbody><tr><td>i=0</td><td>'d' vs 'r' vs 'c'</td><td>✗ 不匹配，返回 ""</td></tr></tbody></table><h3 class="anchor anchorWithStickyNavbar_LWe7" id="第四步处理完全匹配的情况">第四步：处理完全匹配的情况<a href="https://www.eurekashadow.xin/blog/LeetCode14#%E7%AC%AC%E5%9B%9B%E6%AD%A5%E5%A4%84%E7%90%86%E5%AE%8C%E5%85%A8%E5%8C%B9%E9%85%8D%E7%9A%84%E6%83%85%E5%86%B5" class="hash-link" aria-label="第四步：处理完全匹配的情况的直接链接" title="第四步：处理完全匹配的情况的直接链接">​</a></h3><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    // 如果第一个字符串的所有字符都是公共前缀</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    char* result = malloc(firstStrLen + 1);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    strcpy(result, strs[0]);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return result;</span><br></span></code></pre></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="特殊情况处理与完整执行示例">特殊情况处理与完整执行示例<a href="https://www.eurekashadow.xin/blog/LeetCode14#%E7%89%B9%E6%AE%8A%E6%83%85%E5%86%B5%E5%A4%84%E7%90%86%E4%B8%8E%E5%AE%8C%E6%95%B4%E6%89%A7%E8%A1%8C%E7%A4%BA%E4%BE%8B" class="hash-link" aria-label="特殊情况处理与完整执行示例的直接链接" title="特殊情况处理与完整执行示例的直接链接">​</a></h3><p><strong>全匹配情况处理</strong></p><p>如果第一个字符串的所有字符都是公共前缀（即所有字符串完全相同或都是第一个字符串的前缀），则返回第一个字符串的完整拷贝。</p><p><strong>例子分析：</strong></p><p><strong>示例 1</strong>: <code>strs = ["flow", "flow", "flow"]</code></p><ul>
<li>所有字符都匹配，返回 <code>"flow"</code></li>
</ul><p><strong>示例 2</strong>: <code>strs = ["flow", "flower", "flight"]</code></p><ul>
<li>在比较过程中就会发现不匹配，不会执行到全匹配处理部分</li>
</ul><p><strong>完整执行示例</strong></p><p>以 <code>strs = ["flower", "flow", "flight"]</code> 为例完整执行过程：</p><ol>
<li>
<p><code>strsSize = 3</code>，不满足边界条件</p>
</li>
<li>
<p><code>firstStrLen = 6</code></p>
</li>
<li>
<p>开始循环：</p>
<ul>
<li><code>i=0</code>: <code>currentChar = 'f'</code>
<ul>
<li><code>j=1</code>: <code>strs[1][0] = 'f'</code> ✓ 匹配</li>
<li><code>j=2</code>: <code>strs[2][0] = 'f'</code> ✓ 匹配</li>
</ul>
</li>
<li><code>i=1</code>: <code>currentChar = 'l'</code>
<ul>
<li><code>j=1</code>: <code>strs[1][1] = 'l'</code> ✓ 匹配</li>
<li><code>j=2</code>: <code>strs[2][1] = 'l'</code> ✓ 匹配</li>
</ul>
</li>
<li><code>i=2</code>: <code>currentChar = 'o'</code>
<ul>
<li><code>j=1</code>: <code>strs[1][2] = 'o'</code> ✓ 匹配</li>
<li><code>j=2</code>: <code>strs[2][2] = 'i'</code> ✗ 不匹配！</li>
</ul>
</li>
</ul>
</li>
<li>
<p>分配内存，复制前2个字符 <code>"fl"</code> 并返回</p>
</li>
</ol></div></div></details>]]></content>
        <author>
            <name>Eureka X</name>
            <uri>https://github.com/EurekaShadow</uri>
        </author>
        <category label="字符串" term="字符串"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[最后一个单词的长度]]></title>
        <id>https://www.eurekashadow.xin/blog/LeetCode58</id>
        <link href="https://www.eurekashadow.xin/blog/LeetCode58"/>
        <updated>2025-08-12T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[力扣面试经典——58题]]></summary>
        <content type="html"><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="力扣面试经典58题"><span class="B2_JnYG"><a href="https://leetcode.cn/problems/length-of-last-word/description/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer" title="力扣">力扣面试经典——58题</a></span><a href="https://www.eurekashadow.xin/blog/LeetCode58#%E5%8A%9B%E6%89%A3%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B858%E9%A2%98" class="hash-link" aria-label="力扣面试经典58题的直接链接" title="力扣面试经典58题的直接链接">​</a></h3>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-参考代码">💡 参考代码：<a href="https://www.eurekashadow.xin/blog/LeetCode58#-%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81" class="hash-link" aria-label="💡 参考代码：的直接链接" title="💡 参考代码：的直接链接">​</a></h3>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 返回字符串中最后一个单词的长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param s 输入字符串，由若干单词组成，单词前后用空格隔开</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 最后一个单词的长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">lengthOfLastWord</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">char</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 从字符串末尾开始向前遍历，跳过尾部空格</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> end </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">strlen</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">end </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">end</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token char">' '</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        end</span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 从最后一个非空格字符开始，向前计算单词长度</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> length </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">end </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">end</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token char">' '</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        length</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        end</span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 返回最后一个单词的长度</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> length</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-总结">📖 总结：<a href="https://www.eurekashadow.xin/blog/LeetCode58#-%E6%80%BB%E7%BB%93" class="hash-link" aria-label="📖 总结：的直接链接" title="📖 总结：的直接链接">​</a></h3>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>点击展开题目总结</summary><div><div class="collapsibleContent_i85q"><h1>🤔 Length of Last Word</h1><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1️⃣-题目核心信息">1️⃣ 题目核心信息<a href="https://www.eurekashadow.xin/blog/LeetCode58#1%EF%B8%8F%E2%83%A3-%E9%A2%98%E7%9B%AE%E6%A0%B8%E5%BF%83%E4%BF%A1%E6%81%AF" class="hash-link" aria-label="1️⃣ 题目核心信息的直接链接" title="1️⃣ 题目核心信息的直接链接">​</a></h2><p>🎯 <strong>功能描述</strong>：给定一个由若干单词组成的字符串，单词之间用空格分隔，返回最后一个单词的长度。</p><p>📥 <strong>输入输出</strong>：</p><ul>
<li><strong>输入</strong>：char* s - 一个由英文字母和空格组成的字符串</li>
<li><strong>输出</strong>：int - 字符串中最后一个单词的长度</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2️⃣-实现原理">2️⃣ 实现原理<a href="https://www.eurekashadow.xin/blog/LeetCode58#2%EF%B8%8F%E2%83%A3-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86" class="hash-link" aria-label="2️⃣ 实现原理的直接链接" title="2️⃣ 实现原理的直接链接">​</a></h2><p>💡 <strong>核心思路</strong>：采用反向遍历的方法，从字符串末尾开始查找，跳过尾部空格后统计最后一个单词的字符个数。</p><p>📋 <strong>实现步骤</strong>：</p><ol>
<li>获取字符串长度，从末尾开始遍历</li>
<li>跳过字符串尾部的所有空格字符</li>
<li>从最后一个非空格字符开始向前统计，直到遇到空格或到达字符串开头</li>
<li>返回统计的字符个数作为最后一个单词的长度</li>
</ol><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3️⃣-关键点解析">3️⃣ 关键点解析<a href="https://www.eurekashadow.xin/blog/LeetCode58#3%EF%B8%8F%E2%83%A3-%E5%85%B3%E9%94%AE%E7%82%B9%E8%A7%A3%E6%9E%90" class="hash-link" aria-label="3️⃣ 关键点解析的直接链接" title="3️⃣ 关键点解析的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-代码技巧">🎯 代码技巧<a href="https://www.eurekashadow.xin/blog/LeetCode58#-%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7" class="hash-link" aria-label="🎯 代码技巧的直接链接" title="🎯 代码技巧的直接链接">​</a></h3><ul>
<li>反向遍历：避免处理前导空格，直接定位到最后一个单词</li>
<li>双指针思想：一个指针用于跳过空格，另一个用于统计单词长度</li>
<li>边界处理：正确处理字符串末尾的空格和字符串边界</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4️⃣-使用场景">4️⃣ 使用场景<a href="https://www.eurekashadow.xin/blog/LeetCode58#4%EF%B8%8F%E2%83%A3-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="4️⃣ 使用场景的直接链接" title="4️⃣ 使用场景的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-适用情况">✅ 适用情况：<a href="https://www.eurekashadow.xin/blog/LeetCode58#-%E9%80%82%E7%94%A8%E6%83%85%E5%86%B5" class="hash-link" aria-label="✅ 适用情况：的直接链接" title="✅ 适用情况：的直接链接">​</a></h3><ul>
<li>需要获取文本中最后一个单词的相关信息</li>
<li>文本处理中需要分析单词结构</li>
<li>字符串解析操作</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-前提条件">⚠️ 前提条件：<a href="https://www.eurekashadow.xin/blog/LeetCode58#%EF%B8%8F-%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6" class="hash-link" aria-label="⚠️ 前提条件：的直接链接" title="⚠️ 前提条件：的直接链接">​</a></h3><ul>
<li>输入字符串至少包含一个单词</li>
<li>单词仅由英文字母组成，单词之间用空格分隔</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5️⃣-复杂度分析">5️⃣ 复杂度分析<a href="https://www.eurekashadow.xin/blog/LeetCode58#5%EF%B8%8F%E2%83%A3-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90" class="hash-link" aria-label="5️⃣ 复杂度分析的直接链接" title="5️⃣ 复杂度分析的直接链接">​</a></h2><ul>
<li>
<p>⏱️ 时间复杂度：O(n)，其中n是字符串的长度，最坏情况下需要遍历整个字符串</p>
</li>
<li>
<p>💾 空间复杂度：O(1)，只使用了常数级别的额外空间</p>
</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6️⃣-注意事项">6️⃣ 注意事项<a href="https://www.eurekashadow.xin/blog/LeetCode58#6%EF%B8%8F%E2%83%A3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="6️⃣ 注意事项的直接链接" title="6️⃣ 注意事项的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-边界情况">🚩 边界情况：<a href="https://www.eurekashadow.xin/blog/LeetCode58#-%E8%BE%B9%E7%95%8C%E6%83%85%E5%86%B5" class="hash-link" aria-label="🚩 边界情况：的直接链接" title="🚩 边界情况：的直接链接">​</a></h3><ul>
<li>字符串末尾有多个空格</li>
<li>字符串只有一个单词</li>
<li>字符串开头有多个空格</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-易错点">💥 易错点：<a href="https://www.eurekashadow.xin/blog/LeetCode58#-%E6%98%93%E9%94%99%E7%82%B9" class="hash-link" aria-label="💥 易错点：的直接链接" title="💥 易错点：的直接链接">​</a></h3><ul>
<li>忘记处理字符串末尾的空格</li>
<li>边界条件判断错误，可能导致数组越界</li>
<li>混淆单词长度计算的起止位置</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="7⃣-补充说明">7⃣ 补充说明<a href="https://www.eurekashadow.xin/blog/LeetCode58#7%E2%83%A3-%E8%A1%A5%E5%85%85%E8%AF%B4%E6%98%8E" class="hash-link" aria-label="7⃣ 补充说明的直接链接" title="7⃣ 补充说明的直接链接">​</a></h2><p>示例: "Hello World"</p><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">字符串: "Hello World"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">索引:    01234567890</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">步骤:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1. end = 10 (指向 '\0' 前的字符 'd')</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">2. 跳过空格: 无尾部空格，end 保持为 10</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">3. 计算单词长度:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   - 'd'(10) -&gt; length=1, end=9</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   - 'l'(9)  -&gt; length=2, end=8</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   - 'r'(8)  -&gt; length=3, end=7</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   - 'o'(7)  -&gt; length=4, end=6</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   - 'W'(6)  -&gt; length=5, end=5</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   - ' '(5)  -&gt; 遇到空格，停止</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">4. 返回 length = 5</span><br></span></code></pre></div></div></div></div></details>]]></content>
        <author>
            <name>Eureka X</name>
            <uri>https://github.com/EurekaShadow</uri>
        </author>
        <category label="字符串" term="字符串"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[整数转罗马数字]]></title>
        <id>https://www.eurekashadow.xin/blog/LeetCode12</id>
        <link href="https://www.eurekashadow.xin/blog/LeetCode12"/>
        <updated>2025-08-11T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[力扣面试经典——12题]]></summary>
        <content type="html"><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="力扣面试经典12题"><span class="B2_JnYG"><a href="https://leetcode.cn/problems/integer-to-roman/description/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer" title="力扣">力扣面试经典——12题</a></span><a href="https://www.eurekashadow.xin/blog/LeetCode12#%E5%8A%9B%E6%89%A3%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B812%E9%A2%98" class="hash-link" aria-label="力扣面试经典12题的直接链接" title="力扣面试经典12题的直接链接">​</a></h3>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-参考代码">💡 参考代码：<a href="https://www.eurekashadow.xin/blog/LeetCode12#-%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81" class="hash-link" aria-label="💡 参考代码：的直接链接" title="💡 参考代码：的直接链接">​</a></h3>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 将整数转换为罗马数字</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param num 输入的整数 (范围: 1 &lt;= num &lt;= 3999)</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 返回对应的罗马数字字符串，调用者负责释放返回的字符串内存</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">char</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">intToRoman</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> num</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 定义数值数组，包含所有可能的数值（包括特殊的减法形式）</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 按从大到小的顺序排列，便于贪心算法处理</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> values</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token number" style="color:#36acaa">1000</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">900</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">500</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">400</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">100</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">90</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">50</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">40</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">9</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">5</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 定义与数值数组对应的罗马数字字符串数组</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">char</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> symbols</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token string" style="color:#e3116c">"M"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"CM"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"D"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"CD"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"C"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"XC"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"L"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"XL"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"X"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"IX"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"V"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"IV"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"I"</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 计算数组长度</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">values</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">/</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">values</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 分配结果字符串内存，最大情况下3999对应"MMMDCCCCLXXXXVIIII"，长度不会超过20</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 但为了安全起见，分配足够大的空间</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">char</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">char</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token function" style="color:#d73a49">malloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">20</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">char</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 初始化结果字符串为空字符串</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token comment" style="color:#999988;font-style:italic">//strcat 函数要求目标字符串必须是以 \0 结尾的有效C字符串，否则行为未定义</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    result</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token char">'\0'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 使用贪心算法，从最大的数值开始处理</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> size</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 当前数字大于等于当前数值时，重复处理</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">num </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> values</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 将对应的罗马数字符号追加到结果字符串</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token function" style="color:#d73a49">strcat</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">result</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> symbols</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 从原数字中减去已处理的数值</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            num </span><span class="token operator" style="color:#393A34">-=</span><span class="token plain"> values</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> result</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-总结">📖 总结：<a href="https://www.eurekashadow.xin/blog/LeetCode12#-%E6%80%BB%E7%BB%93" class="hash-link" aria-label="📖 总结：的直接链接" title="📖 总结：的直接链接">​</a></h3>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>点击展开题目总结</summary><div><div class="collapsibleContent_i85q"><h1>🤔 整数转罗马数字</h1><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1️⃣-题目核心信息">1️⃣ 题目核心信息<a href="https://www.eurekashadow.xin/blog/LeetCode12#1%EF%B8%8F%E2%83%A3-%E9%A2%98%E7%9B%AE%E6%A0%B8%E5%BF%83%E4%BF%A1%E6%81%AF" class="hash-link" aria-label="1️⃣ 题目核心信息的直接链接" title="1️⃣ 题目核心信息的直接链接">​</a></h2><p>🎯 <strong>功能描述</strong>：将给定的整数按照罗马数字规则转换为对应的罗马数字字符串表示</p><p>📥 <strong>输入输出</strong>：</p><ul>
<li><strong>输入</strong>：int num - 需要转换的整数，范围为1-3999</li>
<li><strong>输出</strong>：char* - 返回表示该整数的罗马数字字符串</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2️⃣-实现原理">2️⃣ 实现原理<a href="https://www.eurekashadow.xin/blog/LeetCode12#2%EF%B8%8F%E2%83%A3-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86" class="hash-link" aria-label="2️⃣ 实现原理的直接链接" title="2️⃣ 实现原理的直接链接">​</a></h2><p>💡 <strong>核心思路</strong>：采用贪心算法，从最大的罗马数字值开始匹配，逐步减去已匹配的值，直到数值为0</p><p>📋 <strong>实现步骤</strong>：</p><ol>
<li>预先定义所有可能的数值和对应的罗马数字符号（包括特殊减法形式）</li>
<li>创建结果字符串并初始化为空</li>
<li>从最大值开始遍历数值数组</li>
<li>对于每个数值，只要原数字大于等于它，就将对应符号添加到结果中并减去该数值</li>
<li>重复步骤4直到原数字变为0，返回结果字符串</li>
</ol><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3️⃣-关键点解析">3️⃣ 关键点解析<a href="https://www.eurekashadow.xin/blog/LeetCode12#3%EF%B8%8F%E2%83%A3-%E5%85%B3%E9%94%AE%E7%82%B9%E8%A7%A3%E6%9E%90" class="hash-link" aria-label="3️⃣ 关键点解析的直接链接" title="3️⃣ 关键点解析的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-代码技巧">🎯 代码技巧<a href="https://www.eurekashadow.xin/blog/LeetCode12#-%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7" class="hash-link" aria-label="🎯 代码技巧的直接链接" title="🎯 代码技巧的直接链接">​</a></h3><ul>
<li>使用并行数组存储数值和符号，便于同步处理</li>
<li>采用贪心策略，每次都选择能匹配的最大数值</li>
<li>预先处理特殊减法形式（如4=IV, 9=IX等），简化主逻辑</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4️⃣-使用场景">4️⃣ 使用场景<a href="https://www.eurekashadow.xin/blog/LeetCode12#4%EF%B8%8F%E2%83%A3-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="4️⃣ 使用场景的直接链接" title="4️⃣ 使用场景的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-适用情况">✅ 适用情况：<a href="https://www.eurekashadow.xin/blog/LeetCode12#-%E9%80%82%E7%94%A8%E6%83%85%E5%86%B5" class="hash-link" aria-label="✅ 适用情况：的直接链接" title="✅ 适用情况：的直接链接">​</a></h3><ul>
<li>数字转换系统中的罗马数字表示</li>
<li>教学或演示数字系统转换</li>
<li>历史文献或特殊格式的数字显示</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-前提条件">⚠️ 前提条件：<a href="https://www.eurekashadow.xin/blog/LeetCode12#%EF%B8%8F-%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6" class="hash-link" aria-label="⚠️ 前提条件：的直接链接" title="⚠️ 前提条件：的直接链接">​</a></h3><ul>
<li>输入必须是1到3999之间的整数</li>
<li>只能处理正整数，不支持0或负数</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5️⃣-复杂度分析">5️⃣ 复杂度分析<a href="https://www.eurekashadow.xin/blog/LeetCode12#5%EF%B8%8F%E2%83%A3-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90" class="hash-link" aria-label="5️⃣ 复杂度分析的直接链接" title="5️⃣ 复杂度分析的直接链接">​</a></h2><ul>
<li>
<p>⏱️ 时间复杂度：O(1) - 虽然是循环结构，但处理的数值范围有限，最多处理13种不同的数值</p>
</li>
<li>
<p>💾 空间复杂度：O(1) - 使用固定大小的数组和有限长度的结果字符串</p>
</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6️⃣-注意事项">6️⃣ 注意事项<a href="https://www.eurekashadow.xin/blog/LeetCode12#6%EF%B8%8F%E2%83%A3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="6️⃣ 注意事项的直接链接" title="6️⃣ 注意事项的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-边界情况">🚩 边界情况：<a href="https://www.eurekashadow.xin/blog/LeetCode12#-%E8%BE%B9%E7%95%8C%E6%83%85%E5%86%B5" class="hash-link" aria-label="🚩 边界情况：的直接链接" title="🚩 边界情况：的直接链接">​</a></h3><ul>
<li>输入为1时，应返回"I"</li>
<li>输入为3999时，应返回"MMMCMXCIX"</li>
<li>输入为特殊减法形式如4、9、40等</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-易错点">💥 易错点：<a href="https://www.eurekashadow.xin/blog/LeetCode12#-%E6%98%93%E9%94%99%E7%82%B9" class="hash-link" aria-label="💥 易错点：的直接链接" title="💥 易错点：的直接链接">​</a></h3><ul>
<li>忘记处理特殊减法形式（4、9、40、90、400、900）</li>
<li>数值数组和符号数组不同步或顺序错误</li>
<li>内存管理问题，忘记释放动态分配的内存</li>
<li>没有考虑输入范围限制</li>
</ul></div></div></details>]]></content>
        <author>
            <name>Eureka X</name>
            <uri>https://github.com/EurekaShadow</uri>
        </author>
        <category label="字符串" term="字符串"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[罗马数字转整数]]></title>
        <id>https://www.eurekashadow.xin/blog/LeetCode13</id>
        <link href="https://www.eurekashadow.xin/blog/LeetCode13"/>
        <updated>2025-08-10T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[力扣面试经典——13题]]></summary>
        <content type="html"><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="力扣面试经典13题"><span class="B2_JnYG"><a href="https://leetcode.cn/problems/roman-to-integer/description/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer" title="力扣">力扣面试经典——13题</a></span><a href="https://www.eurekashadow.xin/blog/LeetCode13#%E5%8A%9B%E6%89%A3%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B813%E9%A2%98" class="hash-link" aria-label="力扣面试经典13题的直接链接" title="力扣面试经典13题的直接链接">​</a></h3>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-参考代码">💡 参考代码：<a href="https://www.eurekashadow.xin/blog/LeetCode13#-%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81" class="hash-link" aria-label="💡 参考代码：的直接链接" title="💡 参考代码：的直接链接">​</a></h3>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 将罗马字符转换为对应的整数值</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param c - 输入的罗马数字字符，应为 I, V, X, L, C, D, M 中的一个</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 对应的整数值，如果输入无效则返回 0</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *   'I' -&gt; 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *   'V' -&gt; 5</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *   'X' -&gt; 10</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *   'L' -&gt; 50</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *   'C' -&gt; 100</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *   'D' -&gt; 500</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *   'M' -&gt; 1000</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *   其他 -&gt; 0</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">romanCharToInt</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> c</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">switch</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">c</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> </span><span class="token char">'I'</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> </span><span class="token char">'V'</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">5</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> </span><span class="token char">'X'</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> </span><span class="token char">'L'</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">50</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> </span><span class="token char">'C'</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">100</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> </span><span class="token char">'D'</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">500</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> </span><span class="token char">'M'</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1000</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">default</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 将罗马数字字符串转换为对应的整数</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 罗马数字的规则：</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 1. 通常情况下，较小的数字在较大数字的右边，表示相加</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 2. 特殊情况下，较小的数字在较大数字的左边，表示相减</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *    六种减法情况：IV(4), IX(9), XL(40), XC(90), CD(400), CM(900)</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param s - 输入的罗马数字字符串，应为有效的罗马数字格式</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 对应的整数值</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 算法思路：</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 从左到右遍历字符串，比较当前字符与下一个字符的数值大小：</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * - 如果当前字符数值小于下一个字符数值，则执行减法操作</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * - 否则执行加法操作</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 时间复杂度：O(n)，其中 n 是字符串长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 空间复杂度：O(1)</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">romanToInt</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">char</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> len </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">strlen</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> len</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 获取当前字符和下一个字符对应的数值</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 如果是最后一个字符，则下一个字符值为0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> current </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">romanCharToInt</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> next </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> len </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">romanCharToInt</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 如果当前字符数值小于下一个字符数值，说明是减法情况（如 IV, IX 等）</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 需要从结果中减去当前字符的值</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">current </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> next</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            result </span><span class="token operator" style="color:#393A34">-=</span><span class="token plain"> current</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 正常情况，将当前字符的值加到结果中</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            result </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> current</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> result</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-总结">📖 总结：<a href="https://www.eurekashadow.xin/blog/LeetCode13#-%E6%80%BB%E7%BB%93" class="hash-link" aria-label="📖 总结：的直接链接" title="📖 总结：的直接链接">​</a></h3>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>点击展开题目总结</summary><div><div class="collapsibleContent_i85q"><h1>🤔 罗马数字转整数</h1><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1️⃣-题目核心信息">1️⃣ 题目核心信息<a href="https://www.eurekashadow.xin/blog/LeetCode13#1%EF%B8%8F%E2%83%A3-%E9%A2%98%E7%9B%AE%E6%A0%B8%E5%BF%83%E4%BF%A1%E6%81%AF" class="hash-link" aria-label="1️⃣ 题目核心信息的直接链接" title="1️⃣ 题目核心信息的直接链接">​</a></h2><p>🎯 <strong>功能描述</strong>：将给定的罗马数字字符串转换为对应的整数值，处理罗马数字的特殊减法规则</p><p>📥 <strong>输入输出</strong>：</p><ul>
<li><strong>输入</strong>：char* s - 有效的罗马数字字符串，包含字符 I, V, X, L, C, D, M</li>
<li><strong>输出</strong>：int - 对应的整数值</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2️⃣-实现原理">2️⃣ 实现原理<a href="https://www.eurekashadow.xin/blog/LeetCode13#2%EF%B8%8F%E2%83%A3-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86" class="hash-link" aria-label="2️⃣ 实现原理的直接链接" title="2️⃣ 实现原理的直接链接">​</a></h2><p>💡 <strong>核心思路</strong>：通过比较相邻字符的数值大小来判断是加法还是减法规则，从左到右遍历字符串进行累加计算</p><p>📋 <strong>实现步骤</strong>：</p><ol>
<li>建立罗马字符到整数值的映射关系</li>
<li>从左到右遍历罗马数字字符串</li>
<li>比较当前字符与下一个字符的数值大小</li>
<li>如果当前字符值小于下一个字符值，则执行减法；否则执行加法</li>
</ol><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3️⃣-关键点解析">3️⃣ 关键点解析<a href="https://www.eurekashadow.xin/blog/LeetCode13#3%EF%B8%8F%E2%83%A3-%E5%85%B3%E9%94%AE%E7%82%B9%E8%A7%A3%E6%9E%90" class="hash-link" aria-label="3️⃣ 关键点解析的直接链接" title="3️⃣ 关键点解析的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-代码技巧">🎯 代码技巧<a href="https://www.eurekashadow.xin/blog/LeetCode13#-%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7" class="hash-link" aria-label="🎯 代码技巧的直接链接" title="🎯 代码技巧的直接链接">​</a></h3><ul>
<li>使用三元运算符处理边界情况：当访问到最后一个字符时，下一个字符值设为0</li>
<li>通过比较相邻元素大小来统一处理加法和减法规则</li>
<li>使用switch语句快速映射字符到数值</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4️⃣-使用场景">4️⃣ 使用场景<a href="https://www.eurekashadow.xin/blog/LeetCode13#4%EF%B8%8F%E2%83%A3-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="4️⃣ 使用场景的直接链接" title="4️⃣ 使用场景的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-适用情况">✅ 适用情况：<a href="https://www.eurekashadow.xin/blog/LeetCode13#-%E9%80%82%E7%94%A8%E6%83%85%E5%86%B5" class="hash-link" aria-label="✅ 适用情况：的直接链接" title="✅ 适用情况：的直接链接">​</a></h3><ul>
<li>罗马数字转换程序</li>
<li>历史文献中的数字解析</li>
<li>教学演示罗马数字规则</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-前提条件">⚠️ 前提条件：<a href="https://www.eurekashadow.xin/blog/LeetCode13#%EF%B8%8F-%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6" class="hash-link" aria-label="⚠️ 前提条件：的直接链接" title="⚠️ 前提条件：的直接链接">​</a></h3><ul>
<li>输入字符串必须是有效的罗马数字格式</li>
<li>字符串只包含合法的罗马数字字符 I, V, X, L, C, D, M</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5️⃣-复杂度分析">5️⃣ 复杂度分析<a href="https://www.eurekashadow.xin/blog/LeetCode13#5%EF%B8%8F%E2%83%A3-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90" class="hash-link" aria-label="5️⃣ 复杂度分析的直接链接" title="5️⃣ 复杂度分析的直接链接">​</a></h2><ul>
<li>
<p>⏱️ 时间复杂度：O(n)，其中 n 是字符串长度，需要遍历一次字符串</p>
</li>
<li>
<p>💾 空间复杂度：O(1)，只使用了常数级别的额外空间</p>
</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6️⃣-注意事项">6️⃣ 注意事项<a href="https://www.eurekashadow.xin/blog/LeetCode13#6%EF%B8%8F%E2%83%A3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="6️⃣ 注意事项的直接链接" title="6️⃣ 注意事项的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-边界情况">🚩 边界情况：<a href="https://www.eurekashadow.xin/blog/LeetCode13#-%E8%BE%B9%E7%95%8C%E6%83%85%E5%86%B5" class="hash-link" aria-label="🚩 边界情况：的直接链接" title="🚩 边界情况：的直接链接">​</a></h3><ul>
<li>空字符串或NULL指针</li>
<li>只有一个字符的罗马数字</li>
<li>最后一个字符的处理</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-易错点">💥 易错点：<a href="https://www.eurekashadow.xin/blog/LeetCode13#-%E6%98%93%E9%94%99%E7%82%B9" class="hash-link" aria-label="💥 易错点：的直接链接" title="💥 易错点：的直接链接">​</a></h3><ul>
<li>忘记处理减法规则的特殊情况</li>
<li>数组越界访问下一个字符</li>
<li>没有正确处理字符串边界条件</li>
</ul></div></div></details>]]></content>
        <author>
            <name>Eureka X</name>
            <uri>https://github.com/EurekaShadow</uri>
        </author>
        <category label="字符串" term="字符串"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[接雨水]]></title>
        <id>https://www.eurekashadow.xin/blog/LeetCode42</id>
        <link href="https://www.eurekashadow.xin/blog/LeetCode42"/>
        <updated>2025-08-09T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[力扣面试经典——42题]]></summary>
        <content type="html"><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="力扣面试经典42题"><span class="B2_JnYG"><a href="https://leetcode.cn/problems/trapping-rain-water/description/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer" title="力扣">力扣面试经典——42题</a></span><a href="https://www.eurekashadow.xin/blog/LeetCode42#%E5%8A%9B%E6%89%A3%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B842%E9%A2%98" class="hash-link" aria-label="力扣面试经典42题的直接链接" title="力扣面试经典42题的直接链接">​</a></h3>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-参考代码">💡 参考代码：<a href="https://www.eurekashadow.xin/blog/LeetCode42#-%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81" class="hash-link" aria-label="💡 参考代码：的直接链接" title="💡 参考代码：的直接链接">​</a></h3>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @brief 计算柱状图中能够接住的雨水总量</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 使用双指针法解决接雨水问题。对于每个位置，能接住的雨水量取决于其左侧和右侧的最大高度中的较小值。</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 通过维护两个指针和对应的左右侧最大高度，从两端向中间遍历，累计可接雨水量。</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param height 柱子高度数组，每个元素代表一个宽度为1的柱子的高度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param heightSize 数组长度，表示柱子的数量</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return int 返回能够接住的雨水总量</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @example</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 输入: height = [0,1,0,2,1,0,1,3,2,1,2,1], heightSize = 12</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 输出: 6</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @example</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 输入: height = [4,2,0,3,2,5], heightSize = 6</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 输出: 9</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @complexity</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 时间复杂度: O(n) - 只需要遍历一次数组</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 空间复杂度: O(1) - 只使用了常数级别的额外空间</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">trap</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> height</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> heightSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 柱子数量少于3个时无法接住雨水</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">heightSize </span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> left </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">           </span><span class="token comment" style="color:#999988;font-style:italic">// 左指针，从数组起始位置开始</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> right </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> heightSize </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 右指针，从数组末尾位置开始</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> leftMax </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 记录左侧遍历过程中的最大高度</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> rightMax </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">       </span><span class="token comment" style="color:#999988;font-style:italic">// 记录右侧遍历过程中的最大高度</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">         </span><span class="token comment" style="color:#999988;font-style:italic">// 累计接住的雨水总量</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 双指针向中间移动，直到相遇</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">left </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> right</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 当左侧柱子高度小于右侧柱子高度时，处理左侧</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">height</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">left</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> height</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">right</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 如果当前柱子高度大于等于左侧最大高度，说明此位置接不到雨水</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">height</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">left</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> leftMax</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                leftMax </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> height</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">left</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token comment" style="color:#999988;font-style:italic">//更新左侧最大高度</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token comment" style="color:#999988;font-style:italic">// 否则可以接住雨水，累加到结果中</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                result </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> leftMax </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> height</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">left</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            left</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 左指针右移</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 当右侧柱子高度小于等于左侧柱子高度时，处理右侧</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 如果当前柱子高度大于等于右侧最大高度，说明此位置接不到雨水</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">height</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">right</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> rightMax</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                rightMax </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> height</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">right</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token comment" style="color:#999988;font-style:italic">//更新右侧最大高度</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token comment" style="color:#999988;font-style:italic">// 否则可以接住雨水，累加到结果中</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                result </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> rightMax </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> height</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">right</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            right</span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 右指针左移</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> result</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 返回接住的雨水总量</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-总结">📖 总结：<a href="https://www.eurekashadow.xin/blog/LeetCode42#-%E6%80%BB%E7%BB%93" class="hash-link" aria-label="📖 总结：的直接链接" title="📖 总结：的直接链接">​</a></h3>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>点击展开题目总结</summary><div><div class="collapsibleContent_i85q"><h1>🤔 接雨水</h1><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1️⃣-题目核心信息">1️⃣ 题目核心信息<a href="https://www.eurekashadow.xin/blog/LeetCode42#1%EF%B8%8F%E2%83%A3-%E9%A2%98%E7%9B%AE%E6%A0%B8%E5%BF%83%E4%BF%A1%E6%81%AF" class="hash-link" aria-label="1️⃣ 题目核心信息的直接链接" title="1️⃣ 题目核心信息的直接链接">​</a></h2><p>🎯 <strong>功能描述</strong>：给定n个非负整数表示每个宽度为1的柱子的高度图，计算按此排列的柱子下雨之后能接多少雨水。</p><p>📥 <strong>输入输出</strong>：</p><ul>
<li><strong>输入</strong>：<code>height</code> - 柱子高度数组，每个元素代表一个宽度为1的柱子的高度；<code>heightSize</code> - 数组长度</li>
<li><strong>输出</strong>：返回能够接住的雨水总量（整数）</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2️⃣-实现原理">2️⃣ 实现原理<a href="https://www.eurekashadow.xin/blog/LeetCode42#2%EF%B8%8F%E2%83%A3-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86" class="hash-link" aria-label="2️⃣ 实现原理的直接链接" title="2️⃣ 实现原理的直接链接">​</a></h2><p>💡 <strong>核心思路</strong>：使用双指针法，从数组两端向中间遍历，通过维护左右两侧的最大高度来计算每个位置能够接住的雨水量。</p><p>📋 <strong>实现步骤</strong>：</p><ol>
<li>初始化左右指针分别指向数组首尾，同时维护左侧最大高度和右侧最大高度</li>
<li>比较左右指针所指元素的大小，选择较小的一侧进行处理</li>
<li>如果当前元素大于等于该侧最大高度，则更新最大高度</li>
<li>如果当前元素小于该侧最大高度，则累加可接雨水量（最大高度减去当前高度）</li>
<li>移动处理过的指针，重复步骤2-4直到左右指针相遇</li>
</ol><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3️⃣-关键点解析">3️⃣ 关键点解析<a href="https://www.eurekashadow.xin/blog/LeetCode42#3%EF%B8%8F%E2%83%A3-%E5%85%B3%E9%94%AE%E7%82%B9%E8%A7%A3%E6%9E%90" class="hash-link" aria-label="3️⃣ 关键点解析的直接链接" title="3️⃣ 关键点解析的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-代码技巧">🎯 代码技巧<a href="https://www.eurekashadow.xin/blog/LeetCode42#-%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7" class="hash-link" aria-label="🎯 代码技巧的直接链接" title="🎯 代码技巧的直接链接">​</a></h3><ul>
<li>使用双指针从两端向中间逼近，减少空间复杂度</li>
<li>利用"短板效应"思想，总是处理较矮一侧的柱子</li>
<li>通过维护单侧最大值避免了预处理整个数组的需要</li>
<li>巧妙利用高度比较结果决定处理方向</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4️⃣-使用场景">4️⃣ 使用场景<a href="https://www.eurekashadow.xin/blog/LeetCode42#4%EF%B8%8F%E2%83%A3-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="4️⃣ 使用场景的直接链接" title="4️⃣ 使用场景的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-适用情况">✅ 适用情况：<a href="https://www.eurekashadow.xin/blog/LeetCode42#-%E9%80%82%E7%94%A8%E6%83%85%E5%86%B5" class="hash-link" aria-label="✅ 适用情况：的直接链接" title="✅ 适用情况：的直接链接">​</a></h3><ul>
<li>需要计算地形中能够存储的水量</li>
<li>处理类似"容器盛水"的几何问题</li>
<li>需要在数组中寻找"凹陷"区域的累积值</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-前提条件">⚠️ 前提条件：<a href="https://www.eurekashadow.xin/blog/LeetCode42#%EF%B8%8F-%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6" class="hash-link" aria-label="⚠️ 前提条件：的直接链接" title="⚠️ 前提条件：的直接链接">​</a></h3><ul>
<li>输入数组元素为非负整数</li>
<li>数组长度至少为3才能接住雨水</li>
<li>每个柱子宽度固定为1</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5️⃣-复杂度分析">5️⃣ 复杂度分析<a href="https://www.eurekashadow.xin/blog/LeetCode42#5%EF%B8%8F%E2%83%A3-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90" class="hash-link" aria-label="5️⃣ 复杂度分析的直接链接" title="5️⃣ 复杂度分析的直接链接">​</a></h2><ul>
<li>
<p>⏱️ 时间复杂度：O(n) - 只需要遍历一次数组，每个元素最多被访问一次</p>
</li>
<li>
<p>💾 空间复杂度：O(1) - 只使用了常数级别的额外空间，不依赖数组大小</p>
</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6️⃣-注意事项">6️⃣ 注意事项<a href="https://www.eurekashadow.xin/blog/LeetCode42#6%EF%B8%8F%E2%83%A3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="6️⃣ 注意事项的直接链接" title="6️⃣ 注意事项的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-边界情况">🚩 边界情况：<a href="https://www.eurekashadow.xin/blog/LeetCode42#-%E8%BE%B9%E7%95%8C%E6%83%85%E5%86%B5" class="hash-link" aria-label="🚩 边界情况：的直接链接" title="🚩 边界情况：的直接链接">​</a></h3><ul>
<li>数组长度小于3时无法接住雨水，直接返回0</li>
<li>数组为空或为NULL的情况</li>
<li>所有柱子高度相同的情况</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-易错点">💥 易错点：<a href="https://www.eurekashadow.xin/blog/LeetCode42#-%E6%98%93%E9%94%99%E7%82%B9" class="hash-link" aria-label="💥 易错点：的直接链接" title="💥 易错点：的直接链接">​</a></h3><ul>
<li>混淆左右最大高度的更新条件，应该是大于等于时更新</li>
<li>忘记在处理完一个位置后移动指针</li>
<li>错误地在两侧高度相等时的处理逻辑</li>
<li>没有正确理解雨水量计算公式：min(leftMax, rightMax) - currentHeight</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="7️⃣-补充解释">7️⃣ 补充解释<a href="https://www.eurekashadow.xin/blog/LeetCode42#7%EF%B8%8F%E2%83%A3-%E8%A1%A5%E5%85%85%E8%A7%A3%E9%87%8A" class="hash-link" aria-label="7️⃣ 补充解释的直接链接" title="7️⃣ 补充解释的直接链接">​</a></h2><p>正确的理解方式
让我用一个简单的例子来说明：</p><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">索引:     0   1   2   3   4   5   6</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">高度:     2   0   1   0   0   1   3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          L           *           R</span><br></span></code></pre></div></div><p>对于位置 * (索引3)，它的"两侧"是指：</p><ul>
<li>左侧：<code>height[0]</code>, <code>height[1]</code>, <code>height[2]</code> 中的最大值 = max(2,0,1) = 2</li>
<li>右侧：<code>height[4]</code>, <code>height[5]</code>, <code>height[6]</code> 中的最大值 = max(0,1,3) = 3
所以位置3能接的雨水 = min(2,3) - 0 = 2</li>
</ul><p>为什么比较<code>height[0]</code>和<code>height[11]</code>？</p><p>在双指针法中，我们比较 <code>height[left]</code> 和 <code>height[right]</code> 并不是为了计算这两个位置的雨水，而是为了确定处理方向。</p><p>这背后的逻辑是：</p><ul>
<li>
<p>如果 <code>height[left]</code> &lt; <code>height[right]</code>，那么我们可以确定左侧指针指向的位置的雨水量只由左侧最大值决定</p>
</li>
<li>
<p>这是因为右边有一个更高的墙，水面高度至少能达到左边的最大值</p>
</li>
</ul><p>举个更直观的例子</p><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">索引:  0  1  2  3  4  5  6  7</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">高度:  3  0  0  0  0  0  0  5</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       L                    R</span><br></span></code></pre></div></div><p>当我们比较 height[0]=3 和 height[7]=5 时：</p><ul>
<li>
<p>因为 3 &lt; 5，所以我们处理左侧位置(索引0)</p>
</li>
<li>
<p>但索引0是边界，不能接雨水</p>
</li>
<li>
<p>然后 left++，继续处理索引1的位置
对于索引1的位置：</p>
</li>
<li>
<p>它左边的最大值是3</p>
</li>
<li>
<p>它右边的最大值是5(注意：是整个右边的最大值，不只是相邻的)</p>
</li>
<li>
<p>所以它能接的雨水 = min(3,5) - 0 = 3</p>
</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="总结">总结<a href="https://www.eurekashadow.xin/blog/LeetCode42#%E6%80%BB%E7%BB%93" class="hash-link" aria-label="总结的直接链接" title="总结的直接链接">​</a></h3><ul>
<li>
<p>"两侧"指的是当前位置左边所有柱子中的最大值和右边所有柱子中的最大值</p>
</li>
<li>
<p>比较 height[left] 和 height[right] 是为了决定处理策略，而不是计算这两个位置的雨水</p>
</li>
<li>
<p>这是一个巧妙的优化，避免了需要预计算每个位置左右两侧最大值的步骤</p>
</li>
</ul><p><strong>有点懂了，但没完全懂⬇️</strong></p><p></p><p>我理解的 <code>左侧</code>、<code>右侧</code> 这里的左右侧并不是指某个位置的左右侧，而是左右侧的指针（即上面定义的 left 和 right），比如刚开始时 <code>height[left] &lt; height[right]</code> 的
话，表明此刻应该处理左侧指针指向的位置（而并非该位置的左侧）。如果该位置的值 height[left] = 2 ,leftMax = 1 ,即此刻该位置无法接到雨水，像下面这样：</p><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">      |⬅️//右侧这里相当有无形的“墙”，高度至少是 height[right]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    █ | //真正决定能够接多少雨水的是 leftMax</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  █ █ | //此处 leftMax 过小，可见无法接到雨水，于是要更新 leftMax = height[left]</span><br></span></code></pre></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="8️⃣-更多解法">8️⃣ 更多解法<a href="https://www.eurekashadow.xin/blog/LeetCode42#8%EF%B8%8F%E2%83%A3-%E6%9B%B4%E5%A4%9A%E8%A7%A3%E6%B3%95" class="hash-link" aria-label="8️⃣ 更多解法的直接链接" title="8️⃣ 更多解法的直接链接">​</a></h2><p>以下两种解法，我<strong>尚不理解</strong>，但也补充上，供日后参考、研究。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="动态规划">动态规划<a href="https://www.eurekashadow.xin/blog/LeetCode42#%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92" class="hash-link" aria-label="动态规划的直接链接" title="动态规划的直接链接">​</a></h3><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @brief 计算柱状图中能够接住的雨水总量</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 使用动态规划方法解决接雨水问题。通过预计算每个位置左侧和右侧的最大高度，</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 然后根据"短板效应"计算每个位置能够接住的雨水量。</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 核心公式：每个位置能接住的雨水量 = min(左侧最大高度, 右侧最大高度) - 当前位置高度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param height 柱子高度数组，每个元素代表一个宽度为1的柱子的高度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param heightSize 数组长度，表示柱子的数量</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return int 返回能够接住的雨水总量</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @example</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 输入: height = [0,1,0,2,1,0,1,3,2,1,2,1], heightSize = 12</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 输出: 6</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @example</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 输入: height = [4,2,0,3,2,5], heightSize = 6</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 输出: 9</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @complexity</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 时间复杂度: O(n) - 需要遍历数组三次</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 空间复杂度: O(n) - 需要额外的两个数组存储左侧和右侧最大高度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">trap</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> height</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> heightSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 边界条件：柱子数量少于3个时无法接住雨水</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">heightSize </span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 分配内存存储每个位置左侧的最大高度</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> leftMax </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token function" style="color:#d73a49">malloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> heightSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 初始化第一个位置的左侧最大高度为自身</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    leftMax</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> height</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 从左到右遍历，计算每个位置左侧的最大高度</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// leftMax[i] 表示 height[0..i] 中的最大值</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> heightSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        leftMax</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">leftMax</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> height</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> leftMax</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> height</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 分配内存存储每个位置右侧的最大高度</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> rightMax </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token function" style="color:#d73a49">malloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> heightSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 初始化最后一个位置的右侧最大高度为自身</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    rightMax</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">heightSize </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> height</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">heightSize </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 从右到左遍历，计算每个位置右侧的最大高度</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// rightMax[i] 表示 height[i..heightSize-1] 中的最大值</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> heightSize </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        rightMax</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">rightMax</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> height</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> rightMax</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> height</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 计算总的雨水量</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 遍历每个位置，计算该位置能接住的雨水量</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> heightSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 根据"短板效应"，水面高度由两侧最大高度的较小值决定</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> minHeight </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">leftMax</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> rightMax</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> leftMax</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> rightMax</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 只有当水面高度大于当前位置高度时才能接住雨水</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">minHeight </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> height</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 累加该位置的雨水量</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            result </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> minHeight </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> height</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 释放动态分配的内存</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">free</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">leftMax</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">free</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">rightMax</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 返回接住的雨水总量</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> result</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div><hr><h3 class="anchor anchorWithStickyNavbar_LWe7" id="单调栈">单调栈<a href="https://www.eurekashadow.xin/blog/LeetCode42#%E5%8D%95%E8%B0%83%E6%A0%88" class="hash-link" aria-label="单调栈的直接链接" title="单调栈的直接链接">​</a></h3><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @brief 计算柱状图中能够接住的雨水总量</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 使用单调栈方法解决接雨水问题。通过维护一个单调递减的栈来追踪可能形成凹陷的柱子，</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 当遇到较高的柱子时，计算由当前柱子、栈顶柱子和栈中下一个柱子形成的凹陷区域的雨水量。</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param height 柱子高度数组，每个元素代表一个宽度为1的柱子的高度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param heightSize 数组长度，表示柱子的数量</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return int 返回能够接住的雨水总量</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @example</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 输入: height = [0,1,0,2,1,0,1,3,2,1,2,1], heightSize = 12</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 输出: 6</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @example</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 输入: height = [4,2,0,3,2,5], heightSize = 6</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 输出: 9</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @complexity</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 时间复杂度: O(n) - 每个元素最多入栈和出栈一次</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 空间复杂度: O(n) - 最坏情况下栈中存储所有元素</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">trap</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> height</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> heightSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 边界条件：柱子数量少于3个时无法接住雨水</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">heightSize </span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 创建栈用于存储柱子的索引</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> stack </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token function" style="color:#d73a49">malloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> heightSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> top </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 栈顶指针，-1表示空栈</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 累计接住的雨水总量</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 从左到右遍历每个柱子</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> heightSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 当栈不为空且当前柱子高度大于栈顶柱子高度时</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">top </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> height</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> height</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">stack</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">top</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 弹出栈顶元素作为凹陷的底部</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> bottom </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> stack</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">top</span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 如果栈为空，说明没有左边界，无法形成凹陷</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">top </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 计算凹陷区域的水平距离（宽度）</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 距离 = 右边界索引 - 左边界索引 - 1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> distance </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> stack</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">top</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 计算凹陷区域的高度</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 高度 = min(左边界高度, 右边界高度) - 底部高度</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> boundedHeight </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">height</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> height</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">stack</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">top</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> height</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> height</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">stack</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">top</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> height</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">bottom</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 累加雨水量 = 宽度 × 高度</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            result </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> distance </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> boundedHeight</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 将当前柱子索引入栈</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        stack</span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">++</span><span class="token plain">top</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 释放动态分配的栈内存</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">free</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">stack</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 返回接住的雨水总量</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> result</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div></div></div></details>]]></content>
        <author>
            <name>Eureka X</name>
            <uri>https://github.com/EurekaShadow</uri>
        </author>
        <category label="数组" term="数组"/>
        <category label="双指针" term="双指针"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[分发糖果]]></title>
        <id>https://www.eurekashadow.xin/blog/LeetCode135</id>
        <link href="https://www.eurekashadow.xin/blog/LeetCode135"/>
        <updated>2025-08-08T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[力扣面试经典——135题]]></summary>
        <content type="html"><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="力扣面试经典135题"><span class="B2_JnYG"><a href="https://leetcode.cn/problems/candy/description/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer" title="力扣">力扣面试经典——135题</a></span><a href="https://www.eurekashadow.xin/blog/LeetCode135#%E5%8A%9B%E6%89%A3%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B8135%E9%A2%98" class="hash-link" aria-label="力扣面试经典135题的直接链接" title="力扣面试经典135题的直接链接">​</a></h3>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-参考代码">💡 参考代码：<a href="https://www.eurekashadow.xin/blog/LeetCode135#-%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81" class="hash-link" aria-label="💡 参考代码：的直接链接" title="💡 参考代码：的直接链接">​</a></h3>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @brief 计算分发糖果的最少数量</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 根据孩子们的评分分配糖果，满足以下条件：</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 1. 每个孩子至少分配到1个糖果</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 2. 相邻两个孩子中，评分更高的孩子会获得更多的糖果</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param ratings 孩子们的评分数组</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param ratingsSize 评分数组的长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return int 需要准备的最少糖果数目</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @details 算法采用两次遍历策略：</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          1. 从左到右遍历：确保右边评分高的孩子比左边相邻孩子获得更多糖果</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          2. 从右到左遍历：确保左边评分高的孩子比右边相邻孩子获得更多糖果</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          时间复杂度：O(n)，空间复杂度：O(n)</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @example </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          输入：ratings = [1,0,2]</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          输出：5</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          解释：分别给三个孩子分发2、1、2颗糖果</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @example</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          输入：ratings = [1,2,2]</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          输出：4</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          解释：分别给三个孩子分发1、2、1颗糖果</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">candy</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> ratings</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> ratingsSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ratingsSize </span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> ratingsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 初始化每个孩子至少1个糖果</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> candies </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token function" style="color:#d73a49">calloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ratingsSize</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> ratingsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        candies</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 从左到右遍历：确保右边评分高的孩子比左边相邻的孩子获得更多糖果</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> ratingsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ratings</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> ratings</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            candies</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> candies</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 从右到左遍历：确保左边评分高的孩子比右边相邻的孩子获得更多糖果</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ratingsSize </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ratings</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> ratings</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            candies</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">candies</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> candies</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> candies</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> candies</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 计算总糖果数</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> total </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> ratingsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        total </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> candies</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">free</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">candies</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> total</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-总结">📖 总结：<a href="https://www.eurekashadow.xin/blog/LeetCode135#-%E6%80%BB%E7%BB%93" class="hash-link" aria-label="📖 总结：的直接链接" title="📖 总结：的直接链接">​</a></h3>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>点击展开题目总结</summary><div><div class="collapsibleContent_i85q"><h1>🤔 分发糖果</h1><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1️⃣-题目核心信息">1️⃣ 题目核心信息<a href="https://www.eurekashadow.xin/blog/LeetCode135#1%EF%B8%8F%E2%83%A3-%E9%A2%98%E7%9B%AE%E6%A0%B8%E5%BF%83%E4%BF%A1%E6%81%AF" class="hash-link" aria-label="1️⃣ 题目核心信息的直接链接" title="1️⃣ 题目核心信息的直接链接">​</a></h2><p>🎯 <strong>功能描述</strong>：根据孩子们的评分分配糖果，确保每个孩子至少获得1颗糖果，且评分更高的孩子比相邻孩子获得更多糖果，求最少需要的糖果总数。</p><p>📥 <strong>输入输出</strong>：</p><ul>
<li><strong>输入</strong>：<code>int* ratings</code> - 孩子们的评分数组，<code>int ratingsSize</code> - 数组长度</li>
<li><strong>输出</strong>：<code>int</code> - 需要准备的最少糖果数目</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2️⃣-实现原理">2️⃣ 实现原理<a href="https://www.eurekashadow.xin/blog/LeetCode135#2%EF%B8%8F%E2%83%A3-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86" class="hash-link" aria-label="2️⃣ 实现原理的直接链接" title="2️⃣ 实现原理的直接链接">​</a></h2><p>💡 <strong>核心思路</strong>：采用两次遍历的贪心算法，分别处理左右两个方向的约束关系，确保满足所有相邻比较条件。</p><p>📋 <strong>实现步骤</strong>：</p><ol>
<li>初始化每个孩子分配1颗糖果</li>
<li>从左到右遍历，确保右边评分高的孩子比左边相邻孩子获得更多糖果</li>
<li>从右到左遍历，确保左边评分高的孩子比右边相邻孩子获得更多糖果</li>
<li>累加所有孩子的糖果数作为结果返回</li>
</ol><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3️⃣-关键点解析">3️⃣ 关键点解析<a href="https://www.eurekashadow.xin/blog/LeetCode135#3%EF%B8%8F%E2%83%A3-%E5%85%B3%E9%94%AE%E7%82%B9%E8%A7%A3%E6%9E%90" class="hash-link" aria-label="3️⃣ 关键点解析的直接链接" title="3️⃣ 关键点解析的直接链接">​</a></h2><p>原始思路是单向遍历，但存在问题：只考虑了单方向的约束关系，忽略了反向也可能影响糖果分配。最优解通过两次遍历，分别处理左右两个方向的约束，确保结果正确。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-代码技巧">🎯 代码技巧<a href="https://www.eurekashadow.xin/blog/LeetCode135#-%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7" class="hash-link" aria-label="🎯 代码技巧的直接链接" title="🎯 代码技巧的直接链接">​</a></h3><ul>
<li>使用 <code>calloc</code> 初始化数组，同时分配内存和置零</li>
<li>两次遍历分别处理不同方向的约束条件</li>
<li>使用三元运算符 <code>? :</code> 简洁地实现 <code>max</code> 操作</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4️⃣-使用场景">4️⃣ 使用场景<a href="https://www.eurekashadow.xin/blog/LeetCode135#4%EF%B8%8F%E2%83%A3-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="4️⃣ 使用场景的直接链接" title="4️⃣ 使用场景的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-适用情况">✅ 适用情况：<a href="https://www.eurekashadow.xin/blog/LeetCode135#-%E9%80%82%E7%94%A8%E6%83%85%E5%86%B5" class="hash-link" aria-label="✅ 适用情况：的直接链接" title="✅ 适用情况：的直接链接">​</a></h3><ul>
<li>需要满足双向相邻约束的优化问题</li>
<li>资源分配需要考虑左右邻居关系的场景</li>
<li>贪心算法中需要多轮约束满足的问题</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-前提条件">⚠️ 前提条件：<a href="https://www.eurekashadow.xin/blog/LeetCode135#%EF%B8%8F-%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6" class="hash-link" aria-label="⚠️ 前提条件：的直接链接" title="⚠️ 前提条件：的直接链接">​</a></h3><ul>
<li>输入数组不为空</li>
<li>评分值为非负整数</li>
<li>需要满足题目规定的两个分配条件</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5️⃣-复杂度分析">5️⃣ 复杂度分析<a href="https://www.eurekashadow.xin/blog/LeetCode135#5%EF%B8%8F%E2%83%A3-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90" class="hash-link" aria-label="5️⃣ 复杂度分析的直接链接" title="5️⃣ 复杂度分析的直接链接">​</a></h2><ul>
<li>
<p>⏱️ 时间复杂度：O(n) - 需要三次遍历数组（初始化一次，左右遍历各一次）</p>
</li>
<li>
<p>💾 空间复杂度：O(n) - 需要额外数组存储每个孩子的糖果数</p>
</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6️⃣-注意事项">6️⃣ 注意事项<a href="https://www.eurekashadow.xin/blog/LeetCode135#6%EF%B8%8F%E2%83%A3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="6️⃣ 注意事项的直接链接" title="6️⃣ 注意事项的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-边界情况">🚩 边界情况：<a href="https://www.eurekashadow.xin/blog/LeetCode135#-%E8%BE%B9%E7%95%8C%E6%83%85%E5%86%B5" class="hash-link" aria-label="🚩 边界情况：的直接链接" title="🚩 边界情况：的直接链接">​</a></h3><ul>
<li>空数组或只有一个孩子的情况</li>
<li>所有孩子评分相同的情况</li>
<li>评分严格递增或递减的情况</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-易错点">💥 易错点：<a href="https://www.eurekashadow.xin/blog/LeetCode135#-%E6%98%93%E9%94%99%E7%82%B9" class="hash-link" aria-label="💥 易错点：的直接链接" title="💥 易错点：的直接链接">​</a></h3><ul>
<li>只进行单向遍历，忽略反向约束关系</li>
<li>错误使用 <code>memset</code> 给 int 数组赋值为1</li>
<li>在更新糖果数时没有取最大值，导致不满足约束条件</li>
</ul></div></div></details>]]></content>
        <author>
            <name>Eureka X</name>
            <uri>https://github.com/EurekaShadow</uri>
        </author>
        <category label="数组" term="数组"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[加油站]]></title>
        <id>https://www.eurekashadow.xin/blog/LeetCode134</id>
        <link href="https://www.eurekashadow.xin/blog/LeetCode134"/>
        <updated>2025-08-07T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[力扣面试经典——134题]]></summary>
        <content type="html"><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="力扣面试经典134题"><span class="B2_JnYG"><a href="https://leetcode.cn/problems/gas-station/description/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer" title="力扣">力扣面试经典——134题</a></span><a href="https://www.eurekashadow.xin/blog/LeetCode134#%E5%8A%9B%E6%89%A3%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B8134%E9%A2%98" class="hash-link" aria-label="力扣面试经典134题的直接链接" title="力扣面试经典134题的直接链接">​</a></h3>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-参考代码">💡 参考代码：<a href="https://www.eurekashadow.xin/blog/LeetCode134#-%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81" class="hash-link" aria-label="💡 参考代码：的直接链接" title="💡 参考代码：的直接链接">​</a></h3>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 解决加油站环路问题</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param gas 每个加油站的汽油量数组</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param gasSize gas数组的长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param cost 从每个加油站到下一加油站的消耗数组</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param costSize cost数组的长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 能够完成环路的起始加油站索引，如果不存在则返回-1</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">canCompleteCircuit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> gas</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> gasSize</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> cost</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> costSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> totalGas </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// 总汽油量</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> totalCost </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">// 总消耗量</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> currentGas </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 当前油量</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> start </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">         </span><span class="token comment" style="color:#999988;font-style:italic">// 起始加油站索引</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 遍历所有加油站</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> gasSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        totalGas </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> gas</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        totalCost </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> cost</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        currentGas </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> gas</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> cost</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 如果当前油量为负，说明无法从当前起点到达加油站i+1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 因此需要将起点设为i+1，并重新开始计算</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">currentGas </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">         </span><span class="token comment" style="color:#999988;font-style:italic">//这两句看起来简单，但其实很巧妙，也不是那么好理解的</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            start </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            currentGas </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/*</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">	 * 如果循环结束后一个起始位置没找到，即 currentGas 始终小于 0</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">	 * 那表明 totalGas &lt; totalCost，通过下面的 if 判断能够返回正确结果；</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">	 * 如果找出一个起始位置，但是后面的 if 判断过不去，也能返回正确结果</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">	 * 所以如果能够形成环路，那么必须是 (有起始位置) &amp;&amp; (totalGas &gt;= totalCost) </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">	 * 至于为什么 totalGas &gt;= totalCost 见后文 “补充说明”</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">	 */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 如果总汽油量小于总消耗量，无法完成环路</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">totalGas </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> totalCost</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> start</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-总结">📖 总结：<a href="https://www.eurekashadow.xin/blog/LeetCode134#-%E6%80%BB%E7%BB%93" class="hash-link" aria-label="📖 总结：的直接链接" title="📖 总结：的直接链接">​</a></h3>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>点击展开题目总结</summary><div><div class="collapsibleContent_i85q"><h1>🤔 加油站</h1><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1️⃣-题目核心信息">1️⃣ 题目核心信息<a href="https://www.eurekashadow.xin/blog/LeetCode134#1%EF%B8%8F%E2%83%A3-%E9%A2%98%E7%9B%AE%E6%A0%B8%E5%BF%83%E4%BF%A1%E6%81%AF" class="hash-link" aria-label="1️⃣ 题目核心信息的直接链接" title="1️⃣ 题目核心信息的直接链接">​</a></h2><p>🎯 <strong>功能描述</strong>：在一条环路上有n个加油站，每个加油站有一定量的汽油，从一个加油站到下一个需要消耗一定汽油。找出能够完成一圈的起始加油站索引。</p><p>📥 <strong>输入输出</strong>：</p><ul>
<li><strong>输入</strong>：int* gas（每个加油站的汽油量数组）, int gasSize（gas数组长度）, int* cost（每段路程的消耗量数组）, int costSize（cost数组长度）</li>
<li><strong>输出</strong>：能够完成环路的起始加油站索引，如果不存在则返回-1</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2️⃣-实现原理">2️⃣ 实现原理<a href="https://www.eurekashadow.xin/blog/LeetCode134#2%EF%B8%8F%E2%83%A3-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86" class="hash-link" aria-label="2️⃣ 实现原理的直接链接" title="2️⃣ 实现原理的直接链接">​</a></h2><p>💡 <strong>核心思路</strong>：使用贪心算法，通过一次遍历找出起始点。如果从某个起点无法到达某一站点，则起点到终点之间的任何点都不能作为有效起点。</p><p>📋 <strong>实现步骤</strong>：</p><ol>
<li>遍历所有加油站，累计总汽油量和总消耗量</li>
<li>同时模拟从当前起点出发的行驶过程</li>
<li>如果在某点油量为负，更新起点为该点的下一个位置</li>
<li>最后比较总汽油量和总消耗量，判断是否能完成环路</li>
</ol><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3️⃣-关键点解析">3️⃣ 关键点解析<a href="https://www.eurekashadow.xin/blog/LeetCode134#3%EF%B8%8F%E2%83%A3-%E5%85%B3%E9%94%AE%E7%82%B9%E8%A7%A3%E6%9E%90" class="hash-link" aria-label="3️⃣ 关键点解析的直接链接" title="3️⃣ 关键点解析的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-代码技巧">🎯 代码技巧<a href="https://www.eurekashadow.xin/blog/LeetCode134#-%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7" class="hash-link" aria-label="🎯 代码技巧的直接链接" title="🎯 代码技巧的直接链接">​</a></h3><ul>
<li>贪心策略：一旦发现无法从当前起点到达某点，直接跳过中间所有点</li>
<li>一趟遍历：同时计算总量和寻找起点，提高效率</li>
<li>局部最优推全局最优：通过局部无法通行的路段排除多个候选起点</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4️⃣-使用场景">4️⃣ 使用场景<a href="https://www.eurekashadow.xin/blog/LeetCode134#4%EF%B8%8F%E2%83%A3-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="4️⃣ 使用场景的直接链接" title="4️⃣ 使用场景的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-适用情况">✅ 适用情况：<a href="https://www.eurekashadow.xin/blog/LeetCode134#-%E9%80%82%E7%94%A8%E6%83%85%E5%86%B5" class="hash-link" aria-label="✅ 适用情况：的直接链接" title="✅ 适用情况：的直接链接">​</a></h3><ul>
<li>环路路径规划问题</li>
<li>资源分配与消耗平衡问题</li>
<li>寻找循环数组中的起始位置问题</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-前提条件">⚠️ 前提条件：<a href="https://www.eurekashadow.xin/blog/LeetCode134#%EF%B8%8F-%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6" class="hash-link" aria-label="⚠️ 前提条件：的直接链接" title="⚠️ 前提条件：的直接链接">​</a></h3><ul>
<li>加油站数量与路程数量相等</li>
<li>输入数组不为空</li>
<li>汽油量和消耗量非负</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5️⃣-复杂度分析">5️⃣ 复杂度分析<a href="https://www.eurekashadow.xin/blog/LeetCode134#5%EF%B8%8F%E2%83%A3-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90" class="hash-link" aria-label="5️⃣ 复杂度分析的直接链接" title="5️⃣ 复杂度分析的直接链接">​</a></h2><ul>
<li>
<p>⏱️ 时间复杂度：O(n)，只需要遍历一次数组</p>
</li>
<li>
<p>💾 空间复杂度：O(1)，只使用了常数个额外变量</p>
</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6️⃣-注意事项">6️⃣ 注意事项<a href="https://www.eurekashadow.xin/blog/LeetCode134#6%EF%B8%8F%E2%83%A3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="6️⃣ 注意事项的直接链接" title="6️⃣ 注意事项的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-边界情况">🚩 边界情况：<a href="https://www.eurekashadow.xin/blog/LeetCode134#-%E8%BE%B9%E7%95%8C%E6%83%85%E5%86%B5" class="hash-link" aria-label="🚩 边界情况：的直接链接" title="🚩 边界情况：的直接链接">​</a></h3><ul>
<li>只有一个加油站的情况</li>
<li>所有加油站汽油量都小于消耗量</li>
<li>起点在数组最后一个位置的情况</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-易错点">💥 易错点：<a href="https://www.eurekashadow.xin/blog/LeetCode134#-%E6%98%93%E9%94%99%E7%82%B9" class="hash-link" aria-label="💥 易错点：的直接链接" title="💥 易错点：的直接链接">​</a></h3><ul>
<li>忘记检查总汽油量是否大于等于总消耗量</li>
<li>起点更新后未重置当前油量</li>
<li>数组索引越界问题</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="7⃣-补充说明">7⃣ 补充说明<a href="https://www.eurekashadow.xin/blog/LeetCode134#7%E2%83%A3-%E8%A1%A5%E5%85%85%E8%AF%B4%E6%98%8E" class="hash-link" aria-label="7⃣ 补充说明的直接链接" title="7⃣ 补充说明的直接链接">​</a></h2><p></p><p></p></div></div></details>
<p>这个题目说实话仍然不太理解，有点<strong>迷迷糊糊的</strong>。</p>
<p>现在让我想不通的还是 <code>currentGas += gas[i] - cost[i];</code> 这句</p>
<p>或许 <code>currentGas = currentGas + gas[i] - cost[i]</code> 这样好理解一点？ <code>currentGas + gas[i]</code> 相当于 <code>前面剩余的汽油 + 到达编号 i 加油站获得的汽油</code>
而 <code>cost[i]</code> 表示为了到达编号 i 加油站 <code>所消耗的汽油</code></p>]]></content>
        <author>
            <name>Eureka X</name>
            <uri>https://github.com/EurekaShadow</uri>
        </author>
        <category label="数组" term="数组"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[除自身以外数组的乘积]]></title>
        <id>https://www.eurekashadow.xin/blog/LeetCode238</id>
        <link href="https://www.eurekashadow.xin/blog/LeetCode238"/>
        <updated>2025-08-06T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[力扣面试经典——238题]]></summary>
        <content type="html"><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="力扣面试经典238题"><span class="B2_JnYG"><a href="https://leetcode.cn/problems/product-of-array-except-self/description/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer" title="力扣">力扣面试经典——238题</a></span><a href="https://www.eurekashadow.xin/blog/LeetCode238#%E5%8A%9B%E6%89%A3%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B8238%E9%A2%98" class="hash-link" aria-label="力扣面试经典238题的直接链接" title="力扣面试经典238题的直接链接">​</a></h3>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-参考代码">💡 参考代码：<a href="https://www.eurekashadow.xin/blog/LeetCode238#-%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81" class="hash-link" aria-label="💡 参考代码：的直接链接" title="💡 参考代码：的直接链接">​</a></h3>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 计算数组中除当前元素外其余各元素的乘积</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param nums       输入的整数数组</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param numsSize   输入数组的大小</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param returnSize 输出数组的大小，由函数设置</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return           返回结果数组，其中每个元素是除对应位置外其余元素的乘积</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * Note: The returned array must be malloced, assume caller calls free().</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">productExceptSelf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> returnSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 分配结果数组空间</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> answer </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token function" style="color:#d73a49">malloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">numsSize </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">returnSize </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 第一次遍历：计算每个元素左侧所有元素的乘积</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// answer[i] 存储 nums[0] 到 nums[i-1] 的乘积</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    answer</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        answer</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> answer</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 第二次遍历：从右向左遍历，将右侧元素乘积与左侧乘积相乘</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// rightProduct 记录当前元素右侧所有元素的乘积</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> rightProduct </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> numsSize </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        answer</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> answer</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> rightProduct</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        rightProduct </span><span class="token operator" style="color:#393A34">*=</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> answer</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-总结">📖 总结：<a href="https://www.eurekashadow.xin/blog/LeetCode238#-%E6%80%BB%E7%BB%93" class="hash-link" aria-label="📖 总结：的直接链接" title="📖 总结：的直接链接">​</a></h3>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>点击展开题目总结</summary><div><div class="collapsibleContent_i85q"><h1>🤔 除自身以外数组的乘积</h1><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1️⃣-题目核心信息">1️⃣ 题目核心信息<a href="https://www.eurekashadow.xin/blog/LeetCode238#1%EF%B8%8F%E2%83%A3-%E9%A2%98%E7%9B%AE%E6%A0%B8%E5%BF%83%E4%BF%A1%E6%81%AF" class="hash-link" aria-label="1️⃣ 题目核心信息的直接链接" title="1️⃣ 题目核心信息的直接链接">​</a></h2><p>🎯 <strong>功能描述</strong>：计算数组中除当前元素外其余各元素的乘积，不使用除法并在O(n)时间复杂度内完成</p><p>📥 <strong>输入输出</strong>：</p><ul>
<li><strong>输入</strong>：<code>nums</code>整数数组，<code>numsSize</code>数组长度</li>
<li><strong>输出</strong>：返回新数组，其中每个元素是除对应位置外其余元素的乘积</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2️⃣-实现原理">2️⃣ 实现原理<a href="https://www.eurekashadow.xin/blog/LeetCode238#2%EF%B8%8F%E2%83%A3-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86" class="hash-link" aria-label="2️⃣ 实现原理的直接链接" title="2️⃣ 实现原理的直接链接">​</a></h2><p>💡 <strong>核心思路</strong>：利用前缀乘积和后缀乘积的思想，将每个位置的结果分解为左侧元素乘积与右侧元素乘积的乘积</p><p>📋 <strong>实现步骤</strong>：</p><ol>
<li>第一次遍历从左到右，计算每个位置左侧所有元素的乘积并存储</li>
<li>初始化右侧乘积变量为1</li>
<li>第二次遍历从右到左，将每个位置的左侧乘积与右侧乘积相乘</li>
<li>在遍历过程中动态更新右侧乘积值</li>
</ol><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3️⃣-关键点解析">3️⃣ 关键点解析<a href="https://www.eurekashadow.xin/blog/LeetCode238#3%EF%B8%8F%E2%83%A3-%E5%85%B3%E9%94%AE%E7%82%B9%E8%A7%A3%E6%9E%90" class="hash-link" aria-label="3️⃣ 关键点解析的直接链接" title="3️⃣ 关键点解析的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-代码技巧">🎯 代码技巧<a href="https://www.eurekashadow.xin/blog/LeetCode238#-%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7" class="hash-link" aria-label="🎯 代码技巧的直接链接" title="🎯 代码技巧的直接链接">​</a></h3><ul>
<li>利用输出数组存储左侧乘积，节省额外空间</li>
<li>使用单变量跟踪右侧乘积，避免额外数组存储</li>
<li>两次单层循环实现O(n)时间复杂度</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4️⃣-使用场景">4️⃣ 使用场景<a href="https://www.eurekashadow.xin/blog/LeetCode238#4%EF%B8%8F%E2%83%A3-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="4️⃣ 使用场景的直接链接" title="4️⃣ 使用场景的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-适用情况">✅ 适用情况：<a href="https://www.eurekashadow.xin/blog/LeetCode238#-%E9%80%82%E7%94%A8%E6%83%85%E5%86%B5" class="hash-link" aria-label="✅ 适用情况：的直接链接" title="✅ 适用情况：的直接链接">​</a></h3><ul>
<li>需要计算数组元素间乘积关系的场景</li>
<li>不能使用除法运算的情况</li>
<li>对空间复杂度有严格要求的场景</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-前提条件">⚠️ 前提条件：<a href="https://www.eurekashadow.xin/blog/LeetCode238#%EF%B8%8F-%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6" class="hash-link" aria-label="⚠️ 前提条件：的直接链接" title="⚠️ 前提条件：的直接链接">​</a></h3><ul>
<li>输入数组至少包含两个元素</li>
<li>数组中元素的前缀和后缀乘积在32位整数范围内</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5️⃣-复杂度分析">5️⃣ 复杂度分析<a href="https://www.eurekashadow.xin/blog/LeetCode238#5%EF%B8%8F%E2%83%A3-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90" class="hash-link" aria-label="5️⃣ 复杂度分析的直接链接" title="5️⃣ 复杂度分析的直接链接">​</a></h2><ul>
<li>
<p>⏱️ 时间复杂度：O(n)，需要遍历数组两次</p>
</li>
<li>
<p>💾 空间复杂度：O(1)，不考虑输出数组的情况下只使用常数额外空间</p>
</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6️⃣-注意事项">6️⃣ 注意事项<a href="https://www.eurekashadow.xin/blog/LeetCode238#6%EF%B8%8F%E2%83%A3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="6️⃣ 注意事项的直接链接" title="6️⃣ 注意事项的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-边界情况">🚩 边界情况：<a href="https://www.eurekashadow.xin/blog/LeetCode238#-%E8%BE%B9%E7%95%8C%E6%83%85%E5%86%B5" class="hash-link" aria-label="🚩 边界情况：的直接链接" title="🚩 边界情况：的直接链接">​</a></h3><ul>
<li>数组中包含0元素的情况</li>
<li>数组长度为2的最小情况</li>
<li>正负数混合的情况</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-易错点">💥 易错点：<a href="https://www.eurekashadow.xin/blog/LeetCode238#-%E6%98%93%E9%94%99%E7%82%B9" class="hash-link" aria-label="💥 易错点：的直接链接" title="💥 易错点：的直接链接">​</a></h3><ul>
<li>忘记设置returnSize参数</li>
<li>混淆左侧乘积和右侧乘积的计算方向</li>
<li>内存分配后忘记检查是否成功</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="7️⃣-补充说明">7️⃣ 补充说明<a href="https://www.eurekashadow.xin/blog/LeetCode238#7%EF%B8%8F%E2%83%A3-%E8%A1%A5%E5%85%85%E8%AF%B4%E6%98%8E" class="hash-link" aria-label="7️⃣ 补充说明的直接链接" title="7️⃣ 补充说明的直接链接">​</a></h2><p><strong>算法原理解析</strong></p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">productExceptSelf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> returnSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 分配结果数组空间</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> answer </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token function" style="color:#d73a49">malloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">numsSize </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">returnSize </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 第一次遍历：计算每个元素左侧所有元素的乘积</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// answer[i] 存储 nums[0] 到 nums[i-1] 的乘积</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    answer</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        answer</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> answer</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 第二次遍历：从右向左遍历，将右侧元素乘积与左侧乘积相乘</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// rightProduct 记录当前元素右侧所有元素的乘积</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> rightProduct </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> numsSize </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        answer</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> answer</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> rightProduct</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        rightProduct </span><span class="token operator" style="color:#393A34">*=</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> answer</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div><p>这个算法的巧妙之处在于分而治之的思想，让我用更直观的方式来解释：</p><p><strong>核心思想</strong></p><p>对于数组中任意位置 i，我们要求的结果是：</p><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">result[i] = (nums[0] × nums[1] × ... × nums[i-1]) × (nums[i+1] × ... × nums[n-1])</span><br></span></code></pre></div></div><p>也就是：<strong>左侧所有元素的乘积</strong> × <strong>右侧所有元素的乘积</strong></p><p><strong>为什么这样做是正确的？</strong></p><p><strong>第一次遍历：计算左侧乘积</strong></p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">answer</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> × nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> × </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"> × nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><br></span></code></pre></div></div><p>对于 <code>nums = [1, 2, 3, 4]</code>：</p><ul>
<li><code>answer[0] = 1</code> (左侧无元素)</li>
<li><code>answer[1] = 1</code> (左侧: nums[0] = 1)</li>
<li><code>answer[2] = 1×2 = 2</code> (左侧: nums[0]×nums[1] = 1×2)</li>
<li><code>answer[3] = 1×2×3 = 6</code> (左侧: nums[0]×nums[1]×nums[2] = 1×2×3)</li>
</ul><p><strong>第二次遍历：乘以右侧乘积</strong></p><p>使用 <code>rightProduct</code> 变量从右往左累积右侧元素乘积：</p><ul>
<li>当处理 <code>answer[3]</code> 时：右侧无元素，<code>rightProduct = 1</code>
<ul>
<li><code>answer[3] = 6 × 1 = 6</code></li>
</ul>
</li>
<li>当处理 <code>answer[2]</code> 时：右侧只有 nums[3] = 4，<code>rightProduct = 4</code>
<ul>
<li><code>answer[2] = 2 × 4 = 8</code></li>
</ul>
</li>
<li>当处理 <code>answer[1]</code> 时：右侧是 nums[2]×nums[3] = 3×4 = 12，<code>rightProduct = 12</code>
<ul>
<li><code>answer[1] = 1 × 12 = 12</code></li>
</ul>
</li>
<li>当处理 <code>answer[0]</code> 时：右侧是 nums[1]×nums[2]×nums[3] = 2×3×4 = 24，<code>rightProduct = 24</code>
<ul>
<li><code>answer[0] = 1 × 24 = 24</code></li>
</ul>
</li>
</ul><p><strong>关键洞察</strong></p><p>这个算法的精妙在于：</p><ol>
<li><strong>空间复用</strong>：用结果数组 <code>answer</code> 先存储左侧乘积，避免额外空间</li>
<li><strong>累积计算</strong>：<code>rightProduct</code> 在遍历过程中逐步累积右侧乘积</li>
<li><strong>时机把握</strong>：在更新 <code>rightProduct</code> 之前先完成当前元素的计算</li>
</ol><p><strong>数学验证</strong></p><p>对于任意位置 i：</p><ul>
<li>第一次遍历后：<code>answer[i] = 左侧乘积</code></li>
<li>第二次遍历时：<code>answer[i] = answer[i] × rightProduct = 左侧乘积 × 右侧乘积</code></li>
</ul><p>这就是所求的结果！</p></div></div></details>]]></content>
        <author>
            <name>Eureka X</name>
            <uri>https://github.com/EurekaShadow</uri>
        </author>
        <category label="数组" term="数组"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[O(1)时间插入、删除和获取随机元素（补充解释）]]></title>
        <id>https://www.eurekashadow.xin/blog/LeetCode380plus</id>
        <link href="https://www.eurekashadow.xin/blog/LeetCode380plus"/>
        <updated>2025-08-06T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[力扣面试经典——380题]]></summary>
        <content type="html"><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="力扣面试经典380题"><span class="B2_JnYG"><a href="https://leetcode.cn/problems/insert-delete-getrandom-o1/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer" title="力扣">力扣面试经典——380题</a></span><a href="https://www.eurekashadow.xin/blog/LeetCode380plus#%E5%8A%9B%E6%89%A3%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B8380%E9%A2%98" class="hash-link" aria-label="力扣面试经典380题的直接链接" title="力扣面试经典380题的直接链接">​</a></h3>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>📘 关于此题示例解释</summary><div><div class="collapsibleContent_i85q"><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-输入格式说明">📥 输入格式说明<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#-%E8%BE%93%E5%85%A5%E6%A0%BC%E5%BC%8F%E8%AF%B4%E6%98%8E" class="hash-link" aria-label="📥 输入格式说明的直接链接" title="📥 输入格式说明的直接链接">​</a></h3><p>输入分为两行：</p><ul>
<li><strong>第一行</strong>：<code>["RandomizedSet", "insert", "remove", "insert", "getRandom", "remove", "insert", "getRandom"]</code>
<ul>
<li>这是要执行的操作序列</li>
</ul>
</li>
<li><strong>第二行</strong>：<code>[[], [1], [2], [2], [], [1], [2], []]</code>
<ul>
<li>这是每个操作对应的参数</li>
</ul>
</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="-逐步执行过程">🔄 逐步执行过程<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#-%E9%80%90%E6%AD%A5%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B" class="hash-link" aria-label="🔄 逐步执行过程的直接链接" title="🔄 逐步执行过程的直接链接">​</a></h2><p>让我按照时间顺序来解释每一步发生了什么：</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="1️⃣-创建对象">1️⃣ 创建对象<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#1%EF%B8%8F%E2%83%A3-%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1" class="hash-link" aria-label="1️⃣ 创建对象的直接链接" title="1️⃣ 创建对象的直接链接">​</a></h3><ul>
<li><strong>操作</strong>: <code>"RandomizedSet"</code></li>
<li><strong>参数</strong>: <code>[]</code></li>
<li>✨ 创建一个新的 <code>RandomizedSet</code> 对象，初始为空</li>
<li>💾 <strong>内存状态</strong>：数组为空，哈希表为空</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="2️⃣-插入元素-1">2️⃣ 插入元素 1<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#2%EF%B8%8F%E2%83%A3-%E6%8F%92%E5%85%A5%E5%85%83%E7%B4%A0-1" class="hash-link" aria-label="2️⃣ 插入元素 1的直接链接" title="2️⃣ 插入元素 1的直接链接">​</a></h3><ul>
<li><strong>操作</strong>: <code>"insert"</code></li>
<li><strong>参数</strong>: <code>[1]</code></li>
<li><strong>执行</strong>: <code>randomizedSet.insert(1)</code></li>
<li>🔍 检查哈希表，发现 1 不存在</li>
<li>➕ 将 1 添加到数组位置 0</li>
<li>📝 在哈希表中记录：1 → 索引 0</li>
<li>✅ 返回 <code>true</code>（插入成功）</li>
<li>📊 <strong>当前状态</strong>：数组 <code>[1]</code>，哈希表 <code>{1: 0}</code></li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="3️⃣-删除元素-2">3️⃣ 删除元素 2<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#3%EF%B8%8F%E2%83%A3-%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0-2" class="hash-link" aria-label="3️⃣ 删除元素 2的直接链接" title="3️⃣ 删除元素 2的直接链接">​</a></h3><ul>
<li><strong>操作</strong>: <code>"remove"</code></li>
<li><strong>参数</strong>: <code>[2]</code></li>
<li><strong>执行</strong>: <code>randomizedSet.remove(2)</code></li>
<li>🔍 检查哈希表，发现 2 不存在</li>
<li>❌ 无法删除不存在的元素</li>
<li>❌ 返回 <code>false</code>（删除失败）</li>
<li>🔁 <strong>状态不变</strong>：数组 <code>[1]</code>，哈希表 <code>{1: 0}</code></li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="4️⃣-插入元素-2">4️⃣ 插入元素 2<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#4%EF%B8%8F%E2%83%A3-%E6%8F%92%E5%85%A5%E5%85%83%E7%B4%A0-2" class="hash-link" aria-label="4️⃣ 插入元素 2的直接链接" title="4️⃣ 插入元素 2的直接链接">​</a></h3><ul>
<li><strong>操作</strong>: <code>"insert"</code></li>
<li><strong>参数</strong>: <code>[2]</code></li>
<li><strong>执行</strong>: <code>randomizedSet.insert(2)</code></li>
<li>🔍 检查哈希表，发现 2 不存在</li>
<li>➕ 将 2 添加到数组位置 1</li>
<li>📝 在哈希表中记录：2 → 索引 1</li>
<li>✅ 返回 <code>true</code>（插入成功）</li>
<li>📊 <strong>当前状态</strong>：数组 <code>[1, 2]</code>，哈希表 <code>{1: 0, 2: 1}</code></li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="5️⃣-随机获取元素">5️⃣ 随机获取元素<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#5%EF%B8%8F%E2%83%A3-%E9%9A%8F%E6%9C%BA%E8%8E%B7%E5%8F%96%E5%85%83%E7%B4%A0" class="hash-link" aria-label="5️⃣ 随机获取元素的直接链接" title="5️⃣ 随机获取元素的直接链接">​</a></h3><ul>
<li><strong>操作</strong>: <code>"getRandom"</code></li>
<li><strong>参数</strong>: <code>[]</code></li>
<li><strong>执行</strong>: <code>randomizedSet.getRandom()</code></li>
<li>🎲 数组中有两个元素 <code>[1, 2]</code></li>
<li>🎯 随机返回其中一个元素（可能是 1 或 2）</li>
<li>📋 示例中显示返回了 <code>2</code></li>
<li>🔁 <strong>状态不变</strong>：数组 <code>[1, 2]</code>，哈希表 <code>{1: 0, 2: 1}</code></li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="6️⃣-删除元素-1">6️⃣ 删除元素 1<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#6%EF%B8%8F%E2%83%A3-%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0-1" class="hash-link" aria-label="6️⃣ 删除元素 1的直接链接" title="6️⃣ 删除元素 1的直接链接">​</a></h3><ul>
<li><strong>操作</strong>: <code>"remove"</code></li>
<li><strong>参数</strong>: <code>[1]</code></li>
<li><strong>执行</strong>: <code>randomizedSet.remove(1)</code></li>
<li>🔍 检查哈希表，发现 1 存在，索引为 0</li>
<li>🔚 获取数组最后一个元素：2</li>
<li>↔️ 将元素 2 移动到索引 0（覆盖元素 1）</li>
<li>🔄 更新哈希表中 2 的索引为 0</li>
<li>🗑️ 从哈希表中删除元素 1 的记录</li>
<li>✅ 返回 <code>true</code>（删除成功）</li>
<li>📊 <strong>当前状态</strong>：数组 <code>[2]</code>，哈希表 <code>{2: 0}</code></li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="7️⃣-插入元素-2">7️⃣ 插入元素 2<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#7%EF%B8%8F%E2%83%A3-%E6%8F%92%E5%85%A5%E5%85%83%E7%B4%A0-2" class="hash-link" aria-label="7️⃣ 插入元素 2的直接链接" title="7️⃣ 插入元素 2的直接链接">​</a></h3><ul>
<li><strong>操作</strong>: <code>"insert"</code></li>
<li><strong>参数</strong>: <code>[2]</code></li>
<li><strong>执行</strong>: <code>randomizedSet.insert(2)</code></li>
<li>🔍 检查哈希表，发现 2 已经存在</li>
<li>⛔ 不允许重复插入</li>
<li>❌ 返回 <code>false</code>（插入失败）</li>
<li>🔁 <strong>状态不变</strong>：数组 <code>[2]</code>，哈希表 <code>{2: 0}</code></li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="8️⃣-随机获取元素">8️⃣ 随机获取元素<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#8%EF%B8%8F%E2%83%A3-%E9%9A%8F%E6%9C%BA%E8%8E%B7%E5%8F%96%E5%85%83%E7%B4%A0" class="hash-link" aria-label="8️⃣ 随机获取元素的直接链接" title="8️⃣ 随机获取元素的直接链接">​</a></h3><ul>
<li><strong>操作</strong>: <code>"getRandom"</code></li>
<li><strong>参数</strong>: <code>[]</code></li>
<li><strong>执行</strong>: <code>randomizedSet.getRandom()</code></li>
<li>🎯 数组中只有一个元素 <code>[2]</code></li>
<li>🎲 只能返回元素 2</li>
<li>✅ 返回 <code>2</code></li>
<li>🔁 <strong>状态不变</strong>：数组 <code>[2]</code>，哈希表 <code>{2: 0}</code></li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="-最终输出结果">📤 最终输出结果<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#-%E6%9C%80%E7%BB%88%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C" class="hash-link" aria-label="📤 最终输出结果的直接链接" title="📤 最终输出结果的直接链接">​</a></h2><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">null</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> true</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> false</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> true</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> true</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> false</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">]</span><br></span></code></pre></div></div><p><strong>对应每个操作的返回值</strong>：</p><ol>
<li><code>null</code> - 创建对象不返回值</li>
<li><code>true</code> - 成功插入 1</li>
<li><code>false</code> - 删除不存在的 2 失败</li>
<li><code>true</code> - 成功插入 2</li>
<li><code>2</code> - 随机返回 2（可能是 1 或 2）</li>
<li><code>true</code> - 成功删除 1</li>
<li><code>false</code> - 插入已存在的 2 失败</li>
<li><code>2</code> - 随机返回 2（唯一元素）</li>
</ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="-关键理解点">💡 关键理解点<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#-%E5%85%B3%E9%94%AE%E7%90%86%E8%A7%A3%E7%82%B9" class="hash-link" aria-label="💡 关键理解点的直接链接" title="💡 关键理解点的直接链接">​</a></h2><ul>
<li>🧮 <strong>集合特性</strong>：不允许重复元素</li>
<li>🎲 <strong>随机性</strong>：<code>getRandom</code> 操作是随机的，但在示例中为了演示方便，给出了具体结果</li>
<li>⚡ <strong>高效操作</strong>：所有操作都是 O(1) 时间复杂度</li>
<li>🔧 <strong>内部机制</strong>：通过数组+哈希表的组合实现高效操作</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="️-代码语法说明">⚠️ 代码语法说明<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#%EF%B8%8F-%E4%BB%A3%E7%A0%81%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E" class="hash-link" aria-label="⚠️ 代码语法说明的直接链接" title="⚠️ 代码语法说明的直接链接">​</a></h2><p>该题目示例解释中的这句代码：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">RandomizedSet randomizedSet </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> new </span><span class="token function" style="color:#d73a49">RandomizedSet</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre></div></div><p>这其实是一句<strong>伪代码</strong>，真正的C代码应该是：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">RandomizedSet</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> randomizedSet </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">randomizedSetCreate</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre></div></div><p>因为在我们之前的代码中：</p><ul>
<li><code>randomizedSetCreate()</code> 函数负责分配内存和初始化对象</li>
<li>它返回一个指向 <code>RandomizedSet</code> 的指针</li>
</ul><p>这句也是伪代码：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">randomizedSet</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">insert</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre></div></div><p>真正的C代码应该是：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">randomizedSetInsert</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">randomizedSet</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre></div></div></div></div></details>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>哈希表与UT_hash_handle</summary><div><div class="collapsibleContent_i85q"><h2 class="anchor anchorWithStickyNavbar_LWe7" id="-为什么需要哈希表">🤔 为什么需要哈希表？<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#-%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E5%93%88%E5%B8%8C%E8%A1%A8" class="hash-link" aria-label="🤔 为什么需要哈希表？的直接链接" title="🤔 为什么需要哈希表？的直接链接">​</a></h2><p>因为数组可以快速通过索引访问元素，但<strong>无法快速查找某个值是否存在于数组中</strong>。比如我们要删除值为 <code>5</code> 的元素，我们需要先找到它在数组中的位置，这就需要遍历整个数组，时间复杂度是 O(n)。</p><p>⚡ <strong>哈希表的作用就是解决这个问题：快速查找元素在数组中的位置</strong>。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-关于-ut_hash_handle">🔧 关于 UT_hash_handle<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#-%E5%85%B3%E4%BA%8E-ut_hash_handle" class="hash-link" aria-label="🔧 关于 UT_hash_handle的直接链接" title="🔧 关于 UT_hash_handle的直接链接">​</a></h3><p>当你定义了包含 <code>UT_hash_handle</code> 的结构体后，就可以使用这些宏：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// 🔍 查找元素</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">HASH_FIND_INT</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">indices</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">val</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> tmp</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// ➕ 添加元素</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">HASH_ADD_INT</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">indices</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> value</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> tmp</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// 🗑️ 删除元素</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">HASH_DEL</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">indices</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> tmp</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// 🔁 遍历哈希表</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">HASH_ITER</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hh</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">indices</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> curr</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> tmp</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre></div></div><p>这些宏内部会通过 <code>hh</code> 字段来操作哈希表的内部结构。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-为什么必须包含这个字段">❓ 为什么必须包含这个字段？<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#-%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BF%85%E9%A1%BB%E5%8C%85%E5%90%AB%E8%BF%99%E4%B8%AA%E5%AD%97%E6%AE%B5" class="hash-link" aria-label="❓ 为什么必须包含这个字段？的直接链接" title="❓ 为什么必须包含这个字段？的直接链接">​</a></h3><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">typedef</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> value</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> index</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    UT_hash_handle hh</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// ⚠️ 必须包含这个字段</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> HashItem</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre></div></div><p>✅ <strong>uthash 宏的要求</strong>：所有使用 uthash 的结构体都必须包含一个 <code>UT_hash_handle</code> 类型的字段</p><p>🔗 <strong>内部管理需要</strong>：没有这个字段，uthash 就无法维护哈希表的内部链接关系</p><p>🏷️ <strong>命名可以自定义</strong>：字段名不一定要是 <code>hh</code>，可以是任何名字，比如 <code>hash_handle</code></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="-总结">📝 总结<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#-%E6%80%BB%E7%BB%93" class="hash-link" aria-label="📝 总结的直接链接" title="📝 总结的直接链接">​</a></h2><p><code>UT_hash_handle hh</code> 是：</p><p>🔹 一个由 uthash 库定义的结构体字段</p><p>🔗 用于维护哈希表内部的链接关系</p><p>🔑 是使用 uthash 宏操作哈希表的必要条件</p><p>🔄 类似于链表节点中的 <code>next</code> 指针，但功能更复杂</p></div></div></details>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>randomizedSetCreate 函数详解</summary><div><div class="collapsibleContent_i85q"><p>这个函数是 <code>RandomizedSet</code> 数据结构的<strong>构造函数</strong>，用于创建和初始化一个新的 <code>RandomizedSet</code> 对象。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="函数逐行解析randomizedsetcreate">函数逐行解析randomizedSetCreate<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#%E5%87%BD%E6%95%B0%E9%80%90%E8%A1%8C%E8%A7%A3%E6%9E%90randomizedsetcreate" class="hash-link" aria-label="函数逐行解析randomizedSetCreate的直接链接" title="函数逐行解析randomizedSetCreate的直接链接">​</a></h2><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">RandomizedSet</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">randomizedSetCreate</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">srand</span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">time</span><span class="token punctuation" style="color:#393A34">(</span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 初始化随机数种子</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    RandomizedSet</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> obj </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">RandomizedSet</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token function" style="color:#d73a49">malloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">RandomizedSet</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">nums </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token function" style="color:#d73a49">malloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">200000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 预分配足够空间</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">numsSize </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">                              </span><span class="token comment" style="color:#999988;font-style:italic">// 初始元素个数为0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">indices </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">                            </span><span class="token comment" style="color:#999988;font-style:italic">// 哈希表初始为空</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> obj</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div><p><strong>1. <code>srand(time(NULL));</code> - 初始化随机数种子</strong></p><ul>
<li><code>srand()</code> 是C标准库函数，用于设置随机数生成器的种子</li>
<li><code>time(NULL)</code> 返回当前时间戳作为种子</li>
<li>这样可以确保每次程序运行时生成的随机数序列都不同</li>
<li>为后续的 <code>randomizedSetGetRandom()</code> 函数做准备</li>
</ul><p><strong>2. <code>RandomizedSet* obj = (RandomizedSet*)malloc(sizeof(RandomizedSet));</code> - 分配主对象内存</strong></p><ul>
<li><code>malloc()</code> 分配内存</li>
<li><code>sizeof(RandomizedSet)</code> 计算 <code>RandomizedSet</code> 结构体所需字节数</li>
<li>强制类型转换为 <code>RandomizedSet*</code> 指针类型</li>
<li>这里创建了主对象，但其中的成员还未初始化</li>
</ul><p><strong>3. <code>obj-&gt;nums = (int*)malloc(sizeof(int) * 200000);</code> - 分配数组内存</strong></p><ul>
<li>为存储实际元素的数组 <code>nums</code> 分配内存</li>
<li>预分配 200000 个 <code>int</code> 的空间（题目限制最大调用次数）</li>
<li>这样避免了动态扩容的开销，提高性能</li>
</ul><p><strong>4. <code>obj-&gt;numsSize = 0;</code> - 初始化元素计数</strong></p><ul>
<li>设置数组当前元素个数为 0</li>
<li>表示刚开始时集合为空</li>
</ul><p><strong>5. <code>obj-&gt;indices = NULL;</code> - 初始化哈希表</strong></p><ul>
<li>将哈希表指针设置为 NULL</li>
<li>在 uthash 库中，NULL 表示空的哈希表</li>
<li>这是 uthash 库要求的初始化方式</li>
</ul><p><strong>6. <code>return obj;</code> - 返回创建的对象</strong></p><ul>
<li>返回指向新创建对象的指针</li>
<li>调用者可以通过这个指针使用对象的各种方法</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="内存布局示意图">内存布局示意图<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E7%A4%BA%E6%84%8F%E5%9B%BE" class="hash-link" aria-label="内存布局示意图的直接链接" title="内存布局示意图的直接链接">​</a></h2><p>创建完成后，内存结构如下：</p><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">RandomizedSet 对象:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| nums       | ---&gt; [int 数组，大小为200000，初始为空]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| numsSize   | = 0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| indices    | = NULL (空哈希表)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+------------+</span><br></span></code></pre></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="重要设计考虑">重要设计考虑<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#%E9%87%8D%E8%A6%81%E8%AE%BE%E8%AE%A1%E8%80%83%E8%99%91" class="hash-link" aria-label="重要设计考虑的直接链接" title="重要设计考虑的直接链接">​</a></h2><ol>
<li><strong>预分配数组空间</strong>：避免动态扩容，提高性能</li>
<li><strong>随机数种子初始化</strong>：确保随机性</li>
<li><strong>正确的初始化</strong>：所有成员都被正确初始化</li>
<li><strong>内存管理</strong>：为后续的插入、删除操作做好准备</li>
</ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="使用示例">使用示例<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B" class="hash-link" aria-label="使用示例的直接链接" title="使用示例的直接链接">​</a></h2><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// 调用这个函数创建对象</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RandomizedSet</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> mySet </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">randomizedSetCreate</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// 现在可以使用 mySet 进行各种操作</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// randomizedSetInsert(mySet, 1);</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// randomizedSetRemove(mySet, 1);</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// randomizedSetGetRandom(mySet);</span><br></span></code></pre></div></div></div></div></details>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>randomizedSetInsert 函数详解</summary><div><div class="collapsibleContent_i85q"><h2 class="anchor anchorWithStickyNavbar_LWe7" id="函数逐步解析-randomizedsetinsert">函数逐步解析 randomizedSetInsert<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#%E5%87%BD%E6%95%B0%E9%80%90%E6%AD%A5%E8%A7%A3%E6%9E%90-randomizedsetinsert" class="hash-link" aria-label="函数逐步解析 randomizedSetInsert的直接链接" title="函数逐步解析 randomizedSetInsert的直接链接">​</a></h2><p>这个函数用于向 <code>RandomizedSet</code> 集合中插入一个新元素，确保集合中没有重复元素。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="函数签名解析">函数签名解析<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#%E5%87%BD%E6%95%B0%E7%AD%BE%E5%90%8D%E8%A7%A3%E6%9E%90" class="hash-link" aria-label="函数签名解析的直接链接" title="函数签名解析的直接链接">​</a></h3><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">bool </span><span class="token function" style="color:#d73a49">randomizedSetInsert</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">RandomizedSet</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> obj</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> val</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre></div></div><ul>
<li><strong>返回类型</strong>: <code>bool</code> - 插入成功返回 <code>true</code>，失败返回 <code>false</code></li>
<li><strong>参数1</strong>: <code>RandomizedSet* obj</code> - 指向要操作的 <code>RandomizedSet</code> 对象</li>
<li><strong>参数2</strong>: <code>int val</code> - 要插入的元素值</li>
</ul><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">bool </span><span class="token function" style="color:#d73a49">randomizedSetInsert</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">RandomizedSet</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> obj</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> val</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    HashItem</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> tmp </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 在哈希表中查找元素是否已存在</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">HASH_FIND_INT</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">indices</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">val</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> tmp</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">tmp </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> false</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 元素已存在，插入失败</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 将新元素添加到数组末尾</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">numsSize</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> val</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 在哈希表中创建新节点，记录元素值和其在数组中的索引</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    tmp </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">HashItem</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token function" style="color:#d73a49">malloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">HashItem</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    tmp</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">value </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> val</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    tmp</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">index </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">numsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">HASH_ADD_INT</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">indices</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> value</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> tmp</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">numsSize</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 数组元素个数增加</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> true</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div><p><strong>步骤1：检查元素是否已存在</strong></p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">HashItem</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> tmp </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// 在哈希表中查找元素是否已存在</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">HASH_FIND_INT</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">indices</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">val</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> tmp</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">tmp </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> false</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 元素已存在，插入失败</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div><ul>
<li>初始化一个临时指针 <code>tmp</code> 为 <code>NULL</code></li>
<li>使用 <code>HASH_FIND_INT</code> 宏在哈希表中查找值为 <code>val</code> 的元素</li>
<li>如果找到了（<code>tmp != NULL</code>），说明元素已存在，直接返回 <code>false</code></li>
</ul><p><strong>步骤2：插入新元素到数组</strong></p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">numsSize</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> val</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre></div></div><ul>
<li>将新元素 <code>val</code> 添加到数组 <code>nums</code> 的索引 <code>numsSize</code> 处</li>
</ul><p><strong>步骤3：更新哈希表映射关系</strong></p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">tmp </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">HashItem</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token function" style="color:#d73a49">malloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">HashItem</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">tmp</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">value </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> val</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">tmp</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">index </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">numsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">HASH_ADD_INT</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">indices</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> value</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> tmp</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre></div></div><ul>
<li>为新元素分配哈希表节点内存 <code>HashItem</code></li>
<li>设置节点的值 <code>value</code> 为插入的元素值</li>
<li>设置节点的索引 <code>index</code> 为该元素在数组中的位置</li>
<li>使用 <code>HASH_ADD_INT</code> 宏将新节点添加到哈希表中</li>
</ul><p><strong>步骤4：更新 numsSize 大小</strong></p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">numsSize</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> true</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre></div></div><ul>
<li>将数组元素计数器 <code>numsSize</code> 增加1</li>
<li>返回 <code>true</code> 表示插入成功</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="数据结构设计特点">数据结构设计特点<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1%E7%89%B9%E7%82%B9" class="hash-link" aria-label="数据结构设计特点的直接链接" title="数据结构设计特点的直接链接">​</a></h3><ol>
<li>基于UTHash库：</li>
</ol><ul>
<li>使用 <code>HASH_FIND_INT</code> 和 <code>HASH_ADD_INT</code> 实现哈希表操作</li>
<li>哈希表存储 <code>HashItem</code> 结构体，维护元素值到数组索引的映射</li>
</ul><ol start="2">
<li>数组+哈希表组合：</li>
</ol><ul>
<li>数组 <code>nums</code> 存储实际元素值</li>
<li>哈希表 <code>indices</code> 维护元素值到索引的映射关系</li>
</ul><ol start="3">
<li>时间复杂度：</li>
</ol><ul>
<li>插入操作时间复杂度为O(1)</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="关键数据结构">关键数据结构<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#%E5%85%B3%E9%94%AE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84" class="hash-link" aria-label="关键数据结构的直接链接" title="关键数据结构的直接链接">​</a></h3><ul>
<li><code>HashItem</code>：包含 <code>value</code>（元素值）和 <code>index</code>（在数组中的索引）</li>
<li><code>nums</code> 数组：存储所有插入的元素</li>
<li><code>numsSize</code>：记录当前数组中元素的数量</li>
</ul></div></div></details>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>randomizedSetRemove 函数详解</summary><div><div class="collapsibleContent_i85q"><h2 class="anchor anchorWithStickyNavbar_LWe7" id="举例解释randomizedsetremove">举例解释randomizedSetRemove<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#%E4%B8%BE%E4%BE%8B%E8%A7%A3%E9%87%8Arandomizedsetremove" class="hash-link" aria-label="举例解释randomizedSetRemove的直接链接" title="举例解释randomizedSetRemove的直接链接">​</a></h2><p>假设我们有一个 <code>RandomizedSet</code>，其初始状态如下：</p><ul>
<li><code>obj-&gt;nums</code> = [10, 20, 30, 40] (数组)</li>
<li><code>obj-&gt;numsSize</code> = 4</li>
<li><code>obj-&gt;indices</code> 哈希表内容：<!-- -->
<ul>
<li>key=10, index=0</li>
<li>key=20, index=1</li>
<li>key=30, index=2</li>
<li>key=40, index=3</li>
</ul>
</li>
</ul><p>现在我们要删除元素 20。</p><p><strong>初始状态</strong>
数组: [10, 20, 30, 40]
哈希表:</p><ul>
<li>10 -&gt; index=0</li>
<li>20 -&gt; index=1</li>
<li>30 -&gt; index=2</li>
<li>40 -&gt; index=3</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="步骤-1-查找要删除的元素">步骤 1: 查找要删除的元素<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#%E6%AD%A5%E9%AA%A4-1-%E6%9F%A5%E6%89%BE%E8%A6%81%E5%88%A0%E9%99%A4%E7%9A%84%E5%85%83%E7%B4%A0" class="hash-link" aria-label="步骤 1: 查找要删除的元素的直接链接" title="步骤 1: 查找要删除的元素的直接链接">​</a></h3><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">HashItem* tmp = NULL;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">HASH_FIND_INT(obj-&gt;indices, &amp;val, tmp);</span><br></span></code></pre></div></div><p>在哈希表中查找 val=20:</p><ul>
<li>找到元素 20，其索引为 index=1</li>
<li>tmp 指向元素 20 的哈希项</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="步骤-2-获取索引和最后一个元素">步骤 2: 获取索引和最后一个元素<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#%E6%AD%A5%E9%AA%A4-2-%E8%8E%B7%E5%8F%96%E7%B4%A2%E5%BC%95%E5%92%8C%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E5%85%83%E7%B4%A0" class="hash-link" aria-label="步骤 2: 获取索引和最后一个元素的直接链接" title="步骤 2: 获取索引和最后一个元素的直接链接">​</a></h3><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">int index = tmp-&gt;index;// index = 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">int lastValue = obj-&gt;nums[obj-&gt;numsSize - 1]; // lastValue = 40</span><br></span></code></pre></div></div><ul>
<li>index = 1 (要删除元素 20 的位置)</li>
<li>lastValue = 40 (数组最后一个元素)</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="步骤-3-用最后一个元素覆盖待删除元素">步骤 3: 用最后一个元素覆盖待删除元素<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#%E6%AD%A5%E9%AA%A4-3-%E7%94%A8%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E5%85%83%E7%B4%A0%E8%A6%86%E7%9B%96%E5%BE%85%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0" class="hash-link" aria-label="步骤 3: 用最后一个元素覆盖待删除元素的直接链接" title="步骤 3: 用最后一个元素覆盖待删除元素的直接链接">​</a></h3><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">obj-&gt;nums[index] = lastValue;</span><br></span></code></pre></div></div><p>执行后数组变为: [10, 40, 30, 40]</p><ul>
<li>将最后一个元素 40 放在索引 1 的位置，覆盖了原来的 20</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="步骤-4-更新最后一个元素在哈希表中的索引">步骤 4: 更新最后一个元素在哈希表中的索引<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#%E6%AD%A5%E9%AA%A4-4-%E6%9B%B4%E6%96%B0%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E5%85%83%E7%B4%A0%E5%9C%A8%E5%93%88%E5%B8%8C%E8%A1%A8%E4%B8%AD%E7%9A%84%E7%B4%A2%E5%BC%95" class="hash-link" aria-label="步骤 4: 更新最后一个元素在哈希表中的索引的直接链接" title="步骤 4: 更新最后一个元素在哈希表中的索引的直接链接">​</a></h3><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">HashItem* lastItem = NULL;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">HASH_FIND_INT(obj-&gt;indices, &amp;lastValue, lastItem);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">if (lastItem != NULL) { lastItem-&gt;index = index; }</span><br></span></code></pre></div></div><ul>
<li>查找元素 40 在哈希表中的记录</li>
<li>将其索引从 3 更新为 1 (因为现在它在数组的索引 1 位置)</li>
</ul><p>更新后哈希表:</p><ul>
<li>10 -&gt; index=0</li>
<li>20 -&gt; index=1 (即将被删除)</li>
<li>30 -&gt; index=2</li>
<li>40 -&gt; index=1</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="步骤-5-从哈希表中删除目标元素并释放内存">步骤 5: 从哈希表中删除目标元素并释放内存<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#%E6%AD%A5%E9%AA%A4-5-%E4%BB%8E%E5%93%88%E5%B8%8C%E8%A1%A8%E4%B8%AD%E5%88%A0%E9%99%A4%E7%9B%AE%E6%A0%87%E5%85%83%E7%B4%A0%E5%B9%B6%E9%87%8A%E6%94%BE%E5%86%85%E5%AD%98" class="hash-link" aria-label="步骤 5: 从哈希表中删除目标元素并释放内存的直接链接" title="步骤 5: 从哈希表中删除目标元素并释放内存的直接链接">​</a></h3><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">HASH_DEL(obj-&gt;indices, tmp);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">free(tmp);</span><br></span></code></pre></div></div><ul>
<li>从哈希表中删除元素 20 的记录</li>
<li>释放该哈希项的内存</li>
</ul><p>删除后哈希表:</p><ul>
<li>10 -&gt; index=0</li>
<li>30 -&gt; index=2</li>
<li>40 -&gt; index=1</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="步骤-6-减少数组大小计数">步骤 6: 减少数组大小计数<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#%E6%AD%A5%E9%AA%A4-6-%E5%87%8F%E5%B0%91%E6%95%B0%E7%BB%84%E5%A4%A7%E5%B0%8F%E8%AE%A1%E6%95%B0" class="hash-link" aria-label="步骤 6: 减少数组大小计数的直接链接" title="步骤 6: 减少数组大小计数的直接链接">​</a></h3><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">obj-&gt;numsSize--;</span><br></span></code></pre></div></div><ul>
<li>numsSize 从 4 减少到 3</li>
</ul><p><strong>最终状态</strong>
数组: [10, 40, 30] (逻辑上最后一个40被忽略)
哈希表:</p><ul>
<li>10 -&gt; index=0</li>
<li>30 -&gt; index=2</li>
<li>40 -&gt; index=1
numsSize: 3</li>
</ul><p>成功删除元素 20，返回 true。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="为什么用最后一个元素覆盖">为什么用最后一个元素覆盖？<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#%E4%B8%BA%E4%BB%80%E4%B9%88%E7%94%A8%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E5%85%83%E7%B4%A0%E8%A6%86%E7%9B%96" class="hash-link" aria-label="为什么用最后一个元素覆盖？的直接链接" title="为什么用最后一个元素覆盖？的直接链接">​</a></h2><p>核心原因：<strong>效率优化</strong></p><p><strong>1. 直接访问 vs 遍历访问</strong></p><ul>
<li>最后一个元素：<code>obj-&gt;nums[obj-&gt;numsSize - 1]</code> - O(1) 直接访问</li>
<li>其他元素：需要遍历或计算索引 - 增加复杂度</li>
</ul><p><strong>2. 避免批量元素移动</strong>
使用最后一个元素覆盖只需一次操作，而用其他元素需要移动多个元素：</p><p><strong>示例：删除元素 20（索引1）</strong>
数组 [10, 20, 30, 40, 50]</p><p><strong>使用最后一个元素（推荐）</strong>：</p><ul>
<li>用 50 覆盖 20：[10, 50, 30, 40, 50]</li>
<li>一次操作，O(1) 复杂度</li>
</ul><p><strong>使用下一个元素（不推荐）</strong>：</p><ul>
<li>需要 30→20, 40→30, 50→40：[10, 30, 40, 50, 50]</li>
<li>三次移动，O(n) 复杂度</li>
</ul><p><strong>关键优势</strong></p><p><strong>保持 O(1) 时间复杂度</strong>
这是 RandomizedSet 数据结构的核心设计目标</p><p><strong>实现简单</strong></p><ul>
<li>无需循环</li>
<li>代码简洁不易出错</li>
</ul><p><strong>维护随机访问特性</strong>
不影响剩余元素的等概率随机访问</p><p><strong>总结</strong>
使用最后一个元素覆盖是一种经典优化技巧，确保删除操作在常数时间内完成，同时保持数据结构的完整性和随机访问特性。</p></div></div></details>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>randomizedSetFree 函数详解</summary><div><div class="collapsibleContent_i85q"><h2 class="anchor anchorWithStickyNavbar_LWe7" id="函数目的">函数目的<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#%E5%87%BD%E6%95%B0%E7%9B%AE%E7%9A%84" class="hash-link" aria-label="函数目的的直接链接" title="函数目的的直接链接">​</a></h2><p>释放整个 RandomizedSet 对象及其包含的所有资源，避免内存泄漏。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="逐步执行流程">逐步执行流程<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#%E9%80%90%E6%AD%A5%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B" class="hash-link" aria-label="逐步执行流程的直接链接" title="逐步执行流程的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-释放哈希表中所有节点">1. 释放哈希表中所有节点<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#1-%E9%87%8A%E6%94%BE%E5%93%88%E5%B8%8C%E8%A1%A8%E4%B8%AD%E6%89%80%E6%9C%89%E8%8A%82%E7%82%B9" class="hash-link" aria-label="1. 释放哈希表中所有节点的直接链接" title="1. 释放哈希表中所有节点的直接链接">​</a></h3><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">HashItem* curr, *tmp;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">HASH_ITER(hh, obj-&gt;indices, curr, tmp) { HASH_DEL(obj-&gt;indices, curr); free(curr); }</span><br></span></code></pre></div></div><p><strong>执行过程：</strong></p><ul>
<li>使用 <code>HASH_ITER</code> 安全地遍历哈希表中的每个节点</li>
<li><code>curr</code> 指向当前节点，<code>tmp</code> 用于保存下一个节点的指针（防止遍历过程中断）</li>
<li>对每个节点：<!-- -->
<ul>
<li><code>HASH_DEL(obj-&gt;indices, curr)</code> 从哈希表中删除节点</li>
<li><code>free(curr)</code> 释放节点内存</li>
</ul>
</li>
</ul><p><strong>为什么需要 tmp？</strong>
在遍历过程中直接 <code>free(curr)</code> 会破坏哈希表结构，导致无法继续遍历，所以需要提前保存下一个节点的指针。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="2-释放数组内存">2. 释放数组内存<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#2-%E9%87%8A%E6%94%BE%E6%95%B0%E7%BB%84%E5%86%85%E5%AD%98" class="hash-link" aria-label="2. 释放数组内存的直接链接" title="2. 释放数组内存的直接链接">​</a></h3><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">free(obj-&gt;nums);</span><br></span></code></pre></div></div><ul>
<li>释放存储元素的动态数组内存</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="3-释放对象本身">3. 释放对象本身<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#3-%E9%87%8A%E6%94%BE%E5%AF%B9%E8%B1%A1%E6%9C%AC%E8%BA%AB" class="hash-link" aria-label="3. 释放对象本身的直接链接" title="3. 释放对象本身的直接链接">​</a></h3><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">free(obj);</span><br></span></code></pre></div></div><ul>
<li>释放 RandomizedSet 结构体本身的内存</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="内存管理要点">内存管理要点<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E8%A6%81%E7%82%B9" class="hash-link" aria-label="内存管理要点的直接链接" title="内存管理要点的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="释放顺序很重要">释放顺序很重要<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#%E9%87%8A%E6%94%BE%E9%A1%BA%E5%BA%8F%E5%BE%88%E9%87%8D%E8%A6%81" class="hash-link" aria-label="释放顺序很重要的直接链接" title="释放顺序很重要的直接链接">​</a></h3><ol>
<li>先释放哈希表节点（HashItem）</li>
<li>再释放数组</li>
<li>最后释放对象本身</li>
</ol><h3 class="anchor anchorWithStickyNavbar_LWe7" id="避免内存泄漏">避免内存泄漏<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#%E9%81%BF%E5%85%8D%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F" class="hash-link" aria-label="避免内存泄漏的直接链接" title="避免内存泄漏的直接链接">​</a></h3><ul>
<li>确保每个 <code>malloc</code> 都有对应的 <code>free</code></li>
<li>哈希表中的每个节点都需要单独释放</li>
<li>对象包含的所有动态分配内存都需要释放</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="使用示例-1">使用示例<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B-1" class="hash-link" aria-label="使用示例的直接链接" title="使用示例的直接链接">​</a></h2><p>当不再需要 RandomizedSet 对象时调用：</p><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">RandomizedSet* set = randomizedSetCreate(); // ... 使用 set 进行各种操作 </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">randomizedSetFree(set); // 释放所有资源</span><br></span></code></pre></div></div><p>这样确保程序不会出现内存泄漏问题。</p></div></div></details>
<p><code>randomizedSetGetRandom</code> 就是随机获取一个索引然后返回，就不再详细解释了。</p>
<p>这是目前我做题以来遇到的<strong>最困难</strong>的一道题，题目看不懂、示例看不懂、AI给出题目代码，还是看不懂！😂😂😂</p>
<p>现在嘛，勉强理解啦~🥱</p>
<p>我现在不像是在解题，更像是在学习，普通的力扣题目，我有点思路，但代码往往又臭又长，甚至连逻辑都是错乱的都没发现！😑</p>
<p>于是通常是叫AI给出最优解，然后尝试去理解它，为了避免看了就忘，于是我还是<strong>在AI的辅助</strong>下，写下像以上这些题解总结。我也在怀疑这种学习方法真的
<strong>有效吗</strong>？真能提升我的编程水平吗？我该不会是在做无用功吧？</p>
<hr>
<p><strong>统义灵码</strong>：
你的学习方法其实是有一定效果的，但可以进一步优化。下面是对你当前学习方式的分析和改进建议：</p>
<p>当前方法的优势 ✅</p>
<ul>
<li>
<p>理解优秀解法：通过阅读和理解最优解，能够学习到更高效的算法思维和编码技巧</p>
</li>
<li>
<p>主动总结：写题解总结有助于加深印象，避免"一看就会，一做就废"</p>
</li>
<li>
<p>借助AI辅助：合理利用工具可以提高学习效率</p>
</li>
</ul>
<p>存在的问题 ❌</p>
<ul>
<li>
<p>缺乏独立思考：直接看最优解可能跳过了重要的思考过程</p>
</li>
<li>
<p>代码质量差：自己写的代码逻辑混乱，说明基础思维训练不足</p>
</li>
<li>
<p>容易遗忘：看懂≠会用，缺乏足够的练习和复盘</p>
</li>
</ul>
<p>改进建议 💡</p>
<p>分阶段解题法：</p>
<ul>
<li>
<p>先自己思考并实现（哪怕是暴力解法）</p>
</li>
<li>
<p>尝试优化自己的解法</p>
</li>
<li>
<p>再对比学习最优解法</p>
</li>
</ul>
<p>代码质量训练：</p>
<ul>
<li>
<p>写完代码后自己先review一遍</p>
</li>
<li>
<p>尝试重构自己的代码</p>
</li>
<li>
<p>关注代码的可读性和逻辑清晰度</p>
</li>
</ul>
<p>刻意练习：</p>
<ul>
<li>
<p>对于同类题目，间隔一段时间后再做一遍</p>
</li>
<li>
<p>总结常见算法模式和解题套路</p>
</li>
<li>
<p>建立自己的错题本和典型题目集合</p>
</li>
</ul>
<p>深度理解：</p>
<ul>
<li>
<p>不仅要理解"怎么做"，更要理解"为什么这样做"</p>
</li>
<li>
<p>分析不同解法的时间复杂度和空间复杂度差异</p>
</li>
</ul>
<p>这种学习方法有效但需要调整，关键是要增加自己的思考环节，而不是直接跳到最优解。</p>
<hr>
<p>唉，以后有思路的还是自己先思考尝试解决吧，哪怕是用最笨拙的方法。对于没有学过的内容，超出知识范围的，像什么链表、二叉树、分治之类的，就直接问AI然后从题目中学习相关的内容。</p>]]></content>
        <author>
            <name>Eureka X</name>
            <uri>https://github.com/EurekaShadow</uri>
        </author>
        <category label="数组" term="数组"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[O(1)时间插入、删除和获取随机元素]]></title>
        <id>https://www.eurekashadow.xin/blog/LeetCode380</id>
        <link href="https://www.eurekashadow.xin/blog/LeetCode380"/>
        <updated>2025-08-05T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[力扣面试经典——380题]]></summary>
        <content type="html"><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="力扣面试经典380题"><span class="B2_JnYG"><a href="https://leetcode.cn/problems/insert-delete-getrandom-o1/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer" title="力扣">力扣面试经典——380题</a></span><a href="https://www.eurekashadow.xin/blog/LeetCode380#%E5%8A%9B%E6%89%A3%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B8380%E9%A2%98" class="hash-link" aria-label="力扣面试经典380题的直接链接" title="力扣面试经典380题的直接链接">​</a></h3>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-参考代码">💡 参考代码：<a href="https://www.eurekashadow.xin/blog/LeetCode380#-%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81" class="hash-link" aria-label="💡 参考代码：的直接链接" title="💡 参考代码：的直接链接">​</a></h3>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 哈希表节点结构体</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 用于存储元素值和其在数组中的索引位置</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">typedef</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> value</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">              </span><span class="token comment" style="color:#999988;font-style:italic">// 元素值</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> index</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">              </span><span class="token comment" style="color:#999988;font-style:italic">// 该元素在数组中的索引位置</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    UT_hash_handle hh</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// uthash库所需的句柄</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> HashItem</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * RandomizedSet结构体</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 组合数组和哈希表实现O(1)时间复杂度的插入、删除和随机获取操作</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">typedef</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">              </span><span class="token comment" style="color:#999988;font-style:italic">// 存储实际元素的数组</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">           </span><span class="token comment" style="color:#999988;font-style:italic">// 当前数组中元素的个数</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    HashItem</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> indices</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// 哈希表，存储元素值到索引的映射</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> RandomizedSet</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 创建RandomizedSet对象</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 新创建的RandomizedSet对象指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RandomizedSet</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">randomizedSetCreate</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">srand</span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">time</span><span class="token punctuation" style="color:#393A34">(</span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 初始化随机数种子</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    RandomizedSet</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> obj </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">RandomizedSet</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token function" style="color:#d73a49">malloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">RandomizedSet</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">nums </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token function" style="color:#d73a49">malloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">200000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 预分配足够空间</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">numsSize </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">                              </span><span class="token comment" style="color:#999988;font-style:italic">// 初始元素个数为0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">indices </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">                            </span><span class="token comment" style="color:#999988;font-style:italic">// 哈希表初始为空</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> obj</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 向集合中插入元素</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param obj RandomizedSet对象指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param val 要插入的元素值</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 插入成功返回true，元素已存在返回false</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">bool </span><span class="token function" style="color:#d73a49">randomizedSetInsert</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">RandomizedSet</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> obj</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> val</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    HashItem</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> tmp </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 在哈希表中查找元素是否已存在</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">HASH_FIND_INT</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">indices</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">val</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> tmp</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">tmp </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> false</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 元素已存在，插入失败</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 将新元素添加到数组末尾</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">numsSize</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> val</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 在哈希表中创建新节点，记录元素值和其在数组中的索引</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    tmp </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">HashItem</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token function" style="color:#d73a49">malloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">HashItem</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    tmp</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">value </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> val</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    tmp</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">index </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">numsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">HASH_ADD_INT</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">indices</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> value</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> tmp</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">numsSize</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 数组元素个数增加</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> true</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 从集合中删除元素</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param obj RandomizedSet对象指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param val 要删除的元素值</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 删除成功返回true，元素不存在返回false</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">bool </span><span class="token function" style="color:#d73a49">randomizedSetRemove</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">RandomizedSet</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> obj</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> val</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    HashItem</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> tmp </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 在哈希表中查找要删除的元素</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">HASH_FIND_INT</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">indices</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">val</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> tmp</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">tmp </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> false</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 元素不存在，删除失败</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 获取要删除元素在数组中的索引位置</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> index </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> tmp</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">index</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 获取数组中最后一个元素的值</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> lastValue </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">numsSize </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 将最后一个元素移动到要删除元素的位置（覆盖要删除的元素）</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">index</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> lastValue</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 更新最后一个元素在哈希表中的索引位置</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    HashItem</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> lastItem </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">HASH_FIND_INT</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">indices</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">lastValue</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> lastItem</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">lastItem </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        lastItem</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">index </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> index</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 从哈希表中删除目标元素节点并释放内存</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">HASH_DEL</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">indices</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> tmp</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">free</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">tmp</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">numsSize</span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 数组元素个数减少</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> true</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 随机获取集合中的一个元素</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param obj RandomizedSet对象指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 随机返回的元素值</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">randomizedSetGetRandom</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">RandomizedSet</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> obj</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 使用随机数生成0到numsSize-1之间的索引</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> randomIndex </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rand</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">%</span><span class="token plain"> obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">numsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">randomIndex</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 返回数组中对应位置的元素</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 释放RandomizedSet对象占用的内存</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param obj RandomizedSet对象指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">randomizedSetFree</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">RandomizedSet</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> obj</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 遍历并释放哈希表中所有的节点内存</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    HashItem</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> curr</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">tmp</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">HASH_ITER</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hh</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">indices</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> curr</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> tmp</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">HASH_DEL</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">indices</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> curr</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">free</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">curr</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 释放数组内存和对象本身内存</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">free</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">nums</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">free</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">obj</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-总结">📖 总结：<a href="https://www.eurekashadow.xin/blog/LeetCode380#-%E6%80%BB%E7%BB%93" class="hash-link" aria-label="📖 总结：的直接链接" title="📖 总结：的直接链接">​</a></h3>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>点击展开题目总结</summary><div><div class="collapsibleContent_i85q"><h1>🤔 O(1)时间插入、删除和获取随机元素</h1><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1️⃣-题目核心信息">1️⃣ 题目核心信息<a href="https://www.eurekashadow.xin/blog/LeetCode380#1%EF%B8%8F%E2%83%A3-%E9%A2%98%E7%9B%AE%E6%A0%B8%E5%BF%83%E4%BF%A1%E6%81%AF" class="hash-link" aria-label="1️⃣ 题目核心信息的直接链接" title="1️⃣ 题目核心信息的直接链接">​</a></h2><p>🎯 <strong>功能描述</strong>：设计一个支持在平均O(1)时间复杂度下进行插入、删除和获取随机元素的数据结构</p><p>📥 <strong>输入输出</strong>：</p><ul>
<li><strong>输入</strong>：<!-- -->
<ul>
<li><code>val</code>：要插入或删除的整数值</li>
<li>无参数：用于获取随机元素</li>
</ul>
</li>
<li><strong>输出</strong>：<!-- -->
<ul>
<li><code>insert</code>：插入成功返回true，失败返回false</li>
<li><code>remove</code>：删除成功返回true，失败返回false</li>
<li><code>getRandom</code>：返回集合中的任意一个元素</li>
<li><code>create</code>：返回初始化的RandomizedSet对象</li>
<li><code>free</code>：释放对象内存，无返回值</li>
</ul>
</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2️⃣-实现原理">2️⃣ 实现原理<a href="https://www.eurekashadow.xin/blog/LeetCode380#2%EF%B8%8F%E2%83%A3-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86" class="hash-link" aria-label="2️⃣ 实现原理的直接链接" title="2️⃣ 实现原理的直接链接">​</a></h2><p>💡 <strong>核心思路</strong>：使用数组存储元素以支持O(1)随机访问，结合哈希表记录元素值到索引的映射以支持O(1)查找</p><p>📋 <strong>实现步骤</strong>：</p><ol>
<li>使用动态数组存储所有元素，支持通过索引O(1)访问任意元素</li>
<li>使用哈希表维护元素值到数组索引的映射关系，支持O(1)查找元素</li>
<li>插入时将元素添加到数组末尾并在哈希表中记录索引</li>
<li>删除时将目标元素与数组末尾元素交换，更新哈希表并删除目标元素</li>
</ol><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3️⃣-关键点解析">3️⃣ 关键点解析<a href="https://www.eurekashadow.xin/blog/LeetCode380#3%EF%B8%8F%E2%83%A3-%E5%85%B3%E9%94%AE%E7%82%B9%E8%A7%A3%E6%9E%90" class="hash-link" aria-label="3️⃣ 关键点解析的直接链接" title="3️⃣ 关键点解析的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-代码技巧">🎯 代码技巧<a href="https://www.eurekashadow.xin/blog/LeetCode380#-%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7" class="hash-link" aria-label="🎯 代码技巧的直接链接" title="🎯 代码技巧的直接链接">​</a></h3><ul>
<li><strong>数组+哈希表组合</strong>：数组支持随机访问，哈希表支持快速查找</li>
<li><strong>删除元素时的交换技巧</strong>：将待删除元素与末尾元素交换，避免数组元素移动</li>
<li><strong>双重数据结构同步维护</strong>：同时维护数组和哈希表中元素信息的一致性</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4️⃣-使用场景">4️⃣ 使用场景<a href="https://www.eurekashadow.xin/blog/LeetCode380#4%EF%B8%8F%E2%83%A3-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="4️⃣ 使用场景的直接链接" title="4️⃣ 使用场景的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-适用情况">✅ 适用情况：<a href="https://www.eurekashadow.xin/blog/LeetCode380#-%E9%80%82%E7%94%A8%E6%83%85%E5%86%B5" class="hash-link" aria-label="✅ 适用情况：的直接链接" title="✅ 适用情况：的直接链接">​</a></h3><ul>
<li>需要频繁进行插入、删除和随机访问操作的场景</li>
<li>对时间复杂度要求严格的随机集合应用</li>
<li>实现随机抽样或随机化算法的数据结构</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-前提条件">⚠️ 前提条件：<a href="https://www.eurekashadow.xin/blog/LeetCode380#%EF%B8%8F-%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6" class="hash-link" aria-label="⚠️ 前提条件：的直接链接" title="⚠️ 前提条件：的直接链接">​</a></h3><ul>
<li>元素值唯一，不支持重复元素</li>
<li>需要足够的内存空间维护数组和哈希表</li>
<li>getRandom调用时集合必须非空</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5️⃣-复杂度分析">5️⃣ 复杂度分析<a href="https://www.eurekashadow.xin/blog/LeetCode380#5%EF%B8%8F%E2%83%A3-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90" class="hash-link" aria-label="5️⃣ 复杂度分析的直接链接" title="5️⃣ 复杂度分析的直接链接">​</a></h2><ul>
<li>
<p>⏱️ 时间复杂度：</p>
<ul>
<li>insert: O(1) 平均时间复杂度</li>
<li>remove: O(1) 平均时间复杂度</li>
<li>getRandom: O(1) 时间复杂度</li>
<li>create: O(1) 时间复杂度</li>
<li>free: O(n) 时间复杂度，n为元素个数</li>
</ul>
</li>
<li>
<p>💾 空间复杂度：O(n)，n为存储的元素个数，需要数组和哈希表存储</p>
</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6️⃣-注意事项">6️⃣ 注意事项<a href="https://www.eurekashadow.xin/blog/LeetCode380#6%EF%B8%8F%E2%83%A3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="6️⃣ 注意事项的直接链接" title="6️⃣ 注意事项的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-边界情况">🚩 边界情况：<a href="https://www.eurekashadow.xin/blog/LeetCode380#-%E8%BE%B9%E7%95%8C%E6%83%85%E5%86%B5" class="hash-link" aria-label="🚩 边界情况：的直接链接" title="🚩 边界情况：的直接链接">​</a></h3><ul>
<li>插入已存在的元素</li>
<li>删除不存在的元素</li>
<li>集合为空时调用getRandom（题目保证不会出现）</li>
<li>集合只有一个元素时的删除操作</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-易错点">💥 易错点：<a href="https://www.eurekashadow.xin/blog/LeetCode380#-%E6%98%93%E9%94%99%E7%82%B9" class="hash-link" aria-label="💥 易错点：的直接链接" title="💥 易错点：的直接链接">​</a></h3><ul>
<li>删除元素后忘记更新交换元素在哈希表中的索引</li>
<li>内存释放不完整，忘记释放哈希表节点</li>
<li>getRandom实现中随机数范围错误，应为[0, numsSize)</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="7️⃣-惑之未解">7️⃣ 惑之未解<a href="https://www.eurekashadow.xin/blog/LeetCode380#7%EF%B8%8F%E2%83%A3-%E6%83%91%E4%B9%8B%E6%9C%AA%E8%A7%A3" class="hash-link" aria-label="7️⃣ 惑之未解的直接链接" title="7️⃣ 惑之未解的直接链接">​</a></h2><p>这是力扣里面的最优解？但是我看不懂~😂</p><p>我现在打算先理解灵码给出的代码吧，之后再来探索下面的内容！🧐</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * FNV哈希算法常量定义</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * FNV32_BASE: FNV-1哈希算法的基础值</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * FNV32_PRIME: FNV-1哈希算法的素数</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">define</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property macro-name" style="color:#36acaa">FNV32_BASE</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression keyword" style="color:#00009f">unsigned</span><span class="token macro property expression" style="color:#36acaa"> </span><span class="token macro property expression keyword" style="color:#00009f">int</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token macro property expression" style="color:#36acaa"> </span><span class="token macro property expression number" style="color:#36acaa">0x811c9dc5</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">define</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property macro-name" style="color:#36acaa">FNV32_PRIME</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression keyword" style="color:#00009f">unsigned</span><span class="token macro property expression" style="color:#36acaa"> </span><span class="token macro property expression keyword" style="color:#00009f">int</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token macro property expression" style="color:#36acaa"> </span><span class="token macro property expression number" style="color:#36acaa">0x01000193</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * FNV-1哈希算法实现</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param buf 要哈希的数据缓冲区</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param len 数据长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 计算得到的哈希值</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">memhash</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">buf</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">size_t</span><span class="token plain"> len</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> hash </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> FNV32_BASE</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">ucbuf </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> buf</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">len</span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		</span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> c </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">ucbuf</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		hash </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hash </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> FNV32_PRIME</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">^</span><span class="token plain"> c</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> hash</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 哈希表项结构体</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 用于链式解决哈希冲突</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> hash</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">                  </span><span class="token comment" style="color:#999988;font-style:italic">// 存储预计算的哈希值</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">next</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">         </span><span class="token comment" style="color:#999988;font-style:italic">// 指向下一个冲突项的指针</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 初始化哈希表项</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param entry 要初始化的哈希表项</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param hash  预计算的哈希值</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">inline</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">hashmap_entry_init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">entry</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> hash</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    entry</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">hash </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> hash</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    entry</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">next </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 根据键值计算哈希值并初始化哈希表项</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">define</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property macro-name function" style="color:#d73a49">__hashmap_entry_init</span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression" style="color:#36acaa">entry</span><span class="token macro property expression punctuation" style="color:#393A34">,</span><span class="token macro property expression" style="color:#36acaa"> key</span><span class="token macro property expression punctuation" style="color:#393A34">,</span><span class="token macro property expression" style="color:#36acaa"> len</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token macro property expression" style="color:#36acaa"> </span><span class="token macro property expression function" style="color:#d73a49">hashmap_entry_init</span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression" style="color:#36acaa">entry</span><span class="token macro property expression punctuation" style="color:#393A34">,</span><span class="token macro property expression" style="color:#36acaa"> </span><span class="token macro property expression function" style="color:#d73a49">memhash</span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression" style="color:#36acaa">key</span><span class="token macro property expression punctuation" style="color:#393A34">,</span><span class="token macro property expression" style="color:#36acaa"> len</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 哈希表项比较回调函数类型定义</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param entry     哈希表中的项</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param key       要比较的键</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param key_data  键数据</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 相等返回0，不相等返回非0值</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">typedef</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">hashmap_entry_cmp_callback</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">entry</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">key</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">key_data</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 哈希表结构体</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">table</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">       </span><span class="token comment" style="color:#999988;font-style:italic">// 哈希桶数组</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> table_size</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 哈希桶数组大小</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> private_size</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// 当前存储的元素数量</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    hashmap_entry_cmp_callback cmp</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">// 元素比较回调函数</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> grow_at</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">               </span><span class="token comment" style="color:#999988;font-style:italic">// 触发扩容的阈值</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> shrink_at</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">             </span><span class="token comment" style="color:#999988;font-style:italic">// 触发收缩的阈值</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 哈希表配置常量</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * hashmap_init_size: 初始哈希表大小</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * hashmap_factor: 负载因子(百分比)</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * hashmap_resize_bit: 扩容/收缩时的位移量</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">define</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property macro-name" style="color:#36acaa">hashmap_init_size</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property expression number" style="color:#36acaa">64</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">define</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property macro-name" style="color:#36acaa">hashmap_factor</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property expression number" style="color:#36acaa">80</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">define</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property macro-name" style="color:#36acaa">hashmap_resize_bit</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property expression number" style="color:#36acaa">2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 分配哈希表桶数组</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param map  哈希表结构体指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param size 桶数组大小</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">alloc_table</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> size</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">table_size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> size</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">table </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">calloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">size</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 初始化为NULL</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 计算扩容和收缩阈值</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">grow_at </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> size </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> hashmap_factor </span><span class="token operator" style="color:#393A34">/</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">100</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">size </span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token plain"> hashmap_init_size</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">shrink_at </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">shrink_at </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">grow_at </span><span class="token operator" style="color:#393A34">/</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"> hashmap_resize_bit</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 比较两个哈希表项是否相等</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param map       哈希表结构体指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param entry     哈希表中的项</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param key       要比较的键</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param key_data  键数据</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 相等返回true，否则返回false</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">inline</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">entry_equals</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">entry</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">key</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">key_data</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">entry</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">hash </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> key</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">hash</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">entry </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> key </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!</span><span class="token plain">map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token function" style="color:#d73a49">cmp</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">entry</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> key</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> key_data</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 初始化哈希表</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param map        哈希表结构体指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param init_size  初始大小</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param cmp        比较回调函数</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">hashmap_init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> init_size</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> hashmap_entry_cmp_callback cmp</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> hashmap_init_size</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">cmp </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> cmp</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 根据初始大小计算合适的哈希表大小</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    init_size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> init_size </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">100</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">/</span><span class="token plain"> hashmap_factor</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">init_size </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> size</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        size </span><span class="token operator" style="color:#393A34">&lt;&lt;=</span><span class="token plain"> hashmap_resize_bit</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">alloc_table</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> size</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">private_size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 计算哈希桶索引</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param map 哈希表结构体指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param key 键项</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 桶索引</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">inline</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">bucket</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">key</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> key</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">hash </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">table_size </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 查找键项在哈希表中的位置指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param map       哈希表结构体指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param key       要查找的键</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param key_data  键数据</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 指向该项指针的指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token operator" style="color:#393A34">*</span><span class="token function" style="color:#d73a49">find_entry_ptr</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">key</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">key_data</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> b </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">bucket</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> key</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">entry </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">table</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">b</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">entry </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!</span><span class="token function" style="color:#d73a49">entry_equals</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">entry</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> key</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> key_data</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        entry </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">entry</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">next</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> entry</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 重新哈希（扩容或收缩）</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param map      哈希表结构体指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param new_size 新的哈希表大小</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rehash</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> new_size</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> old_size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">table_size</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">old_table </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">table</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">alloc_table</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> new_size</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 将旧表中的所有项重新插入新表</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> old_size</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">e </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> old_table</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">e</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">next </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> e</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">next</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> b </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">bucket</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> e</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            e</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">next </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">table</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">b</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">table</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">b</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> e</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            e </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> next</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">free</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">old_table</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 从哈希表中移除项</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param map       哈希表结构体指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param key       要移除的键</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param key_data  键数据</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 被移除的项，不存在则返回NULL</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token function" style="color:#d73a49">hashmap_remove</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">key</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">key_data</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">e</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">old</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    e </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">find_entry_ptr</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> key</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> key_data</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">e</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    old </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">e</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">e </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> old</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">next</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    old</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">next </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 如果元素数量低于收缩阈值，则进行收缩</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">--</span><span class="token plain">map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">private_size </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">shrink_at</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">rehash</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">table_size </span><span class="token operator" style="color:#393A34">&gt;&gt;</span><span class="token plain"> hashmap_resize_bit</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> old</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 检查键是否存在于哈希表中</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param map       哈希表结构体指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param key       要检查的键</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param key_data  键数据</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 存在返回true，否则返回false</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> bool </span><span class="token function" style="color:#d73a49">hashmap_exists</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">key</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">key_data</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">e </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">find_entry_ptr</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> key</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> key_data</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">e</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> false</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> true</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 向哈希表中添加项</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param map    哈希表结构体指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param entry  要添加的项</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">hashmap_add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">entry</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> b </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">bucket</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> entry</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    entry</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">next </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">table</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">b</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">table</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">b</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> entry</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 如果元素数量超过扩容阈值，则进行扩容</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">++</span><span class="token plain">map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">private_size </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">grow_at</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">rehash</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">table_size </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"> hashmap_resize_bit</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 向哈希表中放置项（如果已存在则替换）</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param map    哈希表结构体指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param entry  要放置的项</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 被替换的旧项，没有则返回NULL</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token function" style="color:#d73a49">hashmap_put</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">entry</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">old </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">hashmap_remove</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> entry</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">hashmap_add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> entry</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> old</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 哈希表迭代器结构体</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_iter</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 关联的哈希表</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">next</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 下一个要访问的项</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> table_pos</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">              </span><span class="token comment" style="color:#999988;font-style:italic">// 当前桶索引</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 初始化哈希表迭代器</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param iter 迭代器结构体指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param map  要迭代的哈希表</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">hashmap_iter_init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_iter</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">iter</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    iter</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">map </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> map</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    iter</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">next </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    iter</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">table_pos </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 获取迭代器的下一个项</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param iter 迭代器结构体指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 下一个哈希表项，没有则返回NULL</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token function" style="color:#d73a49">hashmap_iter_next</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_iter</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">iter</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">curr </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> iter</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">next</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">curr</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            iter</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">next </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> curr</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">next</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> curr</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">iter</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">table_pos </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> iter</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">table_size</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        curr </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> iter</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">table</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">iter</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">table_pos</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 清空哈希表并释放所有内存</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param map    哈希表结构体指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param offset 项结构体中hashmap_entry成员的偏移量</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">hashmap_clear</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> offset</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_iter</span><span class="token plain"> iter</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">e</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">hashmap_iter_init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">iter</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> map</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 逐个释放所有项的内存</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">e </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">hashmap_iter_next</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">iter</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">free</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">e </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> offset</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">free</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">table</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">memset</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain">   </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 整型键值的哈希表项结构体</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">int_hashmap_entry</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> key</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">                    </span><span class="token comment" style="color:#999988;font-style:italic">// 键</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> value</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">                  </span><span class="token comment" style="color:#999988;font-style:italic">// 值</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> entry</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 基础哈希表项</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 计算int_hashmap_entry中entry成员的偏移量</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">define</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property macro-name" style="color:#36acaa">INT_HASHMAP_OFFSET</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property expression function" style="color:#d73a49">offsetof</span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression keyword" style="color:#00009f">struct</span><span class="token macro property expression" style="color:#36acaa"> </span><span class="token macro property expression class-name" style="color:#36acaa">int_hashmap_entry</span><span class="token macro property expression punctuation" style="color:#393A34">,</span><span class="token macro property expression" style="color:#36acaa"> entry</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token macro property expression" style="color:#36acaa"> </span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 通过哈希表项指针获取包含它的int_hashmap_entry指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">define</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property macro-name function" style="color:#d73a49">get_int_hashmap_entry_data</span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression" style="color:#36acaa">entry</span><span class="token macro property expression punctuation" style="color:#393A34">,</span><span class="token macro property expression" style="color:#36acaa"> type</span><span class="token macro property expression punctuation" style="color:#393A34">,</span><span class="token macro property expression" style="color:#36acaa"> member</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token macro property expression" style="color:#36acaa"> </span><span class="token macro property punctuation" style="color:#393A34">\</span><span class="token macro property" style="color:#36acaa"></span><br></span><span class="token-line" style="color:#393A34"><span class="token macro property" style="color:#36acaa">    </span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression" style="color:#36acaa">type </span><span class="token macro property expression operator" style="color:#393A34">*</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token macro property expression" style="color:#36acaa"> </span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression" style="color:#36acaa">u_char </span><span class="token macro property expression operator" style="color:#393A34">*</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression" style="color:#36acaa">entry</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token macro property expression" style="color:#36acaa"> </span><span class="token macro property expression operator" style="color:#393A34">-</span><span class="token macro property expression" style="color:#36acaa"> </span><span class="token macro property expression function" style="color:#d73a49">offsetof</span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression" style="color:#36acaa">type</span><span class="token macro property expression punctuation" style="color:#393A34">,</span><span class="token macro property expression" style="color:#36acaa"> member</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 创建整型哈希表项</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param key   键</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param value 值</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 新创建的项，失败返回NULL</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">inline</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">int_hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token function" style="color:#d73a49">int_hashmap_entry_create</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> key</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> value</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">int_hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">int_entry</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    int_entry </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">malloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">int_hashmap_entry</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">int_entry</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    int_entry</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">key </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> key</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    int_entry</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">value </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> value</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">__hashmap_entry_init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">int_entry</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">entry</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">key</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> int_entry</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 整型哈希表结构体</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">int_hashmap</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap</span><span class="token plain"> map</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 基础哈希表</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 整型哈希表项比较函数</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param entry     哈希表中的项</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param key       要比较的键</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param key_data  键数据</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 相等返回0，不相等返回非0值</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">int_hashmap_entry_cmp</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">entry</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">key</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">key_data</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">int_hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">int_entry </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">get_int_hashmap_entry_data</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">entry</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">int_hashmap_entry</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> entry</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">key_data</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">int_entry</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">key </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> key_data</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">int_hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">key_entry </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">get_int_hashmap_entry_data</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">key</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">int_hashmap_entry</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> entry</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">int_entry</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">key </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> key_entry</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">key</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 初始化整型哈希表</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param int_map   整型哈希表结构体指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param init_size 初始大小</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">inline</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">int_hashmap_init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">int_hashmap</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">int_map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> init_size</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">hashmap_init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">int_map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> init_size</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> int_hashmap_entry_cmp</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 从整型哈希表中移除项</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param int_map 整型哈希表结构体指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param key     要移除的键</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 被移除的项，不存在则返回NULL</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">inline</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">int_hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token function" style="color:#d73a49">int_hashmap_remove</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">int_hashmap</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">int_map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> key</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> key_entry</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">__hashmap_entry_init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">key_entry</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">key</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">e </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">hashmap_remove</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">int_map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">key_entry</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">key</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">e</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">int_hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">data </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">get_int_hashmap_entry_data</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">e</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">int_hashmap_entry</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> entry</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> data</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 向整型哈希表中放置项</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param int_map 整型哈希表结构体指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param key     键</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param value   值</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 被替换的旧项，没有则返回NULL</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">inline</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">int_hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token function" style="color:#d73a49">int_hashmap_put</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">int_hashmap</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">int_map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> key</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> value</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">e </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">hashmap_put</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">int_map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token function" style="color:#d73a49">int_hashmap_entry_create</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">key</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> value</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">entry</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">e</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">int_hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">data </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">get_int_hashmap_entry_data</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">e</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">int_hashmap_entry</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> entry</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> data</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 检查键是否存在于整型哈希表中</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param int_map 整型哈希表结构体指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param key     要检查的键</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 存在返回true，否则返回false</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">inline</span><span class="token plain"> bool </span><span class="token function" style="color:#d73a49">int_hashmap_exists</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">int_hashmap</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">int_map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> key</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> key_entry</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">__hashmap_entry_init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">key_entry</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">key</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">hashmap_exists</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">int_map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">key_entry</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">key</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 向整型哈希表中添加项</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param int_map 整型哈希表结构体指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param key     键</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param value   值</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">inline</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">int_hashmap_add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">int_hashmap</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">int_map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> key</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> value</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">hashmap_add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">int_map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token function" style="color:#d73a49">int_hashmap_entry_create</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">key</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> value</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">entry</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 清空整型哈希表并释放所有内存</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param int_map 整型哈希表结构体指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">inline</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">int_hashmap_clear</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">int_hashmap</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">int_map</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">hashmap_clear</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">int_map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> INT_HASHMAP_OFFSET</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * RandomizedSet结构体</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 结合数组和哈希表实现O(1)时间复杂度的插入、删除和随机获取</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">typedef</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">nums</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">                  </span><span class="token comment" style="color:#999988;font-style:italic">// 存储实际元素的数组</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> alloc</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">                  </span><span class="token comment" style="color:#999988;font-style:italic">// 数组已分配的空间大小</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> nr</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">                     </span><span class="token comment" style="color:#999988;font-style:italic">// 数组中当前元素的数量</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">int_hashmap</span><span class="token plain"> map</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">// 整型哈希表，存储元素值到数组索引的映射</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> RandomizedSet</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 默认数组分配大小</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">define</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property macro-name" style="color:#36acaa">DEFAULT_ALLOC</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property expression number" style="color:#36acaa">1024</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 创建RandomizedSet对象</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 新创建的RandomizedSet对象指针，失败返回NULL</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RandomizedSet </span><span class="token operator" style="color:#393A34">*</span><span class="token function" style="color:#d73a49">randomizedSetCreate</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    RandomizedSet </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">rand_set</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    rand_set </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">malloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">RandomizedSet</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">rand_set</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    rand_set</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">nums </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">calloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">DEFAULT_ALLOC</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">rand_set</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">nums</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">free</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">rand_set</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    rand_set</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">alloc </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> DEFAULT_ALLOC</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    rand_set</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">nr </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">int_hashmap_init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">rand_set</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1024</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> rand_set</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 向集合中插入元素</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param rand_set RandomizedSet对象指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param val      要插入的元素值</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 插入成功返回true，元素已存在返回false</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">bool </span><span class="token function" style="color:#d73a49">randomizedSetInsert</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">RandomizedSet </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">rand_set</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> val</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 检查元素是否已存在</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">int_hashmap_exists</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">rand_set</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> val</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> false</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 如果数组空间不足，则扩容</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">rand_set</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">nr </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> rand_set</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">alloc</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> new_alloc </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> rand_set</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">alloc </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        rand_set</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">nums </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">realloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">rand_set</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">nums</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> new_alloc </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">rand_set</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">nums</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> false</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        rand_set</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">alloc </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> new_alloc</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token comment" style="color:#999988;font-style:italic">// 把新元素放在数组当前元素个数对应的索引位置</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">numsSize</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> val</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 在哈希表中记录元素值和其在数组中的索引</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">int_hashmap_add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">rand_set</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> val</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> rand_set</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">nr</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">//数组中当前元素数量+1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	rand_set</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">nr</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> true</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 从集合中删除元素</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param rand_set RandomizedSet对象指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param val      要删除的元素值</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 删除成功返回true，元素不存在返回false</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">bool </span><span class="token function" style="color:#d73a49">randomizedSetRemove</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">RandomizedSet </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">rand_set</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> val</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 从哈希表中移除元素并获取其信息</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">int_hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">entry </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">int_hashmap_remove</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">rand_set</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> val</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">entry</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> false</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 获取要删除元素在数组中的索引</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> index </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> entry</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">value</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 获取数组中最后一个元素的值</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> last_val </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> rand_set</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">--</span><span class="token plain">rand_set</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">nr</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 将最后一个元素移动到要删除元素的位置</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    rand_set</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">index</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> last_val</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 如果删除的不是最后一个元素，需要更新最后一个元素在哈希表中的索引</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">index </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> rand_set</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">nr</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">int_hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">last_entry </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">int_hashmap_remove</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">rand_set</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> last_val</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        last_entry</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">value </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> index</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">hashmap_add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">rand_set</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">last_entry</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">entry</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">free</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">entry</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 释放被删除项的内存</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> true</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 随机获取集合中的一个元素</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param rand_set RandomizedSet对象指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 随机返回的元素值</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">randomizedSetGetRandom</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">RandomizedSet </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">rand_set</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 使用随机数生成0到nr-1之间的索引</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> rand_set</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token function" style="color:#d73a49">rand</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">%</span><span class="token plain"> rand_set</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">nr</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 释放RandomizedSet对象占用的内存</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param rand_set RandomizedSet对象指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">randomizedSetFree</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">RandomizedSet </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">rand_set</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">rand_set</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">nums</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">free</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">rand_set</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">nums</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">int_hashmap_clear</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">rand_set</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">free</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">rand_set</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * Your RandomizedSet struct will be instantiated and called as such:</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * RandomizedSet* obj = randomizedSetCreate();</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * bool param_1 = randomizedSetInsert(obj, val);</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * bool param_2 = randomizedSetRemove(obj, val);</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * int param_3 = randomizedSetGetRandom(obj);</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * randomizedSetFree(obj);</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">*/</span><br></span></code></pre></div></div></div></div></details>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="补充解释"><span class="B2_JnYG"><a href="https://www.eurekashadow.xin/blog/LeetCode380plus">补充解释</a></span><a href="https://www.eurekashadow.xin/blog/LeetCode380#%E8%A1%A5%E5%85%85%E8%A7%A3%E9%87%8A" class="hash-link" aria-label="补充解释的直接链接" title="补充解释的直接链接">​</a></h2>]]></content>
        <author>
            <name>Eureka X</name>
            <uri>https://github.com/EurekaShadow</uri>
        </author>
        <category label="数组" term="数组"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[H 指数]]></title>
        <id>https://www.eurekashadow.xin/blog/LeetCode274</id>
        <link href="https://www.eurekashadow.xin/blog/LeetCode274"/>
        <updated>2025-08-04T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[力扣面试经典——274题]]></summary>
        <content type="html"><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="力扣面试经典274题"><span class="B2_JnYG"><a href="https://leetcode.cn/problems/h-index/description/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer" title="力扣">力扣面试经典——274题</a></span><a href="https://www.eurekashadow.xin/blog/LeetCode274#%E5%8A%9B%E6%89%A3%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B8274%E9%A2%98" class="hash-link" aria-label="力扣面试经典274题的直接链接" title="力扣面试经典274题的直接链接">​</a></h3>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-参考代码">💡 参考代码：<a href="https://www.eurekashadow.xin/blog/LeetCode274#-%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81" class="hash-link" aria-label="💡 参考代码：的直接链接" title="💡 参考代码：的直接链接">​</a></h3>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 计算研究者的h指数</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * h指数的定义：研究者至少发表了h篇论文，并且至少有h篇论文被引用次数大于等于h</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param citations 整数数组，citations[i]表示第i篇论文的引用次数</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param citationsSize 数组citations的长度，即论文总数</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 返回该研究者的h指数</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 算法思路：</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 1. 使用计数排序的思想，统计每个引用次数的论文数量</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 2. 从高到低遍历可能的h值，找到满足条件的最大h值</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 时间复杂度：O(n)</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 空间复杂度：O(n)</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">hIndex</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> citations</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> citationsSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 创建计数数组，大小为 citationsSize + 1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// count[i] 表示引用次数为i的论文数量</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> count </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token function" style="color:#d73a49">calloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">citationsSize </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 统计每个引用次数的论文数量</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 如果引用次数超过论文总数，则统一计入count[citationsSize]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> citationsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">citations</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> citationsSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            count</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">citationsSize</span><span class="token punctuation" style="color:#393A34">]</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 引用次数≥n的论文都计入最高计数位</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            count</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">citations</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">]</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">   </span><span class="token comment" style="color:#999988;font-style:italic">// 正常计数</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 从后往前累加，计算引用次数大于等于i的论文数量</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// sum表示引用次数≥i的论文总数</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> sum </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> citationsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        sum </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> count</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 累加引用次数≥i的论文数量</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">sum </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">   </span><span class="token comment" style="color:#999988;font-style:italic">// 如果引用次数≥i的论文数量≥i，则h指数为i</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token function" style="color:#d73a49">free</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">count</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">free</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">count</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 如果没有找到有效的h指数，返回0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-总结">📖 总结：<a href="https://www.eurekashadow.xin/blog/LeetCode274#-%E6%80%BB%E7%BB%93" class="hash-link" aria-label="📖 总结：的直接链接" title="📖 总结：的直接链接">​</a></h3>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>点击展开题目总结</summary><div><div class="collapsibleContent_i85q"><h1>🤔 H 指数</h1><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1️⃣-题目核心信息">1️⃣ 题目核心信息<a href="https://www.eurekashadow.xin/blog/LeetCode274#1%EF%B8%8F%E2%83%A3-%E9%A2%98%E7%9B%AE%E6%A0%B8%E5%BF%83%E4%BF%A1%E6%81%AF" class="hash-link" aria-label="1️⃣ 题目核心信息的直接链接" title="1️⃣ 题目核心信息的直接链接">​</a></h2><p>🎯 <strong>功能描述</strong>：根据给定的论文引用次数数组，计算研究者的h指数。h指数是指研究者至少发表了h篇论文，且这h篇论文每篇都被引用至少h次。</p><p>📥 <strong>输入输出</strong>：</p><ul>
<li><strong>输入</strong>：<code>int* citations</code>（论文引用次数数组），<code>int citationsSize</code>（论文总数）</li>
<li><strong>输出</strong>：返回h指数值</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2️⃣-实现原理">2️⃣ 实现原理<a href="https://www.eurekashadow.xin/blog/LeetCode274#2%EF%B8%8F%E2%83%A3-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86" class="hash-link" aria-label="2️⃣ 实现原理的直接链接" title="2️⃣ 实现原理的直接链接">​</a></h2><p>💡 <strong>核心思路</strong>：使用计数排序的思想，统计每个引用次数的论文数量，然后从高到低查找满足条件的最大h值。</p><p>📋 <strong>实现步骤</strong>：</p><ol>
<li>创建大小为<code>citationsSize + 1</code>的计数数组，用于统计每个引用次数的论文数量</li>
<li>遍历引用数组，将引用次数超过<code>citationsSize</code>的论文统一计入最高计数位</li>
<li>从后往前遍历计数数组，累加引用次数大于等于当前索引的论文总数</li>
<li>当累加和大于等于当前索引时，该索引即为最大的h指数</li>
</ol><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3️⃣-关键点解析">3️⃣ 关键点解析<a href="https://www.eurekashadow.xin/blog/LeetCode274#3%EF%B8%8F%E2%83%A3-%E5%85%B3%E9%94%AE%E7%82%B9%E8%A7%A3%E6%9E%90" class="hash-link" aria-label="3️⃣ 关键点解析的直接链接" title="3️⃣ 关键点解析的直接链接">​</a></h2><p>原始思路是遍历每个可能的h值并统计满足条件的论文数量，时间复杂度为O(n²)。最优解使用计数排序思想，将时间复杂度优化到O(n)。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-代码技巧">🎯 代码技巧<a href="https://www.eurekashadow.xin/blog/LeetCode274#-%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7" class="hash-link" aria-label="🎯 代码技巧的直接链接" title="🎯 代码技巧的直接链接">​</a></h3><ul>
<li>计数排序优化：利用引用次数的有限范围特性</li>
<li>边界处理：将引用次数超过n的论文统一处理</li>
<li>逆序累加：从最大可能的h值开始查找，确保找到最大值</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4️⃣-使用场景">4️⃣ 使用场景<a href="https://www.eurekashadow.xin/blog/LeetCode274#4%EF%B8%8F%E2%83%A3-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="4️⃣ 使用场景的直接链接" title="4️⃣ 使用场景的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-适用情况">✅ 适用情况：<a href="https://www.eurekashadow.xin/blog/LeetCode274#-%E9%80%82%E7%94%A8%E6%83%85%E5%86%B5" class="hash-link" aria-label="✅ 适用情况：的直接链接" title="✅ 适用情况：的直接链接">​</a></h3><ul>
<li>计算学术评价指标</li>
<li>统计分析场景</li>
<li>需要评估"数量与质量"综合指标的场景</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-前提条件">⚠️ 前提条件：<a href="https://www.eurekashadow.xin/blog/LeetCode274#%EF%B8%8F-%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6" class="hash-link" aria-label="⚠️ 前提条件：的直接链接" title="⚠️ 前提条件：的直接链接">​</a></h3><ul>
<li>输入数组不为空</li>
<li>引用次数为非负整数</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5️⃣-复杂度分析">5️⃣ 复杂度分析<a href="https://www.eurekashadow.xin/blog/LeetCode274#5%EF%B8%8F%E2%83%A3-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90" class="hash-link" aria-label="5️⃣ 复杂度分析的直接链接" title="5️⃣ 复杂度分析的直接链接">​</a></h2><ul>
<li>
<p>⏱️ 时间复杂度：O(n)，需要遍历数组两次</p>
</li>
<li>
<p>💾 空间复杂度：O(n)，需要额外的计数数组</p>
</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6️⃣-注意事项">6️⃣ 注意事项<a href="https://www.eurekashadow.xin/blog/LeetCode274#6%EF%B8%8F%E2%83%A3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="6️⃣ 注意事项的直接链接" title="6️⃣ 注意事项的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-边界情况">🚩 边界情况：<a href="https://www.eurekashadow.xin/blog/LeetCode274#-%E8%BE%B9%E7%95%8C%E6%83%85%E5%86%B5" class="hash-link" aria-label="🚩 边界情况：的直接链接" title="🚩 边界情况：的直接链接">​</a></h3><ul>
<li>空数组或只有一个元素</li>
<li>所有论文引用次数都为0</li>
<li>所有论文引用次数都很大</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-易错点">💥 易错点：<a href="https://www.eurekashadow.xin/blog/LeetCode274#-%E6%98%93%E9%94%99%E7%82%B9" class="hash-link" aria-label="💥 易错点：的直接链接" title="💥 易错点：的直接链接">​</a></h3><ul>
<li>混淆h指数的定义，误以为需要恰好h篇论文引用h次</li>
<li>忘记释放动态分配的内存</li>
<li>边界条件处理不当，如h值可能为0的情况</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="7⃣-补充说明">7⃣ 补充说明<a href="https://www.eurekashadow.xin/blog/LeetCode274#7%E2%83%A3-%E8%A1%A5%E5%85%85%E8%AF%B4%E6%98%8E" class="hash-link" aria-label="7⃣ 补充说明的直接链接" title="7⃣ 补充说明的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="h-指数解释">H 指数解释<a href="https://www.eurekashadow.xin/blog/LeetCode274#h-%E6%8C%87%E6%95%B0%E8%A7%A3%E9%87%8A" class="hash-link" aria-label="H 指数解释的直接链接" title="H 指数解释的直接链接">​</a></h3><p>假设某研究者发表了 5 篇论文，引用次数分别为：<code>[3, 0, 6, 1, 5]</code></p><p>我们要找最大的 <code>h</code>，使得至少有 h 篇论文被引用了至少 <code>h</code> 次。</p><p>尝试几个 <code>h</code> 值：</p><ul>
<li>h = 0：0 篇论文引用 ≥ 0 → 成立（但我们要找最大的 h）</li>
<li>h = 1：至少 1 篇论文引用 ≥ 1 → 成立（有 4 篇）</li>
<li>h = 2：至少 2 篇论文引用 ≥ 2 → 成立（有 3 篇）</li>
<li>h = 3：至少 3 篇论文引用 ≥ 3 → 成立（有 3 篇）</li>
<li>h = 4：至少 4 篇论文引用 ≥ 4 → 不成立（只有 2 篇）</li>
<li>h = 5：至少 5 篇论文引用 ≥ 5 → 不成立（只有 2 篇）</li>
</ul><p>所以 h 指数是 3。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="h指数计算示例详解">h指数计算示例详解<a href="https://www.eurekashadow.xin/blog/LeetCode274#h%E6%8C%87%E6%95%B0%E8%AE%A1%E7%AE%97%E7%A4%BA%E4%BE%8B%E8%AF%A6%E8%A7%A3" class="hash-link" aria-label="h指数计算示例详解的直接链接" title="h指数计算示例详解的直接链接">​</a></h3><p>例子：<code>citations = [3, 0, 6, 1, 5]</code></p><p>论文引用次数数组为 <code>[3, 0, 6, 1, 5]</code>，共5篇论文。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="第一步初始化计数数组">第一步：初始化计数数组<a href="https://www.eurekashadow.xin/blog/LeetCode274#%E7%AC%AC%E4%B8%80%E6%AD%A5%E5%88%9D%E5%A7%8B%E5%8C%96%E8%AE%A1%E6%95%B0%E6%95%B0%E7%BB%84" class="hash-link" aria-label="第一步：初始化计数数组的直接链接" title="第一步：初始化计数数组的直接链接">​</a></h3><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> count </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token function" style="color:#d73a49">calloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">citationsSize </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre></div></div><p>创建一个长度为 5 + 1 = 6 的数组 count，所有元素初始为 0：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">count </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">索引</span><span class="token operator" style="color:#393A34">:</span><span class="token plain">    </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">1</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">2</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">3</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">4</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">5</span><br></span></code></pre></div></div><p><strong>calloc与malloc的区别</strong></p><ul>
<li><code>malloc</code>: 只分配内存，不初始化内容（内存中可能包含随机数据）</li>
<li><code>calloc</code>: 分配内存后会将所有字节初始化为0</li>
</ul><p><strong>calloc函数原型：</strong></p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">void</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">calloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">size_t</span><span class="token plain"> num</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">size_t</span><span class="token plain"> size</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="第二步统计每个引用次数的论文数量">第二步：统计每个引用次数的论文数量<a href="https://www.eurekashadow.xin/blog/LeetCode274#%E7%AC%AC%E4%BA%8C%E6%AD%A5%E7%BB%9F%E8%AE%A1%E6%AF%8F%E4%B8%AA%E5%BC%95%E7%94%A8%E6%AC%A1%E6%95%B0%E7%9A%84%E8%AE%BA%E6%96%87%E6%95%B0%E9%87%8F" class="hash-link" aria-label="第二步：统计每个引用次数的论文数量的直接链接" title="第二步：统计每个引用次数的论文数量的直接链接">​</a></h3><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> citationsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">citations</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> citationsSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        count</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">citationsSize</span><span class="token punctuation" style="color:#393A34">]</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        count</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">citations</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">]</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div><p>逐个处理每篇论文的引用次数：</p><ul>
<li><code>citations[0]</code> = <code>3</code> → <code>count[3]++</code> → <code>count</code> = <code>[0, 0, 0, 1, 0, 0]</code></li>
<li><code>citations[1]</code> = <code>0</code> → <code>count[0]++</code> → <code>count</code> = <code>[1, 0, 0, 1, 0, 0]</code></li>
<li><code>citations[2]</code> = <code>6</code> → <code>6</code> &gt;= <code>5</code> → <code>count[5]++</code> → <code>count</code> = <code>[1, 0, 0, 1, 0, 1]</code></li>
<li><code>citations[3]</code> = <code>1</code> → <code>count[1]++</code> → <code>count</code> = <code>[1, 1, 0, 1, 0, 1]</code></li>
<li><code>citations[4]</code> = <code>5</code> → <code>count[5]++</code> → <code>count</code> = <code>[1, 1, 0, 1, 0, 2]</code>
最终 count 数组为：</li>
</ul><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">count </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">索引</span><span class="token operator" style="color:#393A34">:</span><span class="token plain">    </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">1</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">2</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">3</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">4</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">5</span><br></span></code></pre></div></div><p>这表示：</p><ul>
<li>引用次数为 0 的论文有 1 篇</li>
<li>引用次数为 1 的论文有 1 篇</li>
<li>引用次数为 2 的论文有 0 篇</li>
<li>引用次数为 3 的论文有 1 篇</li>
<li>引用次数为 4 的论文有 0 篇</li>
<li>引用次数 ≥ 5 的论文有 2 篇</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="第三步从后往前累加找最大的-h">第三步：从后往前累加，找最大的 h<a href="https://www.eurekashadow.xin/blog/LeetCode274#%E7%AC%AC%E4%B8%89%E6%AD%A5%E4%BB%8E%E5%90%8E%E5%BE%80%E5%89%8D%E7%B4%AF%E5%8A%A0%E6%89%BE%E6%9C%80%E5%A4%A7%E7%9A%84-h" class="hash-link" aria-label="第三步：从后往前累加，找最大的 h的直接链接" title="第三步：从后往前累加，找最大的 h的直接链接">​</a></h3><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> sum </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> citationsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    sum </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> count</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">sum </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">free</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">count</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div><p>从 <code>i = 5</code> 开始往下检查：</p><ul>
<li>i = 5:</li>
</ul><p><code>sum += count[5]</code> → <code>sum = 0 + 2 = 2</code></p><ul>
<li>
<p>判断 <code>sum &gt;= i</code> → <code>2 &gt;= 5</code>？ ❌ 不成立</p>
</li>
<li>
<p>i = 4:</p>
</li>
<li>
<p><code>sum += count[4]</code> → <code>sum = 2 + 0 = 2</code></p>
</li>
<li>
<p>判断 <code>sum &gt;= i</code> → <code>2 &gt;= 4</code>？ ❌ 不成立</p>
</li>
<li>
<p>i = 3:</p>
</li>
<li>
<p><code>sum += count[3]</code> → <code>sum = 2 + 1 = 3</code></p>
</li>
<li>
<p>判断 <code>sum &gt;= i</code> → <code>3 &gt;= 3</code>？ ✅ 成立！返回 3
结果
函数返回 <code>3</code>，这就是该研究者的 <code>h</code> 指数。</p>
</li>
</ul><p>验证一下
引用次数数组：[3, 0, 6, 1, 5]</p><p>我们检查是否有至少 3 篇论文引用次数 ≥ 3：</p><ul>
<li>论文1: 3 ≥ 3 ✅</li>
<li>论文2: 0 ≥ 3 ❌</li>
<li>论文3: 6 ≥ 3 ✅</li>
<li>论文4: 1 ≥ 3 ❌</li>
<li>论文5: 5 ≥ 3 ✅</li>
</ul><p>有 3 篇论文满足条件，所以 h 指数确实是 3。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="最初思路">最初思路<a href="https://www.eurekashadow.xin/blog/LeetCode274#%E6%9C%80%E5%88%9D%E6%80%9D%E8%B7%AF" class="hash-link" aria-label="最初思路的直接链接" title="最初思路的直接链接">​</a></h3><p>惭愧，这题我最初没做出来，题目理解都是错的，上面的最优解自然是AI给，下面这个我最初的思路，经过AI完善逻辑后的代码：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">hIndex</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> citations</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> citationsSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> maxH </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 尝试每个可能的h值（从0到citationsSize）</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> h </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> h </span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token plain"> citationsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> h</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> count </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 计算引用次数&gt;=h的论文数量</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> citationsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">citations</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> h</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                count</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 如果引用次数&gt;=h的论文数量&gt;=h，则h是一个有效值</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">count </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> h</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">h </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> maxH</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                maxH </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> h</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> maxH</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="对h指数计算算法的理解">对H指数计算算法的理解<a href="https://www.eurekashadow.xin/blog/LeetCode274#%E5%AF%B9h%E6%8C%87%E6%95%B0%E8%AE%A1%E7%AE%97%E7%AE%97%E6%B3%95%E7%9A%84%E7%90%86%E8%A7%A3" class="hash-link" aria-label="对H指数计算算法的理解的直接链接" title="对H指数计算算法的理解的直接链接">​</a></h3><p><strong>算法核心思路</strong></p><ul>
<li>
<p><strong>H指数定义</strong>：有h篇论文至少被引用h次，其余论文引用次数不超过h次</p>
</li>
<li>
<p><strong>关键观察</strong>：H指数的取值范围是[0, n]，其中n是论文总数</p>
</li>
</ul><p><strong>算法步骤解析</strong></p><p><strong>1.构建计数数组</strong></p><ul>
<li>
<p>创建长度为 n+1 的数组 count</p>
</li>
<li>
<p>count[i] 表示引用次数恰好为 i 的论文数量</p>
</li>
<li>
<p>对于引用次数超过 n 的论文，统一计入 count[n]</p>
</li>
</ul><p><strong>2.统计引用次数分布</strong></p><ul>
<li>
<p>遍历 citations 数组</p>
</li>
<li>
<p>对每个引用次数进行计数统计</p>
</li>
</ul><p><strong>3.计算H指数</strong></p><ul>
<li>
<p>从后向前遍历 count 数组</p>
</li>
<li>
<p>累计引用次数≥当前下标的文章数量</p>
</li>
<li>
<p>当累计数量≥当前下标时，该下标即为H指数</p>
</li>
</ul></div></div></details>]]></content>
        <author>
            <name>Eureka X</name>
            <uri>https://github.com/EurekaShadow</uri>
        </author>
        <category label="数组" term="数组"/>
    </entry>
</feed>