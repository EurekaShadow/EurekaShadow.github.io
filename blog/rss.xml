<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="rss.xsl"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>我的网站 Blog</title>
        <link>https://www.eurekashadow.xin/blog</link>
        <description>我的网站 Blog</description>
        <lastBuildDate>Fri, 08 Aug 2025 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>zh-Hans</language>
        <item>
            <title><![CDATA[分发糖果]]></title>
            <link>https://www.eurekashadow.xin/blog/LeetCode135</link>
            <guid>https://www.eurekashadow.xin/blog/LeetCode135</guid>
            <pubDate>Fri, 08 Aug 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[力扣面试经典——135题]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="力扣面试经典135题"><span class="B2_JnYG"><a href="https://leetcode.cn/problems/candy/description/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer" title="力扣">力扣面试经典——135题</a></span><a href="https://www.eurekashadow.xin/blog/LeetCode135#%E5%8A%9B%E6%89%A3%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B8135%E9%A2%98" class="hash-link" aria-label="力扣面试经典135题的直接链接" title="力扣面试经典135题的直接链接">​</a></h3>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-参考代码">💡 参考代码：<a href="https://www.eurekashadow.xin/blog/LeetCode135#-%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81" class="hash-link" aria-label="💡 参考代码：的直接链接" title="💡 参考代码：的直接链接">​</a></h3>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @brief 计算分发糖果的最少数量</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 根据孩子们的评分分配糖果，满足以下条件：</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 1. 每个孩子至少分配到1个糖果</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 2. 相邻两个孩子中，评分更高的孩子会获得更多的糖果</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param ratings 孩子们的评分数组</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param ratingsSize 评分数组的长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return int 需要准备的最少糖果数目</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @details 算法采用两次遍历策略：</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          1. 从左到右遍历：确保右边评分高的孩子比左边相邻孩子获得更多糖果</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          2. 从右到左遍历：确保左边评分高的孩子比右边相邻孩子获得更多糖果</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          时间复杂度：O(n)，空间复杂度：O(n)</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @example </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          输入：ratings = [1,0,2]</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          输出：5</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          解释：分别给三个孩子分发2、1、2颗糖果</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @example</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          输入：ratings = [1,2,2]</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          输出：4</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          解释：分别给三个孩子分发1、2、1颗糖果</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">candy</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> ratings</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> ratingsSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ratingsSize </span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> ratingsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 初始化每个孩子至少1个糖果</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> candies </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token function" style="color:#d73a49">calloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ratingsSize</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> ratingsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        candies</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 从左到右遍历：确保右边评分高的孩子比左边相邻的孩子获得更多糖果</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> ratingsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ratings</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> ratings</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            candies</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> candies</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 从右到左遍历：确保左边评分高的孩子比右边相邻的孩子获得更多糖果</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ratingsSize </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ratings</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> ratings</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            candies</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">candies</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> candies</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> candies</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> candies</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 计算总糖果数</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> total </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> ratingsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        total </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> candies</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">free</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">candies</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> total</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-总结">📖 总结：<a href="https://www.eurekashadow.xin/blog/LeetCode135#-%E6%80%BB%E7%BB%93" class="hash-link" aria-label="📖 总结：的直接链接" title="📖 总结：的直接链接">​</a></h3>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>点击展开题目总结</summary><div><div class="collapsibleContent_i85q"><h1>🤔 分发糖果</h1><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1️⃣-题目核心信息">1️⃣ 题目核心信息<a href="https://www.eurekashadow.xin/blog/LeetCode135#1%EF%B8%8F%E2%83%A3-%E9%A2%98%E7%9B%AE%E6%A0%B8%E5%BF%83%E4%BF%A1%E6%81%AF" class="hash-link" aria-label="1️⃣ 题目核心信息的直接链接" title="1️⃣ 题目核心信息的直接链接">​</a></h2><p>🎯 <strong>功能描述</strong>：根据孩子们的评分分配糖果，确保每个孩子至少获得1颗糖果，且评分更高的孩子比相邻孩子获得更多糖果，求最少需要的糖果总数。</p><p>📥 <strong>输入输出</strong>：</p><ul>
<li><strong>输入</strong>：<code>int* ratings</code> - 孩子们的评分数组，<code>int ratingsSize</code> - 数组长度</li>
<li><strong>输出</strong>：<code>int</code> - 需要准备的最少糖果数目</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2️⃣-实现原理">2️⃣ 实现原理<a href="https://www.eurekashadow.xin/blog/LeetCode135#2%EF%B8%8F%E2%83%A3-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86" class="hash-link" aria-label="2️⃣ 实现原理的直接链接" title="2️⃣ 实现原理的直接链接">​</a></h2><p>💡 <strong>核心思路</strong>：采用两次遍历的贪心算法，分别处理左右两个方向的约束关系，确保满足所有相邻比较条件。</p><p>📋 <strong>实现步骤</strong>：</p><ol>
<li>初始化每个孩子分配1颗糖果</li>
<li>从左到右遍历，确保右边评分高的孩子比左边相邻孩子获得更多糖果</li>
<li>从右到左遍历，确保左边评分高的孩子比右边相邻孩子获得更多糖果</li>
<li>累加所有孩子的糖果数作为结果返回</li>
</ol><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3️⃣-关键点解析">3️⃣ 关键点解析<a href="https://www.eurekashadow.xin/blog/LeetCode135#3%EF%B8%8F%E2%83%A3-%E5%85%B3%E9%94%AE%E7%82%B9%E8%A7%A3%E6%9E%90" class="hash-link" aria-label="3️⃣ 关键点解析的直接链接" title="3️⃣ 关键点解析的直接链接">​</a></h2><p>原始思路是单向遍历，但存在问题：只考虑了单方向的约束关系，忽略了反向也可能影响糖果分配。最优解通过两次遍历，分别处理左右两个方向的约束，确保结果正确。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-代码技巧">🎯 代码技巧<a href="https://www.eurekashadow.xin/blog/LeetCode135#-%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7" class="hash-link" aria-label="🎯 代码技巧的直接链接" title="🎯 代码技巧的直接链接">​</a></h3><ul>
<li>使用 <code>calloc</code> 初始化数组，同时分配内存和置零</li>
<li>两次遍历分别处理不同方向的约束条件</li>
<li>使用三元运算符 <code>? :</code> 简洁地实现 <code>max</code> 操作</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4️⃣-使用场景">4️⃣ 使用场景<a href="https://www.eurekashadow.xin/blog/LeetCode135#4%EF%B8%8F%E2%83%A3-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="4️⃣ 使用场景的直接链接" title="4️⃣ 使用场景的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-适用情况">✅ 适用情况：<a href="https://www.eurekashadow.xin/blog/LeetCode135#-%E9%80%82%E7%94%A8%E6%83%85%E5%86%B5" class="hash-link" aria-label="✅ 适用情况：的直接链接" title="✅ 适用情况：的直接链接">​</a></h3><ul>
<li>需要满足双向相邻约束的优化问题</li>
<li>资源分配需要考虑左右邻居关系的场景</li>
<li>贪心算法中需要多轮约束满足的问题</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-前提条件">⚠️ 前提条件：<a href="https://www.eurekashadow.xin/blog/LeetCode135#%EF%B8%8F-%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6" class="hash-link" aria-label="⚠️ 前提条件：的直接链接" title="⚠️ 前提条件：的直接链接">​</a></h3><ul>
<li>输入数组不为空</li>
<li>评分值为非负整数</li>
<li>需要满足题目规定的两个分配条件</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5️⃣-复杂度分析">5️⃣ 复杂度分析<a href="https://www.eurekashadow.xin/blog/LeetCode135#5%EF%B8%8F%E2%83%A3-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90" class="hash-link" aria-label="5️⃣ 复杂度分析的直接链接" title="5️⃣ 复杂度分析的直接链接">​</a></h2><ul>
<li>
<p>⏱️ 时间复杂度：O(n) - 需要三次遍历数组（初始化一次，左右遍历各一次）</p>
</li>
<li>
<p>💾 空间复杂度：O(n) - 需要额外数组存储每个孩子的糖果数</p>
</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6️⃣-注意事项">6️⃣ 注意事项<a href="https://www.eurekashadow.xin/blog/LeetCode135#6%EF%B8%8F%E2%83%A3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="6️⃣ 注意事项的直接链接" title="6️⃣ 注意事项的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-边界情况">🚩 边界情况：<a href="https://www.eurekashadow.xin/blog/LeetCode135#-%E8%BE%B9%E7%95%8C%E6%83%85%E5%86%B5" class="hash-link" aria-label="🚩 边界情况：的直接链接" title="🚩 边界情况：的直接链接">​</a></h3><ul>
<li>空数组或只有一个孩子的情况</li>
<li>所有孩子评分相同的情况</li>
<li>评分严格递增或递减的情况</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-易错点">💥 易错点：<a href="https://www.eurekashadow.xin/blog/LeetCode135#-%E6%98%93%E9%94%99%E7%82%B9" class="hash-link" aria-label="💥 易错点：的直接链接" title="💥 易错点：的直接链接">​</a></h3><ul>
<li>只进行单向遍历，忽略反向约束关系</li>
<li>错误使用 <code>memset</code> 给 int 数组赋值为1</li>
<li>在更新糖果数时没有取最大值，导致不满足约束条件</li>
</ul></div></div></details>]]></content:encoded>
            <category>数组</category>
        </item>
        <item>
            <title><![CDATA[加油站]]></title>
            <link>https://www.eurekashadow.xin/blog/LeetCode134</link>
            <guid>https://www.eurekashadow.xin/blog/LeetCode134</guid>
            <pubDate>Thu, 07 Aug 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[力扣面试经典——134题]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="力扣面试经典134题"><span class="B2_JnYG"><a href="https://leetcode.cn/problems/gas-station/description/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer" title="力扣">力扣面试经典——134题</a></span><a href="https://www.eurekashadow.xin/blog/LeetCode134#%E5%8A%9B%E6%89%A3%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B8134%E9%A2%98" class="hash-link" aria-label="力扣面试经典134题的直接链接" title="力扣面试经典134题的直接链接">​</a></h3>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-参考代码">💡 参考代码：<a href="https://www.eurekashadow.xin/blog/LeetCode134#-%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81" class="hash-link" aria-label="💡 参考代码：的直接链接" title="💡 参考代码：的直接链接">​</a></h3>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 解决加油站环路问题</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param gas 每个加油站的汽油量数组</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param gasSize gas数组的长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param cost 从每个加油站到下一加油站的消耗数组</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param costSize cost数组的长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 能够完成环路的起始加油站索引，如果不存在则返回-1</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">canCompleteCircuit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> gas</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> gasSize</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> cost</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> costSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> totalGas </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// 总汽油量</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> totalCost </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">// 总消耗量</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> currentGas </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 当前油量</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> start </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">         </span><span class="token comment" style="color:#999988;font-style:italic">// 起始加油站索引</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 遍历所有加油站</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> gasSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        totalGas </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> gas</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        totalCost </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> cost</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        currentGas </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> gas</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> cost</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 如果当前油量为负，说明无法从当前起点到达加油站i+1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 因此需要将起点设为i+1，并重新开始计算</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">currentGas </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">         </span><span class="token comment" style="color:#999988;font-style:italic">//这两句看起来简单，但其实很巧妙，也不是那么好理解的</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            start </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            currentGas </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/*</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">	 * 如果循环结束后一个起始位置没找到，即 currentGas 始终小于 0</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">	 * 那表明 totalGas &lt; totalCost，通过下面的 if 判断能够返回正确结果；</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">	 * 如果找出一个起始位置，但是后面的 if 判断过不去，也能返回正确结果</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">	 * 所以如果能够形成环路，那么必须是 (有起始位置) &amp;&amp; (totalGas &gt;= totalCost) </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">	 * 至于为什么 totalGas &gt;= totalCost 见后文 “补充说明”</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">	 */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 如果总汽油量小于总消耗量，无法完成环路</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">totalGas </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> totalCost</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> start</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-总结">📖 总结：<a href="https://www.eurekashadow.xin/blog/LeetCode134#-%E6%80%BB%E7%BB%93" class="hash-link" aria-label="📖 总结：的直接链接" title="📖 总结：的直接链接">​</a></h3>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>点击展开题目总结</summary><div><div class="collapsibleContent_i85q"><h1>🤔 加油站</h1><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1️⃣-题目核心信息">1️⃣ 题目核心信息<a href="https://www.eurekashadow.xin/blog/LeetCode134#1%EF%B8%8F%E2%83%A3-%E9%A2%98%E7%9B%AE%E6%A0%B8%E5%BF%83%E4%BF%A1%E6%81%AF" class="hash-link" aria-label="1️⃣ 题目核心信息的直接链接" title="1️⃣ 题目核心信息的直接链接">​</a></h2><p>🎯 <strong>功能描述</strong>：在一条环路上有n个加油站，每个加油站有一定量的汽油，从一个加油站到下一个需要消耗一定汽油。找出能够完成一圈的起始加油站索引。</p><p>📥 <strong>输入输出</strong>：</p><ul>
<li><strong>输入</strong>：int* gas（每个加油站的汽油量数组）, int gasSize（gas数组长度）, int* cost（每段路程的消耗量数组）, int costSize（cost数组长度）</li>
<li><strong>输出</strong>：能够完成环路的起始加油站索引，如果不存在则返回-1</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2️⃣-实现原理">2️⃣ 实现原理<a href="https://www.eurekashadow.xin/blog/LeetCode134#2%EF%B8%8F%E2%83%A3-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86" class="hash-link" aria-label="2️⃣ 实现原理的直接链接" title="2️⃣ 实现原理的直接链接">​</a></h2><p>💡 <strong>核心思路</strong>：使用贪心算法，通过一次遍历找出起始点。如果从某个起点无法到达某一站点，则起点到终点之间的任何点都不能作为有效起点。</p><p>📋 <strong>实现步骤</strong>：</p><ol>
<li>遍历所有加油站，累计总汽油量和总消耗量</li>
<li>同时模拟从当前起点出发的行驶过程</li>
<li>如果在某点油量为负，更新起点为该点的下一个位置</li>
<li>最后比较总汽油量和总消耗量，判断是否能完成环路</li>
</ol><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3️⃣-关键点解析">3️⃣ 关键点解析<a href="https://www.eurekashadow.xin/blog/LeetCode134#3%EF%B8%8F%E2%83%A3-%E5%85%B3%E9%94%AE%E7%82%B9%E8%A7%A3%E6%9E%90" class="hash-link" aria-label="3️⃣ 关键点解析的直接链接" title="3️⃣ 关键点解析的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-代码技巧">🎯 代码技巧<a href="https://www.eurekashadow.xin/blog/LeetCode134#-%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7" class="hash-link" aria-label="🎯 代码技巧的直接链接" title="🎯 代码技巧的直接链接">​</a></h3><ul>
<li>贪心策略：一旦发现无法从当前起点到达某点，直接跳过中间所有点</li>
<li>一趟遍历：同时计算总量和寻找起点，提高效率</li>
<li>局部最优推全局最优：通过局部无法通行的路段排除多个候选起点</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4️⃣-使用场景">4️⃣ 使用场景<a href="https://www.eurekashadow.xin/blog/LeetCode134#4%EF%B8%8F%E2%83%A3-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="4️⃣ 使用场景的直接链接" title="4️⃣ 使用场景的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-适用情况">✅ 适用情况：<a href="https://www.eurekashadow.xin/blog/LeetCode134#-%E9%80%82%E7%94%A8%E6%83%85%E5%86%B5" class="hash-link" aria-label="✅ 适用情况：的直接链接" title="✅ 适用情况：的直接链接">​</a></h3><ul>
<li>环路路径规划问题</li>
<li>资源分配与消耗平衡问题</li>
<li>寻找循环数组中的起始位置问题</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-前提条件">⚠️ 前提条件：<a href="https://www.eurekashadow.xin/blog/LeetCode134#%EF%B8%8F-%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6" class="hash-link" aria-label="⚠️ 前提条件：的直接链接" title="⚠️ 前提条件：的直接链接">​</a></h3><ul>
<li>加油站数量与路程数量相等</li>
<li>输入数组不为空</li>
<li>汽油量和消耗量非负</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5️⃣-复杂度分析">5️⃣ 复杂度分析<a href="https://www.eurekashadow.xin/blog/LeetCode134#5%EF%B8%8F%E2%83%A3-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90" class="hash-link" aria-label="5️⃣ 复杂度分析的直接链接" title="5️⃣ 复杂度分析的直接链接">​</a></h2><ul>
<li>
<p>⏱️ 时间复杂度：O(n)，只需要遍历一次数组</p>
</li>
<li>
<p>💾 空间复杂度：O(1)，只使用了常数个额外变量</p>
</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6️⃣-注意事项">6️⃣ 注意事项<a href="https://www.eurekashadow.xin/blog/LeetCode134#6%EF%B8%8F%E2%83%A3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="6️⃣ 注意事项的直接链接" title="6️⃣ 注意事项的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-边界情况">🚩 边界情况：<a href="https://www.eurekashadow.xin/blog/LeetCode134#-%E8%BE%B9%E7%95%8C%E6%83%85%E5%86%B5" class="hash-link" aria-label="🚩 边界情况：的直接链接" title="🚩 边界情况：的直接链接">​</a></h3><ul>
<li>只有一个加油站的情况</li>
<li>所有加油站汽油量都小于消耗量</li>
<li>起点在数组最后一个位置的情况</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-易错点">💥 易错点：<a href="https://www.eurekashadow.xin/blog/LeetCode134#-%E6%98%93%E9%94%99%E7%82%B9" class="hash-link" aria-label="💥 易错点：的直接链接" title="💥 易错点：的直接链接">​</a></h3><ul>
<li>忘记检查总汽油量是否大于等于总消耗量</li>
<li>起点更新后未重置当前油量</li>
<li>数组索引越界问题</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="7⃣-补充说明">7⃣ 补充说明<a href="https://www.eurekashadow.xin/blog/LeetCode134#7%E2%83%A3-%E8%A1%A5%E5%85%85%E8%AF%B4%E6%98%8E" class="hash-link" aria-label="7⃣ 补充说明的直接链接" title="7⃣ 补充说明的直接链接">​</a></h2><p></p><p></p></div></div></details>
<p>这个题目说实话仍然不太理解，有点<strong>迷迷糊糊的</strong>。</p>
<p>现在让我想不通的还是 <code>currentGas += gas[i] - cost[i];</code> 这句</p>
<p>或许 <code>currentGas = currentGas + gas[i] - cost[i]</code> 这样好理解一点？ <code>currentGas + gas[i]</code> 相当于 <code>前面剩余的汽油 + 到达编号 i 加油站获得的汽油</code>
而 <code>cost[i]</code> 表示为了到达编号 i 加油站 <code>所消耗的汽油</code></p>]]></content:encoded>
            <category>数组</category>
        </item>
        <item>
            <title><![CDATA[除自身以外数组的乘积]]></title>
            <link>https://www.eurekashadow.xin/blog/LeetCode238</link>
            <guid>https://www.eurekashadow.xin/blog/LeetCode238</guid>
            <pubDate>Wed, 06 Aug 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[力扣面试经典——238题]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="力扣面试经典238题"><span class="B2_JnYG"><a href="https://leetcode.cn/problems/product-of-array-except-self/description/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer" title="力扣">力扣面试经典——238题</a></span><a href="https://www.eurekashadow.xin/blog/LeetCode238#%E5%8A%9B%E6%89%A3%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B8238%E9%A2%98" class="hash-link" aria-label="力扣面试经典238题的直接链接" title="力扣面试经典238题的直接链接">​</a></h3>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-参考代码">💡 参考代码：<a href="https://www.eurekashadow.xin/blog/LeetCode238#-%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81" class="hash-link" aria-label="💡 参考代码：的直接链接" title="💡 参考代码：的直接链接">​</a></h3>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 计算数组中除当前元素外其余各元素的乘积</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param nums       输入的整数数组</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param numsSize   输入数组的大小</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param returnSize 输出数组的大小，由函数设置</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return           返回结果数组，其中每个元素是除对应位置外其余元素的乘积</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * Note: The returned array must be malloced, assume caller calls free().</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">productExceptSelf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> returnSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 分配结果数组空间</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> answer </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token function" style="color:#d73a49">malloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">numsSize </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">returnSize </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 第一次遍历：计算每个元素左侧所有元素的乘积</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// answer[i] 存储 nums[0] 到 nums[i-1] 的乘积</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    answer</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        answer</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> answer</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 第二次遍历：从右向左遍历，将右侧元素乘积与左侧乘积相乘</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// rightProduct 记录当前元素右侧所有元素的乘积</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> rightProduct </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> numsSize </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        answer</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> answer</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> rightProduct</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        rightProduct </span><span class="token operator" style="color:#393A34">*=</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> answer</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-总结">📖 总结：<a href="https://www.eurekashadow.xin/blog/LeetCode238#-%E6%80%BB%E7%BB%93" class="hash-link" aria-label="📖 总结：的直接链接" title="📖 总结：的直接链接">​</a></h3>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>点击展开题目总结</summary><div><div class="collapsibleContent_i85q"><h1>🤔 除自身以外数组的乘积</h1><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1️⃣-题目核心信息">1️⃣ 题目核心信息<a href="https://www.eurekashadow.xin/blog/LeetCode238#1%EF%B8%8F%E2%83%A3-%E9%A2%98%E7%9B%AE%E6%A0%B8%E5%BF%83%E4%BF%A1%E6%81%AF" class="hash-link" aria-label="1️⃣ 题目核心信息的直接链接" title="1️⃣ 题目核心信息的直接链接">​</a></h2><p>🎯 <strong>功能描述</strong>：计算数组中除当前元素外其余各元素的乘积，不使用除法并在O(n)时间复杂度内完成</p><p>📥 <strong>输入输出</strong>：</p><ul>
<li><strong>输入</strong>：<code>nums</code>整数数组，<code>numsSize</code>数组长度</li>
<li><strong>输出</strong>：返回新数组，其中每个元素是除对应位置外其余元素的乘积</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2️⃣-实现原理">2️⃣ 实现原理<a href="https://www.eurekashadow.xin/blog/LeetCode238#2%EF%B8%8F%E2%83%A3-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86" class="hash-link" aria-label="2️⃣ 实现原理的直接链接" title="2️⃣ 实现原理的直接链接">​</a></h2><p>💡 <strong>核心思路</strong>：利用前缀乘积和后缀乘积的思想，将每个位置的结果分解为左侧元素乘积与右侧元素乘积的乘积</p><p>📋 <strong>实现步骤</strong>：</p><ol>
<li>第一次遍历从左到右，计算每个位置左侧所有元素的乘积并存储</li>
<li>初始化右侧乘积变量为1</li>
<li>第二次遍历从右到左，将每个位置的左侧乘积与右侧乘积相乘</li>
<li>在遍历过程中动态更新右侧乘积值</li>
</ol><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3️⃣-关键点解析">3️⃣ 关键点解析<a href="https://www.eurekashadow.xin/blog/LeetCode238#3%EF%B8%8F%E2%83%A3-%E5%85%B3%E9%94%AE%E7%82%B9%E8%A7%A3%E6%9E%90" class="hash-link" aria-label="3️⃣ 关键点解析的直接链接" title="3️⃣ 关键点解析的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-代码技巧">🎯 代码技巧<a href="https://www.eurekashadow.xin/blog/LeetCode238#-%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7" class="hash-link" aria-label="🎯 代码技巧的直接链接" title="🎯 代码技巧的直接链接">​</a></h3><ul>
<li>利用输出数组存储左侧乘积，节省额外空间</li>
<li>使用单变量跟踪右侧乘积，避免额外数组存储</li>
<li>两次单层循环实现O(n)时间复杂度</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4️⃣-使用场景">4️⃣ 使用场景<a href="https://www.eurekashadow.xin/blog/LeetCode238#4%EF%B8%8F%E2%83%A3-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="4️⃣ 使用场景的直接链接" title="4️⃣ 使用场景的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-适用情况">✅ 适用情况：<a href="https://www.eurekashadow.xin/blog/LeetCode238#-%E9%80%82%E7%94%A8%E6%83%85%E5%86%B5" class="hash-link" aria-label="✅ 适用情况：的直接链接" title="✅ 适用情况：的直接链接">​</a></h3><ul>
<li>需要计算数组元素间乘积关系的场景</li>
<li>不能使用除法运算的情况</li>
<li>对空间复杂度有严格要求的场景</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-前提条件">⚠️ 前提条件：<a href="https://www.eurekashadow.xin/blog/LeetCode238#%EF%B8%8F-%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6" class="hash-link" aria-label="⚠️ 前提条件：的直接链接" title="⚠️ 前提条件：的直接链接">​</a></h3><ul>
<li>输入数组至少包含两个元素</li>
<li>数组中元素的前缀和后缀乘积在32位整数范围内</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5️⃣-复杂度分析">5️⃣ 复杂度分析<a href="https://www.eurekashadow.xin/blog/LeetCode238#5%EF%B8%8F%E2%83%A3-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90" class="hash-link" aria-label="5️⃣ 复杂度分析的直接链接" title="5️⃣ 复杂度分析的直接链接">​</a></h2><ul>
<li>
<p>⏱️ 时间复杂度：O(n)，需要遍历数组两次</p>
</li>
<li>
<p>💾 空间复杂度：O(1)，不考虑输出数组的情况下只使用常数额外空间</p>
</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6️⃣-注意事项">6️⃣ 注意事项<a href="https://www.eurekashadow.xin/blog/LeetCode238#6%EF%B8%8F%E2%83%A3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="6️⃣ 注意事项的直接链接" title="6️⃣ 注意事项的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-边界情况">🚩 边界情况：<a href="https://www.eurekashadow.xin/blog/LeetCode238#-%E8%BE%B9%E7%95%8C%E6%83%85%E5%86%B5" class="hash-link" aria-label="🚩 边界情况：的直接链接" title="🚩 边界情况：的直接链接">​</a></h3><ul>
<li>数组中包含0元素的情况</li>
<li>数组长度为2的最小情况</li>
<li>正负数混合的情况</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-易错点">💥 易错点：<a href="https://www.eurekashadow.xin/blog/LeetCode238#-%E6%98%93%E9%94%99%E7%82%B9" class="hash-link" aria-label="💥 易错点：的直接链接" title="💥 易错点：的直接链接">​</a></h3><ul>
<li>忘记设置returnSize参数</li>
<li>混淆左侧乘积和右侧乘积的计算方向</li>
<li>内存分配后忘记检查是否成功</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="7️⃣-补充说明">7️⃣ 补充说明<a href="https://www.eurekashadow.xin/blog/LeetCode238#7%EF%B8%8F%E2%83%A3-%E8%A1%A5%E5%85%85%E8%AF%B4%E6%98%8E" class="hash-link" aria-label="7️⃣ 补充说明的直接链接" title="7️⃣ 补充说明的直接链接">​</a></h2><p><strong>算法原理解析</strong></p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">productExceptSelf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> returnSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 分配结果数组空间</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> answer </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token function" style="color:#d73a49">malloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">numsSize </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">returnSize </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 第一次遍历：计算每个元素左侧所有元素的乘积</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// answer[i] 存储 nums[0] 到 nums[i-1] 的乘积</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    answer</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        answer</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> answer</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 第二次遍历：从右向左遍历，将右侧元素乘积与左侧乘积相乘</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// rightProduct 记录当前元素右侧所有元素的乘积</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> rightProduct </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> numsSize </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        answer</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> answer</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> rightProduct</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        rightProduct </span><span class="token operator" style="color:#393A34">*=</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> answer</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div><p>这个算法的巧妙之处在于分而治之的思想，让我用更直观的方式来解释：</p><p><strong>核心思想</strong></p><p>对于数组中任意位置 i，我们要求的结果是：</p><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">result[i] = (nums[0] × nums[1] × ... × nums[i-1]) × (nums[i+1] × ... × nums[n-1])</span><br></span></code></pre></div></div><p>也就是：<strong>左侧所有元素的乘积</strong> × <strong>右侧所有元素的乘积</strong></p><p><strong>为什么这样做是正确的？</strong></p><p><strong>第一次遍历：计算左侧乘积</strong></p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">answer</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> × nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> × </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"> × nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><br></span></code></pre></div></div><p>对于 <code>nums = [1, 2, 3, 4]</code>：</p><ul>
<li><code>answer[0] = 1</code> (左侧无元素)</li>
<li><code>answer[1] = 1</code> (左侧: nums[0] = 1)</li>
<li><code>answer[2] = 1×2 = 2</code> (左侧: nums[0]×nums[1] = 1×2)</li>
<li><code>answer[3] = 1×2×3 = 6</code> (左侧: nums[0]×nums[1]×nums[2] = 1×2×3)</li>
</ul><p><strong>第二次遍历：乘以右侧乘积</strong></p><p>使用 <code>rightProduct</code> 变量从右往左累积右侧元素乘积：</p><ul>
<li>当处理 <code>answer[3]</code> 时：右侧无元素，<code>rightProduct = 1</code>
<ul>
<li><code>answer[3] = 6 × 1 = 6</code></li>
</ul>
</li>
<li>当处理 <code>answer[2]</code> 时：右侧只有 nums[3] = 4，<code>rightProduct = 4</code>
<ul>
<li><code>answer[2] = 2 × 4 = 8</code></li>
</ul>
</li>
<li>当处理 <code>answer[1]</code> 时：右侧是 nums[2]×nums[3] = 3×4 = 12，<code>rightProduct = 12</code>
<ul>
<li><code>answer[1] = 1 × 12 = 12</code></li>
</ul>
</li>
<li>当处理 <code>answer[0]</code> 时：右侧是 nums[1]×nums[2]×nums[3] = 2×3×4 = 24，<code>rightProduct = 24</code>
<ul>
<li><code>answer[0] = 1 × 24 = 24</code></li>
</ul>
</li>
</ul><p><strong>关键洞察</strong></p><p>这个算法的精妙在于：</p><ol>
<li><strong>空间复用</strong>：用结果数组 <code>answer</code> 先存储左侧乘积，避免额外空间</li>
<li><strong>累积计算</strong>：<code>rightProduct</code> 在遍历过程中逐步累积右侧乘积</li>
<li><strong>时机把握</strong>：在更新 <code>rightProduct</code> 之前先完成当前元素的计算</li>
</ol><p><strong>数学验证</strong></p><p>对于任意位置 i：</p><ul>
<li>第一次遍历后：<code>answer[i] = 左侧乘积</code></li>
<li>第二次遍历时：<code>answer[i] = answer[i] × rightProduct = 左侧乘积 × 右侧乘积</code></li>
</ul><p>这就是所求的结果！</p></div></div></details>]]></content:encoded>
            <category>数组</category>
        </item>
        <item>
            <title><![CDATA[O(1)时间插入、删除和获取随机元素（补充解释）]]></title>
            <link>https://www.eurekashadow.xin/blog/LeetCode380plus</link>
            <guid>https://www.eurekashadow.xin/blog/LeetCode380plus</guid>
            <pubDate>Wed, 06 Aug 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[力扣面试经典——380题]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="力扣面试经典380题"><span class="B2_JnYG"><a href="https://leetcode.cn/problems/insert-delete-getrandom-o1/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer" title="力扣">力扣面试经典——380题</a></span><a href="https://www.eurekashadow.xin/blog/LeetCode380plus#%E5%8A%9B%E6%89%A3%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B8380%E9%A2%98" class="hash-link" aria-label="力扣面试经典380题的直接链接" title="力扣面试经典380题的直接链接">​</a></h3>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>📘 关于此题示例解释</summary><div><div class="collapsibleContent_i85q"><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-输入格式说明">📥 输入格式说明<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#-%E8%BE%93%E5%85%A5%E6%A0%BC%E5%BC%8F%E8%AF%B4%E6%98%8E" class="hash-link" aria-label="📥 输入格式说明的直接链接" title="📥 输入格式说明的直接链接">​</a></h3><p>输入分为两行：</p><ul>
<li><strong>第一行</strong>：<code>["RandomizedSet", "insert", "remove", "insert", "getRandom", "remove", "insert", "getRandom"]</code>
<ul>
<li>这是要执行的操作序列</li>
</ul>
</li>
<li><strong>第二行</strong>：<code>[[], [1], [2], [2], [], [1], [2], []]</code>
<ul>
<li>这是每个操作对应的参数</li>
</ul>
</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="-逐步执行过程">🔄 逐步执行过程<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#-%E9%80%90%E6%AD%A5%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B" class="hash-link" aria-label="🔄 逐步执行过程的直接链接" title="🔄 逐步执行过程的直接链接">​</a></h2><p>让我按照时间顺序来解释每一步发生了什么：</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="1️⃣-创建对象">1️⃣ 创建对象<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#1%EF%B8%8F%E2%83%A3-%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1" class="hash-link" aria-label="1️⃣ 创建对象的直接链接" title="1️⃣ 创建对象的直接链接">​</a></h3><ul>
<li><strong>操作</strong>: <code>"RandomizedSet"</code></li>
<li><strong>参数</strong>: <code>[]</code></li>
<li>✨ 创建一个新的 <code>RandomizedSet</code> 对象，初始为空</li>
<li>💾 <strong>内存状态</strong>：数组为空，哈希表为空</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="2️⃣-插入元素-1">2️⃣ 插入元素 1<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#2%EF%B8%8F%E2%83%A3-%E6%8F%92%E5%85%A5%E5%85%83%E7%B4%A0-1" class="hash-link" aria-label="2️⃣ 插入元素 1的直接链接" title="2️⃣ 插入元素 1的直接链接">​</a></h3><ul>
<li><strong>操作</strong>: <code>"insert"</code></li>
<li><strong>参数</strong>: <code>[1]</code></li>
<li><strong>执行</strong>: <code>randomizedSet.insert(1)</code></li>
<li>🔍 检查哈希表，发现 1 不存在</li>
<li>➕ 将 1 添加到数组位置 0</li>
<li>📝 在哈希表中记录：1 → 索引 0</li>
<li>✅ 返回 <code>true</code>（插入成功）</li>
<li>📊 <strong>当前状态</strong>：数组 <code>[1]</code>，哈希表 <code>{1: 0}</code></li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="3️⃣-删除元素-2">3️⃣ 删除元素 2<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#3%EF%B8%8F%E2%83%A3-%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0-2" class="hash-link" aria-label="3️⃣ 删除元素 2的直接链接" title="3️⃣ 删除元素 2的直接链接">​</a></h3><ul>
<li><strong>操作</strong>: <code>"remove"</code></li>
<li><strong>参数</strong>: <code>[2]</code></li>
<li><strong>执行</strong>: <code>randomizedSet.remove(2)</code></li>
<li>🔍 检查哈希表，发现 2 不存在</li>
<li>❌ 无法删除不存在的元素</li>
<li>❌ 返回 <code>false</code>（删除失败）</li>
<li>🔁 <strong>状态不变</strong>：数组 <code>[1]</code>，哈希表 <code>{1: 0}</code></li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="4️⃣-插入元素-2">4️⃣ 插入元素 2<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#4%EF%B8%8F%E2%83%A3-%E6%8F%92%E5%85%A5%E5%85%83%E7%B4%A0-2" class="hash-link" aria-label="4️⃣ 插入元素 2的直接链接" title="4️⃣ 插入元素 2的直接链接">​</a></h3><ul>
<li><strong>操作</strong>: <code>"insert"</code></li>
<li><strong>参数</strong>: <code>[2]</code></li>
<li><strong>执行</strong>: <code>randomizedSet.insert(2)</code></li>
<li>🔍 检查哈希表，发现 2 不存在</li>
<li>➕ 将 2 添加到数组位置 1</li>
<li>📝 在哈希表中记录：2 → 索引 1</li>
<li>✅ 返回 <code>true</code>（插入成功）</li>
<li>📊 <strong>当前状态</strong>：数组 <code>[1, 2]</code>，哈希表 <code>{1: 0, 2: 1}</code></li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="5️⃣-随机获取元素">5️⃣ 随机获取元素<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#5%EF%B8%8F%E2%83%A3-%E9%9A%8F%E6%9C%BA%E8%8E%B7%E5%8F%96%E5%85%83%E7%B4%A0" class="hash-link" aria-label="5️⃣ 随机获取元素的直接链接" title="5️⃣ 随机获取元素的直接链接">​</a></h3><ul>
<li><strong>操作</strong>: <code>"getRandom"</code></li>
<li><strong>参数</strong>: <code>[]</code></li>
<li><strong>执行</strong>: <code>randomizedSet.getRandom()</code></li>
<li>🎲 数组中有两个元素 <code>[1, 2]</code></li>
<li>🎯 随机返回其中一个元素（可能是 1 或 2）</li>
<li>📋 示例中显示返回了 <code>2</code></li>
<li>🔁 <strong>状态不变</strong>：数组 <code>[1, 2]</code>，哈希表 <code>{1: 0, 2: 1}</code></li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="6️⃣-删除元素-1">6️⃣ 删除元素 1<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#6%EF%B8%8F%E2%83%A3-%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0-1" class="hash-link" aria-label="6️⃣ 删除元素 1的直接链接" title="6️⃣ 删除元素 1的直接链接">​</a></h3><ul>
<li><strong>操作</strong>: <code>"remove"</code></li>
<li><strong>参数</strong>: <code>[1]</code></li>
<li><strong>执行</strong>: <code>randomizedSet.remove(1)</code></li>
<li>🔍 检查哈希表，发现 1 存在，索引为 0</li>
<li>🔚 获取数组最后一个元素：2</li>
<li>↔️ 将元素 2 移动到索引 0（覆盖元素 1）</li>
<li>🔄 更新哈希表中 2 的索引为 0</li>
<li>🗑️ 从哈希表中删除元素 1 的记录</li>
<li>✅ 返回 <code>true</code>（删除成功）</li>
<li>📊 <strong>当前状态</strong>：数组 <code>[2]</code>，哈希表 <code>{2: 0}</code></li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="7️⃣-插入元素-2">7️⃣ 插入元素 2<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#7%EF%B8%8F%E2%83%A3-%E6%8F%92%E5%85%A5%E5%85%83%E7%B4%A0-2" class="hash-link" aria-label="7️⃣ 插入元素 2的直接链接" title="7️⃣ 插入元素 2的直接链接">​</a></h3><ul>
<li><strong>操作</strong>: <code>"insert"</code></li>
<li><strong>参数</strong>: <code>[2]</code></li>
<li><strong>执行</strong>: <code>randomizedSet.insert(2)</code></li>
<li>🔍 检查哈希表，发现 2 已经存在</li>
<li>⛔ 不允许重复插入</li>
<li>❌ 返回 <code>false</code>（插入失败）</li>
<li>🔁 <strong>状态不变</strong>：数组 <code>[2]</code>，哈希表 <code>{2: 0}</code></li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="8️⃣-随机获取元素">8️⃣ 随机获取元素<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#8%EF%B8%8F%E2%83%A3-%E9%9A%8F%E6%9C%BA%E8%8E%B7%E5%8F%96%E5%85%83%E7%B4%A0" class="hash-link" aria-label="8️⃣ 随机获取元素的直接链接" title="8️⃣ 随机获取元素的直接链接">​</a></h3><ul>
<li><strong>操作</strong>: <code>"getRandom"</code></li>
<li><strong>参数</strong>: <code>[]</code></li>
<li><strong>执行</strong>: <code>randomizedSet.getRandom()</code></li>
<li>🎯 数组中只有一个元素 <code>[2]</code></li>
<li>🎲 只能返回元素 2</li>
<li>✅ 返回 <code>2</code></li>
<li>🔁 <strong>状态不变</strong>：数组 <code>[2]</code>，哈希表 <code>{2: 0}</code></li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="-最终输出结果">📤 最终输出结果<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#-%E6%9C%80%E7%BB%88%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C" class="hash-link" aria-label="📤 最终输出结果的直接链接" title="📤 最终输出结果的直接链接">​</a></h2><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">null</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> true</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> false</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> true</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> true</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> false</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">]</span><br></span></code></pre></div></div><p><strong>对应每个操作的返回值</strong>：</p><ol>
<li><code>null</code> - 创建对象不返回值</li>
<li><code>true</code> - 成功插入 1</li>
<li><code>false</code> - 删除不存在的 2 失败</li>
<li><code>true</code> - 成功插入 2</li>
<li><code>2</code> - 随机返回 2（可能是 1 或 2）</li>
<li><code>true</code> - 成功删除 1</li>
<li><code>false</code> - 插入已存在的 2 失败</li>
<li><code>2</code> - 随机返回 2（唯一元素）</li>
</ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="-关键理解点">💡 关键理解点<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#-%E5%85%B3%E9%94%AE%E7%90%86%E8%A7%A3%E7%82%B9" class="hash-link" aria-label="💡 关键理解点的直接链接" title="💡 关键理解点的直接链接">​</a></h2><ul>
<li>🧮 <strong>集合特性</strong>：不允许重复元素</li>
<li>🎲 <strong>随机性</strong>：<code>getRandom</code> 操作是随机的，但在示例中为了演示方便，给出了具体结果</li>
<li>⚡ <strong>高效操作</strong>：所有操作都是 O(1) 时间复杂度</li>
<li>🔧 <strong>内部机制</strong>：通过数组+哈希表的组合实现高效操作</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="️-代码语法说明">⚠️ 代码语法说明<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#%EF%B8%8F-%E4%BB%A3%E7%A0%81%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E" class="hash-link" aria-label="⚠️ 代码语法说明的直接链接" title="⚠️ 代码语法说明的直接链接">​</a></h2><p>该题目示例解释中的这句代码：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">RandomizedSet randomizedSet </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> new </span><span class="token function" style="color:#d73a49">RandomizedSet</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre></div></div><p>这其实是一句<strong>伪代码</strong>，真正的C代码应该是：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">RandomizedSet</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> randomizedSet </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">randomizedSetCreate</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre></div></div><p>因为在我们之前的代码中：</p><ul>
<li><code>randomizedSetCreate()</code> 函数负责分配内存和初始化对象</li>
<li>它返回一个指向 <code>RandomizedSet</code> 的指针</li>
</ul><p>这句也是伪代码：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">randomizedSet</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">insert</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre></div></div><p>真正的C代码应该是：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">randomizedSetInsert</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">randomizedSet</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre></div></div></div></div></details>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>哈希表与UT_hash_handle</summary><div><div class="collapsibleContent_i85q"><h2 class="anchor anchorWithStickyNavbar_LWe7" id="-为什么需要哈希表">🤔 为什么需要哈希表？<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#-%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E5%93%88%E5%B8%8C%E8%A1%A8" class="hash-link" aria-label="🤔 为什么需要哈希表？的直接链接" title="🤔 为什么需要哈希表？的直接链接">​</a></h2><p>因为数组可以快速通过索引访问元素，但<strong>无法快速查找某个值是否存在于数组中</strong>。比如我们要删除值为 <code>5</code> 的元素，我们需要先找到它在数组中的位置，这就需要遍历整个数组，时间复杂度是 O(n)。</p><p>⚡ <strong>哈希表的作用就是解决这个问题：快速查找元素在数组中的位置</strong>。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-关于-ut_hash_handle">🔧 关于 UT_hash_handle<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#-%E5%85%B3%E4%BA%8E-ut_hash_handle" class="hash-link" aria-label="🔧 关于 UT_hash_handle的直接链接" title="🔧 关于 UT_hash_handle的直接链接">​</a></h3><p>当你定义了包含 <code>UT_hash_handle</code> 的结构体后，就可以使用这些宏：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// 🔍 查找元素</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">HASH_FIND_INT</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">indices</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">val</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> tmp</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// ➕ 添加元素</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">HASH_ADD_INT</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">indices</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> value</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> tmp</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// 🗑️ 删除元素</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">HASH_DEL</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">indices</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> tmp</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// 🔁 遍历哈希表</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">HASH_ITER</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hh</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">indices</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> curr</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> tmp</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre></div></div><p>这些宏内部会通过 <code>hh</code> 字段来操作哈希表的内部结构。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-为什么必须包含这个字段">❓ 为什么必须包含这个字段？<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#-%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BF%85%E9%A1%BB%E5%8C%85%E5%90%AB%E8%BF%99%E4%B8%AA%E5%AD%97%E6%AE%B5" class="hash-link" aria-label="❓ 为什么必须包含这个字段？的直接链接" title="❓ 为什么必须包含这个字段？的直接链接">​</a></h3><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">typedef</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> value</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> index</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    UT_hash_handle hh</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// ⚠️ 必须包含这个字段</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> HashItem</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre></div></div><p>✅ <strong>uthash 宏的要求</strong>：所有使用 uthash 的结构体都必须包含一个 <code>UT_hash_handle</code> 类型的字段</p><p>🔗 <strong>内部管理需要</strong>：没有这个字段，uthash 就无法维护哈希表的内部链接关系</p><p>🏷️ <strong>命名可以自定义</strong>：字段名不一定要是 <code>hh</code>，可以是任何名字，比如 <code>hash_handle</code></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="-总结">📝 总结<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#-%E6%80%BB%E7%BB%93" class="hash-link" aria-label="📝 总结的直接链接" title="📝 总结的直接链接">​</a></h2><p><code>UT_hash_handle hh</code> 是：</p><p>🔹 一个由 uthash 库定义的结构体字段</p><p>🔗 用于维护哈希表内部的链接关系</p><p>🔑 是使用 uthash 宏操作哈希表的必要条件</p><p>🔄 类似于链表节点中的 <code>next</code> 指针，但功能更复杂</p></div></div></details>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>randomizedSetCreate 函数详解</summary><div><div class="collapsibleContent_i85q"><p>这个函数是 <code>RandomizedSet</code> 数据结构的<strong>构造函数</strong>，用于创建和初始化一个新的 <code>RandomizedSet</code> 对象。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="函数逐行解析randomizedsetcreate">函数逐行解析randomizedSetCreate<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#%E5%87%BD%E6%95%B0%E9%80%90%E8%A1%8C%E8%A7%A3%E6%9E%90randomizedsetcreate" class="hash-link" aria-label="函数逐行解析randomizedSetCreate的直接链接" title="函数逐行解析randomizedSetCreate的直接链接">​</a></h2><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">RandomizedSet</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">randomizedSetCreate</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">srand</span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">time</span><span class="token punctuation" style="color:#393A34">(</span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 初始化随机数种子</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    RandomizedSet</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> obj </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">RandomizedSet</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token function" style="color:#d73a49">malloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">RandomizedSet</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">nums </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token function" style="color:#d73a49">malloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">200000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 预分配足够空间</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">numsSize </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">                              </span><span class="token comment" style="color:#999988;font-style:italic">// 初始元素个数为0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">indices </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">                            </span><span class="token comment" style="color:#999988;font-style:italic">// 哈希表初始为空</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> obj</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div><p><strong>1. <code>srand(time(NULL));</code> - 初始化随机数种子</strong></p><ul>
<li><code>srand()</code> 是C标准库函数，用于设置随机数生成器的种子</li>
<li><code>time(NULL)</code> 返回当前时间戳作为种子</li>
<li>这样可以确保每次程序运行时生成的随机数序列都不同</li>
<li>为后续的 <code>randomizedSetGetRandom()</code> 函数做准备</li>
</ul><p><strong>2. <code>RandomizedSet* obj = (RandomizedSet*)malloc(sizeof(RandomizedSet));</code> - 分配主对象内存</strong></p><ul>
<li><code>malloc()</code> 分配内存</li>
<li><code>sizeof(RandomizedSet)</code> 计算 <code>RandomizedSet</code> 结构体所需字节数</li>
<li>强制类型转换为 <code>RandomizedSet*</code> 指针类型</li>
<li>这里创建了主对象，但其中的成员还未初始化</li>
</ul><p><strong>3. <code>obj-&gt;nums = (int*)malloc(sizeof(int) * 200000);</code> - 分配数组内存</strong></p><ul>
<li>为存储实际元素的数组 <code>nums</code> 分配内存</li>
<li>预分配 200000 个 <code>int</code> 的空间（题目限制最大调用次数）</li>
<li>这样避免了动态扩容的开销，提高性能</li>
</ul><p><strong>4. <code>obj-&gt;numsSize = 0;</code> - 初始化元素计数</strong></p><ul>
<li>设置数组当前元素个数为 0</li>
<li>表示刚开始时集合为空</li>
</ul><p><strong>5. <code>obj-&gt;indices = NULL;</code> - 初始化哈希表</strong></p><ul>
<li>将哈希表指针设置为 NULL</li>
<li>在 uthash 库中，NULL 表示空的哈希表</li>
<li>这是 uthash 库要求的初始化方式</li>
</ul><p><strong>6. <code>return obj;</code> - 返回创建的对象</strong></p><ul>
<li>返回指向新创建对象的指针</li>
<li>调用者可以通过这个指针使用对象的各种方法</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="内存布局示意图">内存布局示意图<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E7%A4%BA%E6%84%8F%E5%9B%BE" class="hash-link" aria-label="内存布局示意图的直接链接" title="内存布局示意图的直接链接">​</a></h2><p>创建完成后，内存结构如下：</p><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">RandomizedSet 对象:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| nums       | ---&gt; [int 数组，大小为200000，初始为空]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| numsSize   | = 0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| indices    | = NULL (空哈希表)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+------------+</span><br></span></code></pre></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="重要设计考虑">重要设计考虑<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#%E9%87%8D%E8%A6%81%E8%AE%BE%E8%AE%A1%E8%80%83%E8%99%91" class="hash-link" aria-label="重要设计考虑的直接链接" title="重要设计考虑的直接链接">​</a></h2><ol>
<li><strong>预分配数组空间</strong>：避免动态扩容，提高性能</li>
<li><strong>随机数种子初始化</strong>：确保随机性</li>
<li><strong>正确的初始化</strong>：所有成员都被正确初始化</li>
<li><strong>内存管理</strong>：为后续的插入、删除操作做好准备</li>
</ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="使用示例">使用示例<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B" class="hash-link" aria-label="使用示例的直接链接" title="使用示例的直接链接">​</a></h2><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// 调用这个函数创建对象</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RandomizedSet</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> mySet </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">randomizedSetCreate</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// 现在可以使用 mySet 进行各种操作</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// randomizedSetInsert(mySet, 1);</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// randomizedSetRemove(mySet, 1);</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// randomizedSetGetRandom(mySet);</span><br></span></code></pre></div></div></div></div></details>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>randomizedSetInsert 函数详解</summary><div><div class="collapsibleContent_i85q"><h2 class="anchor anchorWithStickyNavbar_LWe7" id="函数逐步解析-randomizedsetinsert">函数逐步解析 randomizedSetInsert<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#%E5%87%BD%E6%95%B0%E9%80%90%E6%AD%A5%E8%A7%A3%E6%9E%90-randomizedsetinsert" class="hash-link" aria-label="函数逐步解析 randomizedSetInsert的直接链接" title="函数逐步解析 randomizedSetInsert的直接链接">​</a></h2><p>这个函数用于向 <code>RandomizedSet</code> 集合中插入一个新元素，确保集合中没有重复元素。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="函数签名解析">函数签名解析<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#%E5%87%BD%E6%95%B0%E7%AD%BE%E5%90%8D%E8%A7%A3%E6%9E%90" class="hash-link" aria-label="函数签名解析的直接链接" title="函数签名解析的直接链接">​</a></h3><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">bool </span><span class="token function" style="color:#d73a49">randomizedSetInsert</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">RandomizedSet</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> obj</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> val</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre></div></div><ul>
<li><strong>返回类型</strong>: <code>bool</code> - 插入成功返回 <code>true</code>，失败返回 <code>false</code></li>
<li><strong>参数1</strong>: <code>RandomizedSet* obj</code> - 指向要操作的 <code>RandomizedSet</code> 对象</li>
<li><strong>参数2</strong>: <code>int val</code> - 要插入的元素值</li>
</ul><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">bool </span><span class="token function" style="color:#d73a49">randomizedSetInsert</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">RandomizedSet</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> obj</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> val</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    HashItem</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> tmp </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 在哈希表中查找元素是否已存在</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">HASH_FIND_INT</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">indices</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">val</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> tmp</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">tmp </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> false</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 元素已存在，插入失败</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 将新元素添加到数组末尾</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">numsSize</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> val</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 在哈希表中创建新节点，记录元素值和其在数组中的索引</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    tmp </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">HashItem</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token function" style="color:#d73a49">malloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">HashItem</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    tmp</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">value </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> val</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    tmp</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">index </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">numsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">HASH_ADD_INT</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">indices</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> value</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> tmp</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">numsSize</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 数组元素个数增加</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> true</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div><p><strong>步骤1：检查元素是否已存在</strong></p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">HashItem</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> tmp </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// 在哈希表中查找元素是否已存在</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">HASH_FIND_INT</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">indices</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">val</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> tmp</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">tmp </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> false</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 元素已存在，插入失败</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div><ul>
<li>初始化一个临时指针 <code>tmp</code> 为 <code>NULL</code></li>
<li>使用 <code>HASH_FIND_INT</code> 宏在哈希表中查找值为 <code>val</code> 的元素</li>
<li>如果找到了（<code>tmp != NULL</code>），说明元素已存在，直接返回 <code>false</code></li>
</ul><p><strong>步骤2：插入新元素到数组</strong></p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">numsSize</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> val</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre></div></div><ul>
<li>将新元素 <code>val</code> 添加到数组 <code>nums</code> 的索引 <code>numsSize</code> 处</li>
</ul><p><strong>步骤3：更新哈希表映射关系</strong></p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">tmp </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">HashItem</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token function" style="color:#d73a49">malloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">HashItem</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">tmp</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">value </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> val</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">tmp</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">index </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">numsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">HASH_ADD_INT</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">indices</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> value</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> tmp</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre></div></div><ul>
<li>为新元素分配哈希表节点内存 <code>HashItem</code></li>
<li>设置节点的值 <code>value</code> 为插入的元素值</li>
<li>设置节点的索引 <code>index</code> 为该元素在数组中的位置</li>
<li>使用 <code>HASH_ADD_INT</code> 宏将新节点添加到哈希表中</li>
</ul><p><strong>步骤4：更新 numsSize 大小</strong></p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">numsSize</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> true</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre></div></div><ul>
<li>将数组元素计数器 <code>numsSize</code> 增加1</li>
<li>返回 <code>true</code> 表示插入成功</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="数据结构设计特点">数据结构设计特点<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1%E7%89%B9%E7%82%B9" class="hash-link" aria-label="数据结构设计特点的直接链接" title="数据结构设计特点的直接链接">​</a></h3><ol>
<li>基于UTHash库：</li>
</ol><ul>
<li>使用 <code>HASH_FIND_INT</code> 和 <code>HASH_ADD_INT</code> 实现哈希表操作</li>
<li>哈希表存储 <code>HashItem</code> 结构体，维护元素值到数组索引的映射</li>
</ul><ol start="2">
<li>数组+哈希表组合：</li>
</ol><ul>
<li>数组 <code>nums</code> 存储实际元素值</li>
<li>哈希表 <code>indices</code> 维护元素值到索引的映射关系</li>
</ul><ol start="3">
<li>时间复杂度：</li>
</ol><ul>
<li>插入操作时间复杂度为O(1)</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="关键数据结构">关键数据结构<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#%E5%85%B3%E9%94%AE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84" class="hash-link" aria-label="关键数据结构的直接链接" title="关键数据结构的直接链接">​</a></h3><ul>
<li><code>HashItem</code>：包含 <code>value</code>（元素值）和 <code>index</code>（在数组中的索引）</li>
<li><code>nums</code> 数组：存储所有插入的元素</li>
<li><code>numsSize</code>：记录当前数组中元素的数量</li>
</ul></div></div></details>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>randomizedSetRemove 函数详解</summary><div><div class="collapsibleContent_i85q"><h2 class="anchor anchorWithStickyNavbar_LWe7" id="举例解释randomizedsetremove">举例解释randomizedSetRemove<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#%E4%B8%BE%E4%BE%8B%E8%A7%A3%E9%87%8Arandomizedsetremove" class="hash-link" aria-label="举例解释randomizedSetRemove的直接链接" title="举例解释randomizedSetRemove的直接链接">​</a></h2><p>假设我们有一个 <code>RandomizedSet</code>，其初始状态如下：</p><ul>
<li><code>obj-&gt;nums</code> = [10, 20, 30, 40] (数组)</li>
<li><code>obj-&gt;numsSize</code> = 4</li>
<li><code>obj-&gt;indices</code> 哈希表内容：<!-- -->
<ul>
<li>key=10, index=0</li>
<li>key=20, index=1</li>
<li>key=30, index=2</li>
<li>key=40, index=3</li>
</ul>
</li>
</ul><p>现在我们要删除元素 20。</p><p><strong>初始状态</strong>
数组: [10, 20, 30, 40]
哈希表:</p><ul>
<li>10 -&gt; index=0</li>
<li>20 -&gt; index=1</li>
<li>30 -&gt; index=2</li>
<li>40 -&gt; index=3</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="步骤-1-查找要删除的元素">步骤 1: 查找要删除的元素<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#%E6%AD%A5%E9%AA%A4-1-%E6%9F%A5%E6%89%BE%E8%A6%81%E5%88%A0%E9%99%A4%E7%9A%84%E5%85%83%E7%B4%A0" class="hash-link" aria-label="步骤 1: 查找要删除的元素的直接链接" title="步骤 1: 查找要删除的元素的直接链接">​</a></h3><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">HashItem* tmp = NULL;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">HASH_FIND_INT(obj-&gt;indices, &amp;val, tmp);</span><br></span></code></pre></div></div><p>在哈希表中查找 val=20:</p><ul>
<li>找到元素 20，其索引为 index=1</li>
<li>tmp 指向元素 20 的哈希项</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="步骤-2-获取索引和最后一个元素">步骤 2: 获取索引和最后一个元素<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#%E6%AD%A5%E9%AA%A4-2-%E8%8E%B7%E5%8F%96%E7%B4%A2%E5%BC%95%E5%92%8C%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E5%85%83%E7%B4%A0" class="hash-link" aria-label="步骤 2: 获取索引和最后一个元素的直接链接" title="步骤 2: 获取索引和最后一个元素的直接链接">​</a></h3><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">int index = tmp-&gt;index;// index = 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">int lastValue = obj-&gt;nums[obj-&gt;numsSize - 1]; // lastValue = 40</span><br></span></code></pre></div></div><ul>
<li>index = 1 (要删除元素 20 的位置)</li>
<li>lastValue = 40 (数组最后一个元素)</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="步骤-3-用最后一个元素覆盖待删除元素">步骤 3: 用最后一个元素覆盖待删除元素<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#%E6%AD%A5%E9%AA%A4-3-%E7%94%A8%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E5%85%83%E7%B4%A0%E8%A6%86%E7%9B%96%E5%BE%85%E5%88%A0%E9%99%A4%E5%85%83%E7%B4%A0" class="hash-link" aria-label="步骤 3: 用最后一个元素覆盖待删除元素的直接链接" title="步骤 3: 用最后一个元素覆盖待删除元素的直接链接">​</a></h3><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">obj-&gt;nums[index] = lastValue;</span><br></span></code></pre></div></div><p>执行后数组变为: [10, 40, 30, 40]</p><ul>
<li>将最后一个元素 40 放在索引 1 的位置，覆盖了原来的 20</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="步骤-4-更新最后一个元素在哈希表中的索引">步骤 4: 更新最后一个元素在哈希表中的索引<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#%E6%AD%A5%E9%AA%A4-4-%E6%9B%B4%E6%96%B0%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E5%85%83%E7%B4%A0%E5%9C%A8%E5%93%88%E5%B8%8C%E8%A1%A8%E4%B8%AD%E7%9A%84%E7%B4%A2%E5%BC%95" class="hash-link" aria-label="步骤 4: 更新最后一个元素在哈希表中的索引的直接链接" title="步骤 4: 更新最后一个元素在哈希表中的索引的直接链接">​</a></h3><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">HashItem* lastItem = NULL;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">HASH_FIND_INT(obj-&gt;indices, &amp;lastValue, lastItem);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">if (lastItem != NULL) { lastItem-&gt;index = index; }</span><br></span></code></pre></div></div><ul>
<li>查找元素 40 在哈希表中的记录</li>
<li>将其索引从 3 更新为 1 (因为现在它在数组的索引 1 位置)</li>
</ul><p>更新后哈希表:</p><ul>
<li>10 -&gt; index=0</li>
<li>20 -&gt; index=1 (即将被删除)</li>
<li>30 -&gt; index=2</li>
<li>40 -&gt; index=1</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="步骤-5-从哈希表中删除目标元素并释放内存">步骤 5: 从哈希表中删除目标元素并释放内存<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#%E6%AD%A5%E9%AA%A4-5-%E4%BB%8E%E5%93%88%E5%B8%8C%E8%A1%A8%E4%B8%AD%E5%88%A0%E9%99%A4%E7%9B%AE%E6%A0%87%E5%85%83%E7%B4%A0%E5%B9%B6%E9%87%8A%E6%94%BE%E5%86%85%E5%AD%98" class="hash-link" aria-label="步骤 5: 从哈希表中删除目标元素并释放内存的直接链接" title="步骤 5: 从哈希表中删除目标元素并释放内存的直接链接">​</a></h3><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">HASH_DEL(obj-&gt;indices, tmp);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">free(tmp);</span><br></span></code></pre></div></div><ul>
<li>从哈希表中删除元素 20 的记录</li>
<li>释放该哈希项的内存</li>
</ul><p>删除后哈希表:</p><ul>
<li>10 -&gt; index=0</li>
<li>30 -&gt; index=2</li>
<li>40 -&gt; index=1</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="步骤-6-减少数组大小计数">步骤 6: 减少数组大小计数<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#%E6%AD%A5%E9%AA%A4-6-%E5%87%8F%E5%B0%91%E6%95%B0%E7%BB%84%E5%A4%A7%E5%B0%8F%E8%AE%A1%E6%95%B0" class="hash-link" aria-label="步骤 6: 减少数组大小计数的直接链接" title="步骤 6: 减少数组大小计数的直接链接">​</a></h3><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">obj-&gt;numsSize--;</span><br></span></code></pre></div></div><ul>
<li>numsSize 从 4 减少到 3</li>
</ul><p><strong>最终状态</strong>
数组: [10, 40, 30] (逻辑上最后一个40被忽略)
哈希表:</p><ul>
<li>10 -&gt; index=0</li>
<li>30 -&gt; index=2</li>
<li>40 -&gt; index=1
numsSize: 3</li>
</ul><p>成功删除元素 20，返回 true。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="为什么用最后一个元素覆盖">为什么用最后一个元素覆盖？<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#%E4%B8%BA%E4%BB%80%E4%B9%88%E7%94%A8%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E5%85%83%E7%B4%A0%E8%A6%86%E7%9B%96" class="hash-link" aria-label="为什么用最后一个元素覆盖？的直接链接" title="为什么用最后一个元素覆盖？的直接链接">​</a></h2><p>核心原因：<strong>效率优化</strong></p><p><strong>1. 直接访问 vs 遍历访问</strong></p><ul>
<li>最后一个元素：<code>obj-&gt;nums[obj-&gt;numsSize - 1]</code> - O(1) 直接访问</li>
<li>其他元素：需要遍历或计算索引 - 增加复杂度</li>
</ul><p><strong>2. 避免批量元素移动</strong>
使用最后一个元素覆盖只需一次操作，而用其他元素需要移动多个元素：</p><p><strong>示例：删除元素 20（索引1）</strong>
数组 [10, 20, 30, 40, 50]</p><p><strong>使用最后一个元素（推荐）</strong>：</p><ul>
<li>用 50 覆盖 20：[10, 50, 30, 40, 50]</li>
<li>一次操作，O(1) 复杂度</li>
</ul><p><strong>使用下一个元素（不推荐）</strong>：</p><ul>
<li>需要 30→20, 40→30, 50→40：[10, 30, 40, 50, 50]</li>
<li>三次移动，O(n) 复杂度</li>
</ul><p><strong>关键优势</strong></p><p><strong>保持 O(1) 时间复杂度</strong>
这是 RandomizedSet 数据结构的核心设计目标</p><p><strong>实现简单</strong></p><ul>
<li>无需循环</li>
<li>代码简洁不易出错</li>
</ul><p><strong>维护随机访问特性</strong>
不影响剩余元素的等概率随机访问</p><p><strong>总结</strong>
使用最后一个元素覆盖是一种经典优化技巧，确保删除操作在常数时间内完成，同时保持数据结构的完整性和随机访问特性。</p></div></div></details>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>randomizedSetFree 函数详解</summary><div><div class="collapsibleContent_i85q"><h2 class="anchor anchorWithStickyNavbar_LWe7" id="函数目的">函数目的<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#%E5%87%BD%E6%95%B0%E7%9B%AE%E7%9A%84" class="hash-link" aria-label="函数目的的直接链接" title="函数目的的直接链接">​</a></h2><p>释放整个 RandomizedSet 对象及其包含的所有资源，避免内存泄漏。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="逐步执行流程">逐步执行流程<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#%E9%80%90%E6%AD%A5%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B" class="hash-link" aria-label="逐步执行流程的直接链接" title="逐步执行流程的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-释放哈希表中所有节点">1. 释放哈希表中所有节点<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#1-%E9%87%8A%E6%94%BE%E5%93%88%E5%B8%8C%E8%A1%A8%E4%B8%AD%E6%89%80%E6%9C%89%E8%8A%82%E7%82%B9" class="hash-link" aria-label="1. 释放哈希表中所有节点的直接链接" title="1. 释放哈希表中所有节点的直接链接">​</a></h3><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">HashItem* curr, *tmp;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">HASH_ITER(hh, obj-&gt;indices, curr, tmp) { HASH_DEL(obj-&gt;indices, curr); free(curr); }</span><br></span></code></pre></div></div><p><strong>执行过程：</strong></p><ul>
<li>使用 <code>HASH_ITER</code> 安全地遍历哈希表中的每个节点</li>
<li><code>curr</code> 指向当前节点，<code>tmp</code> 用于保存下一个节点的指针（防止遍历过程中断）</li>
<li>对每个节点：<!-- -->
<ul>
<li><code>HASH_DEL(obj-&gt;indices, curr)</code> 从哈希表中删除节点</li>
<li><code>free(curr)</code> 释放节点内存</li>
</ul>
</li>
</ul><p><strong>为什么需要 tmp？</strong>
在遍历过程中直接 <code>free(curr)</code> 会破坏哈希表结构，导致无法继续遍历，所以需要提前保存下一个节点的指针。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="2-释放数组内存">2. 释放数组内存<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#2-%E9%87%8A%E6%94%BE%E6%95%B0%E7%BB%84%E5%86%85%E5%AD%98" class="hash-link" aria-label="2. 释放数组内存的直接链接" title="2. 释放数组内存的直接链接">​</a></h3><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">free(obj-&gt;nums);</span><br></span></code></pre></div></div><ul>
<li>释放存储元素的动态数组内存</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="3-释放对象本身">3. 释放对象本身<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#3-%E9%87%8A%E6%94%BE%E5%AF%B9%E8%B1%A1%E6%9C%AC%E8%BA%AB" class="hash-link" aria-label="3. 释放对象本身的直接链接" title="3. 释放对象本身的直接链接">​</a></h3><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">free(obj);</span><br></span></code></pre></div></div><ul>
<li>释放 RandomizedSet 结构体本身的内存</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="内存管理要点">内存管理要点<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E8%A6%81%E7%82%B9" class="hash-link" aria-label="内存管理要点的直接链接" title="内存管理要点的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="释放顺序很重要">释放顺序很重要<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#%E9%87%8A%E6%94%BE%E9%A1%BA%E5%BA%8F%E5%BE%88%E9%87%8D%E8%A6%81" class="hash-link" aria-label="释放顺序很重要的直接链接" title="释放顺序很重要的直接链接">​</a></h3><ol>
<li>先释放哈希表节点（HashItem）</li>
<li>再释放数组</li>
<li>最后释放对象本身</li>
</ol><h3 class="anchor anchorWithStickyNavbar_LWe7" id="避免内存泄漏">避免内存泄漏<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#%E9%81%BF%E5%85%8D%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F" class="hash-link" aria-label="避免内存泄漏的直接链接" title="避免内存泄漏的直接链接">​</a></h3><ul>
<li>确保每个 <code>malloc</code> 都有对应的 <code>free</code></li>
<li>哈希表中的每个节点都需要单独释放</li>
<li>对象包含的所有动态分配内存都需要释放</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="使用示例-1">使用示例<a href="https://www.eurekashadow.xin/blog/LeetCode380plus#%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B-1" class="hash-link" aria-label="使用示例的直接链接" title="使用示例的直接链接">​</a></h2><p>当不再需要 RandomizedSet 对象时调用：</p><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">RandomizedSet* set = randomizedSetCreate(); // ... 使用 set 进行各种操作 </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">randomizedSetFree(set); // 释放所有资源</span><br></span></code></pre></div></div><p>这样确保程序不会出现内存泄漏问题。</p></div></div></details>
<p><code>randomizedSetGetRandom</code> 就是随机获取一个索引然后返回，就不再详细解释了。</p>
<p>这是目前我做题以来遇到的<strong>最困难</strong>的一道题，题目看不懂、示例看不懂、AI给出题目代码，还是看不懂！😂😂😂</p>
<p>现在嘛，勉强理解啦~🥱</p>
<p>我现在不像是在解题，更像是在学习，普通的力扣题目，我有点思路，但代码往往又臭又长，甚至连逻辑都是错乱的都没发现！😑</p>
<p>于是通常是叫AI给出最优解，然后尝试去理解它，为了避免看了就忘，于是我还是<strong>在AI的辅助</strong>下，写下像以上这些题解总结。我也在怀疑这种学习方法真的
<strong>有效吗</strong>？真能提升我的编程水平吗？我该不会是在做无用功吧？</p>
<hr>
<p><strong>统义灵码</strong>：
你的学习方法其实是有一定效果的，但可以进一步优化。下面是对你当前学习方式的分析和改进建议：</p>
<p>当前方法的优势 ✅</p>
<ul>
<li>
<p>理解优秀解法：通过阅读和理解最优解，能够学习到更高效的算法思维和编码技巧</p>
</li>
<li>
<p>主动总结：写题解总结有助于加深印象，避免"一看就会，一做就废"</p>
</li>
<li>
<p>借助AI辅助：合理利用工具可以提高学习效率</p>
</li>
</ul>
<p>存在的问题 ❌</p>
<ul>
<li>
<p>缺乏独立思考：直接看最优解可能跳过了重要的思考过程</p>
</li>
<li>
<p>代码质量差：自己写的代码逻辑混乱，说明基础思维训练不足</p>
</li>
<li>
<p>容易遗忘：看懂≠会用，缺乏足够的练习和复盘</p>
</li>
</ul>
<p>改进建议 💡</p>
<p>分阶段解题法：</p>
<ul>
<li>
<p>先自己思考并实现（哪怕是暴力解法）</p>
</li>
<li>
<p>尝试优化自己的解法</p>
</li>
<li>
<p>再对比学习最优解法</p>
</li>
</ul>
<p>代码质量训练：</p>
<ul>
<li>
<p>写完代码后自己先review一遍</p>
</li>
<li>
<p>尝试重构自己的代码</p>
</li>
<li>
<p>关注代码的可读性和逻辑清晰度</p>
</li>
</ul>
<p>刻意练习：</p>
<ul>
<li>
<p>对于同类题目，间隔一段时间后再做一遍</p>
</li>
<li>
<p>总结常见算法模式和解题套路</p>
</li>
<li>
<p>建立自己的错题本和典型题目集合</p>
</li>
</ul>
<p>深度理解：</p>
<ul>
<li>
<p>不仅要理解"怎么做"，更要理解"为什么这样做"</p>
</li>
<li>
<p>分析不同解法的时间复杂度和空间复杂度差异</p>
</li>
</ul>
<p>这种学习方法有效但需要调整，关键是要增加自己的思考环节，而不是直接跳到最优解。</p>
<hr>
<p>唉，以后有思路的还是自己先思考尝试解决吧，哪怕是用最笨拙的方法。对于没有学过的内容，超出知识范围的，像什么链表、二叉树、分治之类的，就直接问AI然后从题目中学习相关的内容。</p>]]></content:encoded>
            <category>数组</category>
        </item>
        <item>
            <title><![CDATA[O(1)时间插入、删除和获取随机元素]]></title>
            <link>https://www.eurekashadow.xin/blog/LeetCode380</link>
            <guid>https://www.eurekashadow.xin/blog/LeetCode380</guid>
            <pubDate>Tue, 05 Aug 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[力扣面试经典——380题]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="力扣面试经典380题"><span class="B2_JnYG"><a href="https://leetcode.cn/problems/insert-delete-getrandom-o1/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer" title="力扣">力扣面试经典——380题</a></span><a href="https://www.eurekashadow.xin/blog/LeetCode380#%E5%8A%9B%E6%89%A3%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B8380%E9%A2%98" class="hash-link" aria-label="力扣面试经典380题的直接链接" title="力扣面试经典380题的直接链接">​</a></h3>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-参考代码">💡 参考代码：<a href="https://www.eurekashadow.xin/blog/LeetCode380#-%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81" class="hash-link" aria-label="💡 参考代码：的直接链接" title="💡 参考代码：的直接链接">​</a></h3>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 哈希表节点结构体</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 用于存储元素值和其在数组中的索引位置</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">typedef</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> value</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">              </span><span class="token comment" style="color:#999988;font-style:italic">// 元素值</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> index</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">              </span><span class="token comment" style="color:#999988;font-style:italic">// 该元素在数组中的索引位置</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    UT_hash_handle hh</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// uthash库所需的句柄</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> HashItem</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * RandomizedSet结构体</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 组合数组和哈希表实现O(1)时间复杂度的插入、删除和随机获取操作</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">typedef</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">              </span><span class="token comment" style="color:#999988;font-style:italic">// 存储实际元素的数组</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">           </span><span class="token comment" style="color:#999988;font-style:italic">// 当前数组中元素的个数</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    HashItem</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> indices</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// 哈希表，存储元素值到索引的映射</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> RandomizedSet</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 创建RandomizedSet对象</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 新创建的RandomizedSet对象指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RandomizedSet</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">randomizedSetCreate</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">srand</span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">time</span><span class="token punctuation" style="color:#393A34">(</span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 初始化随机数种子</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    RandomizedSet</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> obj </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">RandomizedSet</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token function" style="color:#d73a49">malloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">RandomizedSet</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">nums </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token function" style="color:#d73a49">malloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">200000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 预分配足够空间</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">numsSize </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">                              </span><span class="token comment" style="color:#999988;font-style:italic">// 初始元素个数为0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">indices </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">                            </span><span class="token comment" style="color:#999988;font-style:italic">// 哈希表初始为空</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> obj</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 向集合中插入元素</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param obj RandomizedSet对象指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param val 要插入的元素值</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 插入成功返回true，元素已存在返回false</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">bool </span><span class="token function" style="color:#d73a49">randomizedSetInsert</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">RandomizedSet</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> obj</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> val</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    HashItem</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> tmp </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 在哈希表中查找元素是否已存在</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">HASH_FIND_INT</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">indices</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">val</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> tmp</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">tmp </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> false</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 元素已存在，插入失败</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 将新元素添加到数组末尾</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">numsSize</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> val</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 在哈希表中创建新节点，记录元素值和其在数组中的索引</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    tmp </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">HashItem</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token function" style="color:#d73a49">malloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">HashItem</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    tmp</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">value </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> val</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    tmp</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">index </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">numsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">HASH_ADD_INT</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">indices</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> value</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> tmp</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">numsSize</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 数组元素个数增加</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> true</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 从集合中删除元素</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param obj RandomizedSet对象指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param val 要删除的元素值</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 删除成功返回true，元素不存在返回false</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">bool </span><span class="token function" style="color:#d73a49">randomizedSetRemove</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">RandomizedSet</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> obj</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> val</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    HashItem</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> tmp </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 在哈希表中查找要删除的元素</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">HASH_FIND_INT</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">indices</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">val</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> tmp</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">tmp </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> false</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 元素不存在，删除失败</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 获取要删除元素在数组中的索引位置</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> index </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> tmp</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">index</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 获取数组中最后一个元素的值</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> lastValue </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">numsSize </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 将最后一个元素移动到要删除元素的位置（覆盖要删除的元素）</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">index</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> lastValue</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 更新最后一个元素在哈希表中的索引位置</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    HashItem</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> lastItem </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">HASH_FIND_INT</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">indices</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">lastValue</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> lastItem</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">lastItem </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        lastItem</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">index </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> index</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 从哈希表中删除目标元素节点并释放内存</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">HASH_DEL</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">indices</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> tmp</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">free</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">tmp</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">numsSize</span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 数组元素个数减少</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> true</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 随机获取集合中的一个元素</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param obj RandomizedSet对象指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 随机返回的元素值</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">randomizedSetGetRandom</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">RandomizedSet</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> obj</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 使用随机数生成0到numsSize-1之间的索引</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> randomIndex </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rand</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">%</span><span class="token plain"> obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">numsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">randomIndex</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 返回数组中对应位置的元素</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 释放RandomizedSet对象占用的内存</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param obj RandomizedSet对象指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">randomizedSetFree</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">RandomizedSet</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> obj</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 遍历并释放哈希表中所有的节点内存</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    HashItem</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> curr</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">tmp</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">HASH_ITER</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hh</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">indices</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> curr</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> tmp</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">HASH_DEL</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">indices</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> curr</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">free</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">curr</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 释放数组内存和对象本身内存</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">free</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">nums</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">free</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">obj</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-总结">📖 总结：<a href="https://www.eurekashadow.xin/blog/LeetCode380#-%E6%80%BB%E7%BB%93" class="hash-link" aria-label="📖 总结：的直接链接" title="📖 总结：的直接链接">​</a></h3>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>点击展开题目总结</summary><div><div class="collapsibleContent_i85q"><h1>🤔 O(1)时间插入、删除和获取随机元素</h1><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1️⃣-题目核心信息">1️⃣ 题目核心信息<a href="https://www.eurekashadow.xin/blog/LeetCode380#1%EF%B8%8F%E2%83%A3-%E9%A2%98%E7%9B%AE%E6%A0%B8%E5%BF%83%E4%BF%A1%E6%81%AF" class="hash-link" aria-label="1️⃣ 题目核心信息的直接链接" title="1️⃣ 题目核心信息的直接链接">​</a></h2><p>🎯 <strong>功能描述</strong>：设计一个支持在平均O(1)时间复杂度下进行插入、删除和获取随机元素的数据结构</p><p>📥 <strong>输入输出</strong>：</p><ul>
<li><strong>输入</strong>：<!-- -->
<ul>
<li><code>val</code>：要插入或删除的整数值</li>
<li>无参数：用于获取随机元素</li>
</ul>
</li>
<li><strong>输出</strong>：<!-- -->
<ul>
<li><code>insert</code>：插入成功返回true，失败返回false</li>
<li><code>remove</code>：删除成功返回true，失败返回false</li>
<li><code>getRandom</code>：返回集合中的任意一个元素</li>
<li><code>create</code>：返回初始化的RandomizedSet对象</li>
<li><code>free</code>：释放对象内存，无返回值</li>
</ul>
</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2️⃣-实现原理">2️⃣ 实现原理<a href="https://www.eurekashadow.xin/blog/LeetCode380#2%EF%B8%8F%E2%83%A3-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86" class="hash-link" aria-label="2️⃣ 实现原理的直接链接" title="2️⃣ 实现原理的直接链接">​</a></h2><p>💡 <strong>核心思路</strong>：使用数组存储元素以支持O(1)随机访问，结合哈希表记录元素值到索引的映射以支持O(1)查找</p><p>📋 <strong>实现步骤</strong>：</p><ol>
<li>使用动态数组存储所有元素，支持通过索引O(1)访问任意元素</li>
<li>使用哈希表维护元素值到数组索引的映射关系，支持O(1)查找元素</li>
<li>插入时将元素添加到数组末尾并在哈希表中记录索引</li>
<li>删除时将目标元素与数组末尾元素交换，更新哈希表并删除目标元素</li>
</ol><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3️⃣-关键点解析">3️⃣ 关键点解析<a href="https://www.eurekashadow.xin/blog/LeetCode380#3%EF%B8%8F%E2%83%A3-%E5%85%B3%E9%94%AE%E7%82%B9%E8%A7%A3%E6%9E%90" class="hash-link" aria-label="3️⃣ 关键点解析的直接链接" title="3️⃣ 关键点解析的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-代码技巧">🎯 代码技巧<a href="https://www.eurekashadow.xin/blog/LeetCode380#-%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7" class="hash-link" aria-label="🎯 代码技巧的直接链接" title="🎯 代码技巧的直接链接">​</a></h3><ul>
<li><strong>数组+哈希表组合</strong>：数组支持随机访问，哈希表支持快速查找</li>
<li><strong>删除元素时的交换技巧</strong>：将待删除元素与末尾元素交换，避免数组元素移动</li>
<li><strong>双重数据结构同步维护</strong>：同时维护数组和哈希表中元素信息的一致性</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4️⃣-使用场景">4️⃣ 使用场景<a href="https://www.eurekashadow.xin/blog/LeetCode380#4%EF%B8%8F%E2%83%A3-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="4️⃣ 使用场景的直接链接" title="4️⃣ 使用场景的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-适用情况">✅ 适用情况：<a href="https://www.eurekashadow.xin/blog/LeetCode380#-%E9%80%82%E7%94%A8%E6%83%85%E5%86%B5" class="hash-link" aria-label="✅ 适用情况：的直接链接" title="✅ 适用情况：的直接链接">​</a></h3><ul>
<li>需要频繁进行插入、删除和随机访问操作的场景</li>
<li>对时间复杂度要求严格的随机集合应用</li>
<li>实现随机抽样或随机化算法的数据结构</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-前提条件">⚠️ 前提条件：<a href="https://www.eurekashadow.xin/blog/LeetCode380#%EF%B8%8F-%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6" class="hash-link" aria-label="⚠️ 前提条件：的直接链接" title="⚠️ 前提条件：的直接链接">​</a></h3><ul>
<li>元素值唯一，不支持重复元素</li>
<li>需要足够的内存空间维护数组和哈希表</li>
<li>getRandom调用时集合必须非空</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5️⃣-复杂度分析">5️⃣ 复杂度分析<a href="https://www.eurekashadow.xin/blog/LeetCode380#5%EF%B8%8F%E2%83%A3-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90" class="hash-link" aria-label="5️⃣ 复杂度分析的直接链接" title="5️⃣ 复杂度分析的直接链接">​</a></h2><ul>
<li>
<p>⏱️ 时间复杂度：</p>
<ul>
<li>insert: O(1) 平均时间复杂度</li>
<li>remove: O(1) 平均时间复杂度</li>
<li>getRandom: O(1) 时间复杂度</li>
<li>create: O(1) 时间复杂度</li>
<li>free: O(n) 时间复杂度，n为元素个数</li>
</ul>
</li>
<li>
<p>💾 空间复杂度：O(n)，n为存储的元素个数，需要数组和哈希表存储</p>
</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6️⃣-注意事项">6️⃣ 注意事项<a href="https://www.eurekashadow.xin/blog/LeetCode380#6%EF%B8%8F%E2%83%A3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="6️⃣ 注意事项的直接链接" title="6️⃣ 注意事项的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-边界情况">🚩 边界情况：<a href="https://www.eurekashadow.xin/blog/LeetCode380#-%E8%BE%B9%E7%95%8C%E6%83%85%E5%86%B5" class="hash-link" aria-label="🚩 边界情况：的直接链接" title="🚩 边界情况：的直接链接">​</a></h3><ul>
<li>插入已存在的元素</li>
<li>删除不存在的元素</li>
<li>集合为空时调用getRandom（题目保证不会出现）</li>
<li>集合只有一个元素时的删除操作</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-易错点">💥 易错点：<a href="https://www.eurekashadow.xin/blog/LeetCode380#-%E6%98%93%E9%94%99%E7%82%B9" class="hash-link" aria-label="💥 易错点：的直接链接" title="💥 易错点：的直接链接">​</a></h3><ul>
<li>删除元素后忘记更新交换元素在哈希表中的索引</li>
<li>内存释放不完整，忘记释放哈希表节点</li>
<li>getRandom实现中随机数范围错误，应为[0, numsSize)</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="7️⃣-惑之未解">7️⃣ 惑之未解<a href="https://www.eurekashadow.xin/blog/LeetCode380#7%EF%B8%8F%E2%83%A3-%E6%83%91%E4%B9%8B%E6%9C%AA%E8%A7%A3" class="hash-link" aria-label="7️⃣ 惑之未解的直接链接" title="7️⃣ 惑之未解的直接链接">​</a></h2><p>这是力扣里面的最优解？但是我看不懂~😂</p><p>我现在打算先理解灵码给出的代码吧，之后再来探索下面的内容！🧐</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * FNV哈希算法常量定义</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * FNV32_BASE: FNV-1哈希算法的基础值</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * FNV32_PRIME: FNV-1哈希算法的素数</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">define</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property macro-name" style="color:#36acaa">FNV32_BASE</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression keyword" style="color:#00009f">unsigned</span><span class="token macro property expression" style="color:#36acaa"> </span><span class="token macro property expression keyword" style="color:#00009f">int</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token macro property expression" style="color:#36acaa"> </span><span class="token macro property expression number" style="color:#36acaa">0x811c9dc5</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">define</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property macro-name" style="color:#36acaa">FNV32_PRIME</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression keyword" style="color:#00009f">unsigned</span><span class="token macro property expression" style="color:#36acaa"> </span><span class="token macro property expression keyword" style="color:#00009f">int</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token macro property expression" style="color:#36acaa"> </span><span class="token macro property expression number" style="color:#36acaa">0x01000193</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * FNV-1哈希算法实现</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param buf 要哈希的数据缓冲区</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param len 数据长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 计算得到的哈希值</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">memhash</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">buf</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">size_t</span><span class="token plain"> len</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> hash </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> FNV32_BASE</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">ucbuf </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> buf</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">len</span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		</span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> c </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">ucbuf</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		hash </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hash </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> FNV32_PRIME</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">^</span><span class="token plain"> c</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> hash</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 哈希表项结构体</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 用于链式解决哈希冲突</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> hash</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">                  </span><span class="token comment" style="color:#999988;font-style:italic">// 存储预计算的哈希值</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">next</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">         </span><span class="token comment" style="color:#999988;font-style:italic">// 指向下一个冲突项的指针</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 初始化哈希表项</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param entry 要初始化的哈希表项</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param hash  预计算的哈希值</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">inline</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">hashmap_entry_init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">entry</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> hash</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    entry</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">hash </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> hash</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    entry</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">next </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 根据键值计算哈希值并初始化哈希表项</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">define</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property macro-name function" style="color:#d73a49">__hashmap_entry_init</span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression" style="color:#36acaa">entry</span><span class="token macro property expression punctuation" style="color:#393A34">,</span><span class="token macro property expression" style="color:#36acaa"> key</span><span class="token macro property expression punctuation" style="color:#393A34">,</span><span class="token macro property expression" style="color:#36acaa"> len</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token macro property expression" style="color:#36acaa"> </span><span class="token macro property expression function" style="color:#d73a49">hashmap_entry_init</span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression" style="color:#36acaa">entry</span><span class="token macro property expression punctuation" style="color:#393A34">,</span><span class="token macro property expression" style="color:#36acaa"> </span><span class="token macro property expression function" style="color:#d73a49">memhash</span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression" style="color:#36acaa">key</span><span class="token macro property expression punctuation" style="color:#393A34">,</span><span class="token macro property expression" style="color:#36acaa"> len</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 哈希表项比较回调函数类型定义</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param entry     哈希表中的项</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param key       要比较的键</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param key_data  键数据</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 相等返回0，不相等返回非0值</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">typedef</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">hashmap_entry_cmp_callback</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">entry</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">key</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">key_data</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 哈希表结构体</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">table</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">       </span><span class="token comment" style="color:#999988;font-style:italic">// 哈希桶数组</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> table_size</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 哈希桶数组大小</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> private_size</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// 当前存储的元素数量</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    hashmap_entry_cmp_callback cmp</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">// 元素比较回调函数</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> grow_at</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">               </span><span class="token comment" style="color:#999988;font-style:italic">// 触发扩容的阈值</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> shrink_at</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">             </span><span class="token comment" style="color:#999988;font-style:italic">// 触发收缩的阈值</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 哈希表配置常量</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * hashmap_init_size: 初始哈希表大小</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * hashmap_factor: 负载因子(百分比)</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * hashmap_resize_bit: 扩容/收缩时的位移量</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">define</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property macro-name" style="color:#36acaa">hashmap_init_size</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property expression number" style="color:#36acaa">64</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">define</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property macro-name" style="color:#36acaa">hashmap_factor</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property expression number" style="color:#36acaa">80</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">define</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property macro-name" style="color:#36acaa">hashmap_resize_bit</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property expression number" style="color:#36acaa">2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 分配哈希表桶数组</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param map  哈希表结构体指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param size 桶数组大小</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">alloc_table</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> size</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">table_size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> size</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">table </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">calloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">size</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 初始化为NULL</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 计算扩容和收缩阈值</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">grow_at </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> size </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> hashmap_factor </span><span class="token operator" style="color:#393A34">/</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">100</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">size </span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token plain"> hashmap_init_size</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">shrink_at </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">shrink_at </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">grow_at </span><span class="token operator" style="color:#393A34">/</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"> hashmap_resize_bit</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 比较两个哈希表项是否相等</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param map       哈希表结构体指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param entry     哈希表中的项</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param key       要比较的键</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param key_data  键数据</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 相等返回true，否则返回false</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">inline</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">entry_equals</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">entry</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">key</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">key_data</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">entry</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">hash </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> key</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">hash</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">entry </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> key </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!</span><span class="token plain">map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token function" style="color:#d73a49">cmp</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">entry</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> key</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> key_data</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 初始化哈希表</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param map        哈希表结构体指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param init_size  初始大小</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param cmp        比较回调函数</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">hashmap_init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> init_size</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> hashmap_entry_cmp_callback cmp</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> hashmap_init_size</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">cmp </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> cmp</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 根据初始大小计算合适的哈希表大小</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    init_size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> init_size </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">100</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">/</span><span class="token plain"> hashmap_factor</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">init_size </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> size</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        size </span><span class="token operator" style="color:#393A34">&lt;&lt;=</span><span class="token plain"> hashmap_resize_bit</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">alloc_table</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> size</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">private_size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 计算哈希桶索引</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param map 哈希表结构体指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param key 键项</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 桶索引</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">inline</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">bucket</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">key</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> key</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">hash </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">table_size </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 查找键项在哈希表中的位置指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param map       哈希表结构体指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param key       要查找的键</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param key_data  键数据</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 指向该项指针的指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token operator" style="color:#393A34">*</span><span class="token function" style="color:#d73a49">find_entry_ptr</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">key</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">key_data</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> b </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">bucket</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> key</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">entry </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">table</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">b</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">entry </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!</span><span class="token function" style="color:#d73a49">entry_equals</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">entry</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> key</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> key_data</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        entry </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">entry</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">next</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> entry</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 重新哈希（扩容或收缩）</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param map      哈希表结构体指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param new_size 新的哈希表大小</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rehash</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> new_size</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> old_size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">table_size</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">old_table </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">table</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">alloc_table</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> new_size</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 将旧表中的所有项重新插入新表</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> old_size</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">e </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> old_table</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">e</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">next </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> e</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">next</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> b </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">bucket</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> e</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            e</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">next </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">table</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">b</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">table</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">b</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> e</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            e </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> next</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">free</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">old_table</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 从哈希表中移除项</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param map       哈希表结构体指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param key       要移除的键</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param key_data  键数据</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 被移除的项，不存在则返回NULL</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token function" style="color:#d73a49">hashmap_remove</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">key</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">key_data</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">e</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">old</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    e </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">find_entry_ptr</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> key</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> key_data</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">e</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    old </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">e</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">e </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> old</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">next</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    old</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">next </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 如果元素数量低于收缩阈值，则进行收缩</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">--</span><span class="token plain">map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">private_size </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">shrink_at</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">rehash</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">table_size </span><span class="token operator" style="color:#393A34">&gt;&gt;</span><span class="token plain"> hashmap_resize_bit</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> old</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 检查键是否存在于哈希表中</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param map       哈希表结构体指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param key       要检查的键</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param key_data  键数据</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 存在返回true，否则返回false</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> bool </span><span class="token function" style="color:#d73a49">hashmap_exists</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">key</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">key_data</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">e </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">find_entry_ptr</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> key</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> key_data</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">e</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> false</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> true</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 向哈希表中添加项</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param map    哈希表结构体指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param entry  要添加的项</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">hashmap_add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">entry</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> b </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">bucket</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> entry</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    entry</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">next </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">table</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">b</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">table</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">b</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> entry</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 如果元素数量超过扩容阈值，则进行扩容</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">++</span><span class="token plain">map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">private_size </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">grow_at</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">rehash</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">table_size </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"> hashmap_resize_bit</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 向哈希表中放置项（如果已存在则替换）</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param map    哈希表结构体指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param entry  要放置的项</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 被替换的旧项，没有则返回NULL</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token function" style="color:#d73a49">hashmap_put</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">entry</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">old </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">hashmap_remove</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> entry</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">hashmap_add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> entry</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> old</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 哈希表迭代器结构体</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_iter</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 关联的哈希表</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">next</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 下一个要访问的项</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> table_pos</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">              </span><span class="token comment" style="color:#999988;font-style:italic">// 当前桶索引</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 初始化哈希表迭代器</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param iter 迭代器结构体指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param map  要迭代的哈希表</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">hashmap_iter_init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_iter</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">iter</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    iter</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">map </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> map</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    iter</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">next </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    iter</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">table_pos </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 获取迭代器的下一个项</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param iter 迭代器结构体指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 下一个哈希表项，没有则返回NULL</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token function" style="color:#d73a49">hashmap_iter_next</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_iter</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">iter</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">curr </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> iter</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">next</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">curr</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            iter</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">next </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> curr</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">next</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> curr</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">iter</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">table_pos </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> iter</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">table_size</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        curr </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> iter</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">table</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">iter</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">table_pos</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 清空哈希表并释放所有内存</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param map    哈希表结构体指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param offset 项结构体中hashmap_entry成员的偏移量</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">hashmap_clear</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> offset</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_iter</span><span class="token plain"> iter</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">e</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">hashmap_iter_init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">iter</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> map</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 逐个释放所有项的内存</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">e </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">hashmap_iter_next</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">iter</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">free</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">e </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> offset</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">free</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">table</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">memset</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain">   </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 整型键值的哈希表项结构体</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">int_hashmap_entry</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> key</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">                    </span><span class="token comment" style="color:#999988;font-style:italic">// 键</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> value</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">                  </span><span class="token comment" style="color:#999988;font-style:italic">// 值</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> entry</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 基础哈希表项</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 计算int_hashmap_entry中entry成员的偏移量</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">define</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property macro-name" style="color:#36acaa">INT_HASHMAP_OFFSET</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property expression function" style="color:#d73a49">offsetof</span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression keyword" style="color:#00009f">struct</span><span class="token macro property expression" style="color:#36acaa"> </span><span class="token macro property expression class-name" style="color:#36acaa">int_hashmap_entry</span><span class="token macro property expression punctuation" style="color:#393A34">,</span><span class="token macro property expression" style="color:#36acaa"> entry</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token macro property expression" style="color:#36acaa"> </span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 通过哈希表项指针获取包含它的int_hashmap_entry指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">define</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property macro-name function" style="color:#d73a49">get_int_hashmap_entry_data</span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression" style="color:#36acaa">entry</span><span class="token macro property expression punctuation" style="color:#393A34">,</span><span class="token macro property expression" style="color:#36acaa"> type</span><span class="token macro property expression punctuation" style="color:#393A34">,</span><span class="token macro property expression" style="color:#36acaa"> member</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token macro property expression" style="color:#36acaa"> </span><span class="token macro property punctuation" style="color:#393A34">\</span><span class="token macro property" style="color:#36acaa"></span><br></span><span class="token-line" style="color:#393A34"><span class="token macro property" style="color:#36acaa">    </span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression" style="color:#36acaa">type </span><span class="token macro property expression operator" style="color:#393A34">*</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token macro property expression" style="color:#36acaa"> </span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression" style="color:#36acaa">u_char </span><span class="token macro property expression operator" style="color:#393A34">*</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression" style="color:#36acaa">entry</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token macro property expression" style="color:#36acaa"> </span><span class="token macro property expression operator" style="color:#393A34">-</span><span class="token macro property expression" style="color:#36acaa"> </span><span class="token macro property expression function" style="color:#d73a49">offsetof</span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression" style="color:#36acaa">type</span><span class="token macro property expression punctuation" style="color:#393A34">,</span><span class="token macro property expression" style="color:#36acaa"> member</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 创建整型哈希表项</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param key   键</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param value 值</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 新创建的项，失败返回NULL</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">inline</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">int_hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token function" style="color:#d73a49">int_hashmap_entry_create</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> key</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> value</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">int_hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">int_entry</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    int_entry </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">malloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">int_hashmap_entry</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">int_entry</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    int_entry</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">key </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> key</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    int_entry</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">value </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> value</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">__hashmap_entry_init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">int_entry</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">entry</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">key</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> int_entry</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 整型哈希表结构体</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">int_hashmap</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap</span><span class="token plain"> map</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 基础哈希表</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 整型哈希表项比较函数</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param entry     哈希表中的项</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param key       要比较的键</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param key_data  键数据</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 相等返回0，不相等返回非0值</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">int_hashmap_entry_cmp</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">entry</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">key</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">key_data</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">int_hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">int_entry </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">get_int_hashmap_entry_data</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">entry</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">int_hashmap_entry</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> entry</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">key_data</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">int_entry</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">key </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> key_data</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">int_hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">key_entry </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">get_int_hashmap_entry_data</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">key</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">int_hashmap_entry</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> entry</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">int_entry</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">key </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> key_entry</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">key</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 初始化整型哈希表</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param int_map   整型哈希表结构体指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param init_size 初始大小</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">inline</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">int_hashmap_init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">int_hashmap</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">int_map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> init_size</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">hashmap_init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">int_map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> init_size</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> int_hashmap_entry_cmp</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 从整型哈希表中移除项</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param int_map 整型哈希表结构体指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param key     要移除的键</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 被移除的项，不存在则返回NULL</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">inline</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">int_hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token function" style="color:#d73a49">int_hashmap_remove</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">int_hashmap</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">int_map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> key</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> key_entry</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">__hashmap_entry_init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">key_entry</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">key</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">e </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">hashmap_remove</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">int_map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">key_entry</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">key</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">e</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">int_hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">data </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">get_int_hashmap_entry_data</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">e</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">int_hashmap_entry</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> entry</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> data</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 向整型哈希表中放置项</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param int_map 整型哈希表结构体指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param key     键</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param value   值</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 被替换的旧项，没有则返回NULL</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">inline</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">int_hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token function" style="color:#d73a49">int_hashmap_put</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">int_hashmap</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">int_map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> key</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> value</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">e </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">hashmap_put</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">int_map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token function" style="color:#d73a49">int_hashmap_entry_create</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">key</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> value</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">entry</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">e</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">int_hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">data </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">get_int_hashmap_entry_data</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">e</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">int_hashmap_entry</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> entry</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> data</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 检查键是否存在于整型哈希表中</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param int_map 整型哈希表结构体指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param key     要检查的键</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 存在返回true，否则返回false</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">inline</span><span class="token plain"> bool </span><span class="token function" style="color:#d73a49">int_hashmap_exists</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">int_hashmap</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">int_map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> key</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">hashmap_entry</span><span class="token plain"> key_entry</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">__hashmap_entry_init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">key_entry</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">key</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">hashmap_exists</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">int_map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">key_entry</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">key</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 向整型哈希表中添加项</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param int_map 整型哈希表结构体指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param key     键</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param value   值</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">inline</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">int_hashmap_add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">int_hashmap</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">int_map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> key</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> value</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">hashmap_add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">int_map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token function" style="color:#d73a49">int_hashmap_entry_create</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">key</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> value</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">entry</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 清空整型哈希表并释放所有内存</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param int_map 整型哈希表结构体指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">inline</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">int_hashmap_clear</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">int_hashmap</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">int_map</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">hashmap_clear</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">int_map</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> INT_HASHMAP_OFFSET</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * RandomizedSet结构体</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 结合数组和哈希表实现O(1)时间复杂度的插入、删除和随机获取</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">typedef</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">nums</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">                  </span><span class="token comment" style="color:#999988;font-style:italic">// 存储实际元素的数组</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> alloc</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">                  </span><span class="token comment" style="color:#999988;font-style:italic">// 数组已分配的空间大小</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> nr</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">                     </span><span class="token comment" style="color:#999988;font-style:italic">// 数组中当前元素的数量</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">int_hashmap</span><span class="token plain"> map</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">// 整型哈希表，存储元素值到数组索引的映射</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> RandomizedSet</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 默认数组分配大小</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">define</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property macro-name" style="color:#36acaa">DEFAULT_ALLOC</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property expression number" style="color:#36acaa">1024</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 创建RandomizedSet对象</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 新创建的RandomizedSet对象指针，失败返回NULL</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RandomizedSet </span><span class="token operator" style="color:#393A34">*</span><span class="token function" style="color:#d73a49">randomizedSetCreate</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    RandomizedSet </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">rand_set</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    rand_set </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">malloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">RandomizedSet</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">rand_set</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    rand_set</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">nums </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">calloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">DEFAULT_ALLOC</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">rand_set</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">nums</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">free</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">rand_set</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    rand_set</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">alloc </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> DEFAULT_ALLOC</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    rand_set</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">nr </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">int_hashmap_init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">rand_set</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1024</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> rand_set</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 向集合中插入元素</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param rand_set RandomizedSet对象指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param val      要插入的元素值</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 插入成功返回true，元素已存在返回false</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">bool </span><span class="token function" style="color:#d73a49">randomizedSetInsert</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">RandomizedSet </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">rand_set</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> val</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 检查元素是否已存在</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">int_hashmap_exists</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">rand_set</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> val</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> false</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 如果数组空间不足，则扩容</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">rand_set</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">nr </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> rand_set</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">alloc</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> new_alloc </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> rand_set</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">alloc </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        rand_set</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">nums </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">realloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">rand_set</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">nums</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> new_alloc </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">rand_set</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">nums</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> false</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        rand_set</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">alloc </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> new_alloc</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token comment" style="color:#999988;font-style:italic">// 把新元素放在数组当前元素个数对应的索引位置</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">obj</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">numsSize</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> val</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 在哈希表中记录元素值和其在数组中的索引</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">int_hashmap_add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">rand_set</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> val</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> rand_set</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">nr</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">//数组中当前元素数量+1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	rand_set</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">nr</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> true</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 从集合中删除元素</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param rand_set RandomizedSet对象指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param val      要删除的元素值</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 删除成功返回true，元素不存在返回false</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">bool </span><span class="token function" style="color:#d73a49">randomizedSetRemove</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">RandomizedSet </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">rand_set</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> val</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 从哈希表中移除元素并获取其信息</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">int_hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">entry </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">int_hashmap_remove</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">rand_set</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> val</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">entry</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> false</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 获取要删除元素在数组中的索引</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> index </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> entry</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">value</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 获取数组中最后一个元素的值</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> last_val </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> rand_set</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">--</span><span class="token plain">rand_set</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">nr</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 将最后一个元素移动到要删除元素的位置</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    rand_set</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">index</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> last_val</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 如果删除的不是最后一个元素，需要更新最后一个元素在哈希表中的索引</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">index </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> rand_set</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">nr</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">int_hashmap_entry</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">last_entry </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">int_hashmap_remove</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">rand_set</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> last_val</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        last_entry</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">value </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> index</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">hashmap_add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">rand_set</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">last_entry</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">entry</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">free</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">entry</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 释放被删除项的内存</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> true</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 随机获取集合中的一个元素</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param rand_set RandomizedSet对象指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 随机返回的元素值</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">randomizedSetGetRandom</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">RandomizedSet </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">rand_set</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 使用随机数生成0到nr-1之间的索引</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> rand_set</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token function" style="color:#d73a49">rand</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">%</span><span class="token plain"> rand_set</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">nr</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 释放RandomizedSet对象占用的内存</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param rand_set RandomizedSet对象指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">randomizedSetFree</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">RandomizedSet </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">rand_set</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">rand_set</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">nums</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">free</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">rand_set</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">nums</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">int_hashmap_clear</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">rand_set</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">map</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">free</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">rand_set</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * Your RandomizedSet struct will be instantiated and called as such:</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * RandomizedSet* obj = randomizedSetCreate();</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * bool param_1 = randomizedSetInsert(obj, val);</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * bool param_2 = randomizedSetRemove(obj, val);</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * int param_3 = randomizedSetGetRandom(obj);</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * randomizedSetFree(obj);</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">*/</span><br></span></code></pre></div></div></div></div></details>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="补充解释"><span class="B2_JnYG"><a href="https://www.eurekashadow.xin/blog/LeetCode380plus">补充解释</a></span><a href="https://www.eurekashadow.xin/blog/LeetCode380#%E8%A1%A5%E5%85%85%E8%A7%A3%E9%87%8A" class="hash-link" aria-label="补充解释的直接链接" title="补充解释的直接链接">​</a></h2>]]></content:encoded>
            <category>数组</category>
        </item>
        <item>
            <title><![CDATA[H 指数]]></title>
            <link>https://www.eurekashadow.xin/blog/LeetCode274</link>
            <guid>https://www.eurekashadow.xin/blog/LeetCode274</guid>
            <pubDate>Mon, 04 Aug 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[力扣面试经典——274题]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="力扣面试经典274题"><span class="B2_JnYG"><a href="https://leetcode.cn/problems/h-index/description/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer" title="力扣">力扣面试经典——274题</a></span><a href="https://www.eurekashadow.xin/blog/LeetCode274#%E5%8A%9B%E6%89%A3%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B8274%E9%A2%98" class="hash-link" aria-label="力扣面试经典274题的直接链接" title="力扣面试经典274题的直接链接">​</a></h3>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-参考代码">💡 参考代码：<a href="https://www.eurekashadow.xin/blog/LeetCode274#-%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81" class="hash-link" aria-label="💡 参考代码：的直接链接" title="💡 参考代码：的直接链接">​</a></h3>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 计算研究者的h指数</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * h指数的定义：研究者至少发表了h篇论文，并且至少有h篇论文被引用次数大于等于h</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param citations 整数数组，citations[i]表示第i篇论文的引用次数</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param citationsSize 数组citations的长度，即论文总数</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 返回该研究者的h指数</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 算法思路：</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 1. 使用计数排序的思想，统计每个引用次数的论文数量</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 2. 从高到低遍历可能的h值，找到满足条件的最大h值</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 时间复杂度：O(n)</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 空间复杂度：O(n)</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">hIndex</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> citations</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> citationsSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 创建计数数组，大小为 citationsSize + 1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// count[i] 表示引用次数为i的论文数量</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> count </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token function" style="color:#d73a49">calloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">citationsSize </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 统计每个引用次数的论文数量</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 如果引用次数超过论文总数，则统一计入count[citationsSize]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> citationsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">citations</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> citationsSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            count</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">citationsSize</span><span class="token punctuation" style="color:#393A34">]</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 引用次数≥n的论文都计入最高计数位</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            count</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">citations</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">]</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">   </span><span class="token comment" style="color:#999988;font-style:italic">// 正常计数</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 从后往前累加，计算引用次数大于等于i的论文数量</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// sum表示引用次数≥i的论文总数</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> sum </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> citationsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        sum </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> count</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 累加引用次数≥i的论文数量</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">sum </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">   </span><span class="token comment" style="color:#999988;font-style:italic">// 如果引用次数≥i的论文数量≥i，则h指数为i</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token function" style="color:#d73a49">free</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">count</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">free</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">count</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 如果没有找到有效的h指数，返回0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-总结">📖 总结：<a href="https://www.eurekashadow.xin/blog/LeetCode274#-%E6%80%BB%E7%BB%93" class="hash-link" aria-label="📖 总结：的直接链接" title="📖 总结：的直接链接">​</a></h3>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>点击展开题目总结</summary><div><div class="collapsibleContent_i85q"><h1>🤔 H 指数</h1><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1️⃣-题目核心信息">1️⃣ 题目核心信息<a href="https://www.eurekashadow.xin/blog/LeetCode274#1%EF%B8%8F%E2%83%A3-%E9%A2%98%E7%9B%AE%E6%A0%B8%E5%BF%83%E4%BF%A1%E6%81%AF" class="hash-link" aria-label="1️⃣ 题目核心信息的直接链接" title="1️⃣ 题目核心信息的直接链接">​</a></h2><p>🎯 <strong>功能描述</strong>：根据给定的论文引用次数数组，计算研究者的h指数。h指数是指研究者至少发表了h篇论文，且这h篇论文每篇都被引用至少h次。</p><p>📥 <strong>输入输出</strong>：</p><ul>
<li><strong>输入</strong>：<code>int* citations</code>（论文引用次数数组），<code>int citationsSize</code>（论文总数）</li>
<li><strong>输出</strong>：返回h指数值</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2️⃣-实现原理">2️⃣ 实现原理<a href="https://www.eurekashadow.xin/blog/LeetCode274#2%EF%B8%8F%E2%83%A3-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86" class="hash-link" aria-label="2️⃣ 实现原理的直接链接" title="2️⃣ 实现原理的直接链接">​</a></h2><p>💡 <strong>核心思路</strong>：使用计数排序的思想，统计每个引用次数的论文数量，然后从高到低查找满足条件的最大h值。</p><p>📋 <strong>实现步骤</strong>：</p><ol>
<li>创建大小为<code>citationsSize + 1</code>的计数数组，用于统计每个引用次数的论文数量</li>
<li>遍历引用数组，将引用次数超过<code>citationsSize</code>的论文统一计入最高计数位</li>
<li>从后往前遍历计数数组，累加引用次数大于等于当前索引的论文总数</li>
<li>当累加和大于等于当前索引时，该索引即为最大的h指数</li>
</ol><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3️⃣-关键点解析">3️⃣ 关键点解析<a href="https://www.eurekashadow.xin/blog/LeetCode274#3%EF%B8%8F%E2%83%A3-%E5%85%B3%E9%94%AE%E7%82%B9%E8%A7%A3%E6%9E%90" class="hash-link" aria-label="3️⃣ 关键点解析的直接链接" title="3️⃣ 关键点解析的直接链接">​</a></h2><p>原始思路是遍历每个可能的h值并统计满足条件的论文数量，时间复杂度为O(n²)。最优解使用计数排序思想，将时间复杂度优化到O(n)。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-代码技巧">🎯 代码技巧<a href="https://www.eurekashadow.xin/blog/LeetCode274#-%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7" class="hash-link" aria-label="🎯 代码技巧的直接链接" title="🎯 代码技巧的直接链接">​</a></h3><ul>
<li>计数排序优化：利用引用次数的有限范围特性</li>
<li>边界处理：将引用次数超过n的论文统一处理</li>
<li>逆序累加：从最大可能的h值开始查找，确保找到最大值</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4️⃣-使用场景">4️⃣ 使用场景<a href="https://www.eurekashadow.xin/blog/LeetCode274#4%EF%B8%8F%E2%83%A3-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="4️⃣ 使用场景的直接链接" title="4️⃣ 使用场景的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-适用情况">✅ 适用情况：<a href="https://www.eurekashadow.xin/blog/LeetCode274#-%E9%80%82%E7%94%A8%E6%83%85%E5%86%B5" class="hash-link" aria-label="✅ 适用情况：的直接链接" title="✅ 适用情况：的直接链接">​</a></h3><ul>
<li>计算学术评价指标</li>
<li>统计分析场景</li>
<li>需要评估"数量与质量"综合指标的场景</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-前提条件">⚠️ 前提条件：<a href="https://www.eurekashadow.xin/blog/LeetCode274#%EF%B8%8F-%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6" class="hash-link" aria-label="⚠️ 前提条件：的直接链接" title="⚠️ 前提条件：的直接链接">​</a></h3><ul>
<li>输入数组不为空</li>
<li>引用次数为非负整数</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5️⃣-复杂度分析">5️⃣ 复杂度分析<a href="https://www.eurekashadow.xin/blog/LeetCode274#5%EF%B8%8F%E2%83%A3-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90" class="hash-link" aria-label="5️⃣ 复杂度分析的直接链接" title="5️⃣ 复杂度分析的直接链接">​</a></h2><ul>
<li>
<p>⏱️ 时间复杂度：O(n)，需要遍历数组两次</p>
</li>
<li>
<p>💾 空间复杂度：O(n)，需要额外的计数数组</p>
</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6️⃣-注意事项">6️⃣ 注意事项<a href="https://www.eurekashadow.xin/blog/LeetCode274#6%EF%B8%8F%E2%83%A3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="6️⃣ 注意事项的直接链接" title="6️⃣ 注意事项的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-边界情况">🚩 边界情况：<a href="https://www.eurekashadow.xin/blog/LeetCode274#-%E8%BE%B9%E7%95%8C%E6%83%85%E5%86%B5" class="hash-link" aria-label="🚩 边界情况：的直接链接" title="🚩 边界情况：的直接链接">​</a></h3><ul>
<li>空数组或只有一个元素</li>
<li>所有论文引用次数都为0</li>
<li>所有论文引用次数都很大</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-易错点">💥 易错点：<a href="https://www.eurekashadow.xin/blog/LeetCode274#-%E6%98%93%E9%94%99%E7%82%B9" class="hash-link" aria-label="💥 易错点：的直接链接" title="💥 易错点：的直接链接">​</a></h3><ul>
<li>混淆h指数的定义，误以为需要恰好h篇论文引用h次</li>
<li>忘记释放动态分配的内存</li>
<li>边界条件处理不当，如h值可能为0的情况</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="7⃣-补充说明">7⃣ 补充说明<a href="https://www.eurekashadow.xin/blog/LeetCode274#7%E2%83%A3-%E8%A1%A5%E5%85%85%E8%AF%B4%E6%98%8E" class="hash-link" aria-label="7⃣ 补充说明的直接链接" title="7⃣ 补充说明的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="h-指数解释">H 指数解释<a href="https://www.eurekashadow.xin/blog/LeetCode274#h-%E6%8C%87%E6%95%B0%E8%A7%A3%E9%87%8A" class="hash-link" aria-label="H 指数解释的直接链接" title="H 指数解释的直接链接">​</a></h3><p>假设某研究者发表了 5 篇论文，引用次数分别为：<code>[3, 0, 6, 1, 5]</code></p><p>我们要找最大的 <code>h</code>，使得至少有 h 篇论文被引用了至少 <code>h</code> 次。</p><p>尝试几个 <code>h</code> 值：</p><ul>
<li>h = 0：0 篇论文引用 ≥ 0 → 成立（但我们要找最大的 h）</li>
<li>h = 1：至少 1 篇论文引用 ≥ 1 → 成立（有 4 篇）</li>
<li>h = 2：至少 2 篇论文引用 ≥ 2 → 成立（有 3 篇）</li>
<li>h = 3：至少 3 篇论文引用 ≥ 3 → 成立（有 3 篇）</li>
<li>h = 4：至少 4 篇论文引用 ≥ 4 → 不成立（只有 2 篇）</li>
<li>h = 5：至少 5 篇论文引用 ≥ 5 → 不成立（只有 2 篇）</li>
</ul><p>所以 h 指数是 3。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="h指数计算示例详解">h指数计算示例详解<a href="https://www.eurekashadow.xin/blog/LeetCode274#h%E6%8C%87%E6%95%B0%E8%AE%A1%E7%AE%97%E7%A4%BA%E4%BE%8B%E8%AF%A6%E8%A7%A3" class="hash-link" aria-label="h指数计算示例详解的直接链接" title="h指数计算示例详解的直接链接">​</a></h3><p>例子：<code>citations = [3, 0, 6, 1, 5]</code></p><p>论文引用次数数组为 <code>[3, 0, 6, 1, 5]</code>，共5篇论文。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="第一步初始化计数数组">第一步：初始化计数数组<a href="https://www.eurekashadow.xin/blog/LeetCode274#%E7%AC%AC%E4%B8%80%E6%AD%A5%E5%88%9D%E5%A7%8B%E5%8C%96%E8%AE%A1%E6%95%B0%E6%95%B0%E7%BB%84" class="hash-link" aria-label="第一步：初始化计数数组的直接链接" title="第一步：初始化计数数组的直接链接">​</a></h3><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> count </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token function" style="color:#d73a49">calloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">citationsSize </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre></div></div><p>创建一个长度为 5 + 1 = 6 的数组 count，所有元素初始为 0：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">count </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">索引</span><span class="token operator" style="color:#393A34">:</span><span class="token plain">    </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">1</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">2</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">3</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">4</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">5</span><br></span></code></pre></div></div><p><strong>calloc与malloc的区别</strong></p><ul>
<li><code>malloc</code>: 只分配内存，不初始化内容（内存中可能包含随机数据）</li>
<li><code>calloc</code>: 分配内存后会将所有字节初始化为0</li>
</ul><p><strong>calloc函数原型：</strong></p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">void</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">calloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">size_t</span><span class="token plain"> num</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">size_t</span><span class="token plain"> size</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="第二步统计每个引用次数的论文数量">第二步：统计每个引用次数的论文数量<a href="https://www.eurekashadow.xin/blog/LeetCode274#%E7%AC%AC%E4%BA%8C%E6%AD%A5%E7%BB%9F%E8%AE%A1%E6%AF%8F%E4%B8%AA%E5%BC%95%E7%94%A8%E6%AC%A1%E6%95%B0%E7%9A%84%E8%AE%BA%E6%96%87%E6%95%B0%E9%87%8F" class="hash-link" aria-label="第二步：统计每个引用次数的论文数量的直接链接" title="第二步：统计每个引用次数的论文数量的直接链接">​</a></h3><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> citationsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">citations</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> citationsSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        count</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">citationsSize</span><span class="token punctuation" style="color:#393A34">]</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        count</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">citations</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">]</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div><p>逐个处理每篇论文的引用次数：</p><ul>
<li><code>citations[0]</code> = <code>3</code> → <code>count[3]++</code> → <code>count</code> = <code>[0, 0, 0, 1, 0, 0]</code></li>
<li><code>citations[1]</code> = <code>0</code> → <code>count[0]++</code> → <code>count</code> = <code>[1, 0, 0, 1, 0, 0]</code></li>
<li><code>citations[2]</code> = <code>6</code> → <code>6</code> &gt;= <code>5</code> → <code>count[5]++</code> → <code>count</code> = <code>[1, 0, 0, 1, 0, 1]</code></li>
<li><code>citations[3]</code> = <code>1</code> → <code>count[1]++</code> → <code>count</code> = <code>[1, 1, 0, 1, 0, 1]</code></li>
<li><code>citations[4]</code> = <code>5</code> → <code>count[5]++</code> → <code>count</code> = <code>[1, 1, 0, 1, 0, 2]</code>
最终 count 数组为：</li>
</ul><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">count </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">索引</span><span class="token operator" style="color:#393A34">:</span><span class="token plain">    </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">1</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">2</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">3</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">4</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">5</span><br></span></code></pre></div></div><p>这表示：</p><ul>
<li>引用次数为 0 的论文有 1 篇</li>
<li>引用次数为 1 的论文有 1 篇</li>
<li>引用次数为 2 的论文有 0 篇</li>
<li>引用次数为 3 的论文有 1 篇</li>
<li>引用次数为 4 的论文有 0 篇</li>
<li>引用次数 ≥ 5 的论文有 2 篇</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="第三步从后往前累加找最大的-h">第三步：从后往前累加，找最大的 h<a href="https://www.eurekashadow.xin/blog/LeetCode274#%E7%AC%AC%E4%B8%89%E6%AD%A5%E4%BB%8E%E5%90%8E%E5%BE%80%E5%89%8D%E7%B4%AF%E5%8A%A0%E6%89%BE%E6%9C%80%E5%A4%A7%E7%9A%84-h" class="hash-link" aria-label="第三步：从后往前累加，找最大的 h的直接链接" title="第三步：从后往前累加，找最大的 h的直接链接">​</a></h3><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> sum </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> citationsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    sum </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> count</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">sum </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">free</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">count</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div><p>从 <code>i = 5</code> 开始往下检查：</p><ul>
<li>i = 5:</li>
</ul><p><code>sum += count[5]</code> → <code>sum = 0 + 2 = 2</code></p><ul>
<li>
<p>判断 <code>sum &gt;= i</code> → <code>2 &gt;= 5</code>？ ❌ 不成立</p>
</li>
<li>
<p>i = 4:</p>
</li>
<li>
<p><code>sum += count[4]</code> → <code>sum = 2 + 0 = 2</code></p>
</li>
<li>
<p>判断 <code>sum &gt;= i</code> → <code>2 &gt;= 4</code>？ ❌ 不成立</p>
</li>
<li>
<p>i = 3:</p>
</li>
<li>
<p><code>sum += count[3]</code> → <code>sum = 2 + 1 = 3</code></p>
</li>
<li>
<p>判断 <code>sum &gt;= i</code> → <code>3 &gt;= 3</code>？ ✅ 成立！返回 3
结果
函数返回 <code>3</code>，这就是该研究者的 <code>h</code> 指数。</p>
</li>
</ul><p>验证一下
引用次数数组：[3, 0, 6, 1, 5]</p><p>我们检查是否有至少 3 篇论文引用次数 ≥ 3：</p><ul>
<li>论文1: 3 ≥ 3 ✅</li>
<li>论文2: 0 ≥ 3 ❌</li>
<li>论文3: 6 ≥ 3 ✅</li>
<li>论文4: 1 ≥ 3 ❌</li>
<li>论文5: 5 ≥ 3 ✅</li>
</ul><p>有 3 篇论文满足条件，所以 h 指数确实是 3。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="最初思路">最初思路<a href="https://www.eurekashadow.xin/blog/LeetCode274#%E6%9C%80%E5%88%9D%E6%80%9D%E8%B7%AF" class="hash-link" aria-label="最初思路的直接链接" title="最初思路的直接链接">​</a></h3><p>惭愧，这题我最初没做出来，题目理解都是错的，上面的最优解自然是AI给，下面这个我最初的思路，经过AI完善逻辑后的代码：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">hIndex</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> citations</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> citationsSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> maxH </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 尝试每个可能的h值（从0到citationsSize）</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> h </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> h </span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token plain"> citationsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> h</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> count </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 计算引用次数&gt;=h的论文数量</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> citationsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">citations</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> h</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                count</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 如果引用次数&gt;=h的论文数量&gt;=h，则h是一个有效值</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">count </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> h</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">h </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> maxH</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                maxH </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> h</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> maxH</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="对h指数计算算法的理解">对H指数计算算法的理解<a href="https://www.eurekashadow.xin/blog/LeetCode274#%E5%AF%B9h%E6%8C%87%E6%95%B0%E8%AE%A1%E7%AE%97%E7%AE%97%E6%B3%95%E7%9A%84%E7%90%86%E8%A7%A3" class="hash-link" aria-label="对H指数计算算法的理解的直接链接" title="对H指数计算算法的理解的直接链接">​</a></h3><p><strong>算法核心思路</strong></p><ul>
<li>
<p><strong>H指数定义</strong>：有h篇论文至少被引用h次，其余论文引用次数不超过h次</p>
</li>
<li>
<p><strong>关键观察</strong>：H指数的取值范围是[0, n]，其中n是论文总数</p>
</li>
</ul><p><strong>算法步骤解析</strong></p><p><strong>1.构建计数数组</strong></p><ul>
<li>
<p>创建长度为 n+1 的数组 count</p>
</li>
<li>
<p>count[i] 表示引用次数恰好为 i 的论文数量</p>
</li>
<li>
<p>对于引用次数超过 n 的论文，统一计入 count[n]</p>
</li>
</ul><p><strong>2.统计引用次数分布</strong></p><ul>
<li>
<p>遍历 citations 数组</p>
</li>
<li>
<p>对每个引用次数进行计数统计</p>
</li>
</ul><p><strong>3.计算H指数</strong></p><ul>
<li>
<p>从后向前遍历 count 数组</p>
</li>
<li>
<p>累计引用次数≥当前下标的文章数量</p>
</li>
<li>
<p>当累计数量≥当前下标时，该下标即为H指数</p>
</li>
</ul></div></div></details>]]></content:encoded>
            <category>数组</category>
        </item>
        <item>
            <title><![CDATA[算法总结]]></title>
            <link>https://www.eurekashadow.xin/blog/Algorithm</link>
            <guid>https://www.eurekashadow.xin/blog/Algorithm</guid>
            <pubDate>Sun, 03 Aug 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[记录做力扣面试经典150过程中遇到的算法🤔]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="记录做力扣面试经典150过程中遇到的算法"><span class="B2_JnYG">记录做力扣面试经典150过程中遇到的算法🤔</span><a href="https://www.eurekashadow.xin/blog/Algorithm#%E8%AE%B0%E5%BD%95%E5%81%9A%E5%8A%9B%E6%89%A3%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B8150%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E7%AE%97%E6%B3%95" class="hash-link" aria-label="记录做力扣面试经典150过程中遇到的算法的直接链接" title="记录做力扣面试经典150过程中遇到的算法的直接链接">​</a></h3>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="贪心算法">贪心算法<a href="https://www.eurekashadow.xin/blog/Algorithm#%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95" class="hash-link" aria-label="贪心算法的直接链接" title="贪心算法的直接链接">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-识别贪心算法适用场景的技巧">🎯 识别贪心算法适用场景的技巧<a href="https://www.eurekashadow.xin/blog/Algorithm#-%E8%AF%86%E5%88%AB%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%E9%80%82%E7%94%A8%E5%9C%BA%E6%99%AF%E7%9A%84%E6%8A%80%E5%B7%A7" class="hash-link" aria-label="🎯 识别贪心算法适用场景的技巧的直接链接" title="🎯 识别贪心算法适用场景的技巧的直接链接">​</a></h3>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="1-问题特征识别">1. 问题特征识别<a href="https://www.eurekashadow.xin/blog/Algorithm#1-%E9%97%AE%E9%A2%98%E7%89%B9%E5%BE%81%E8%AF%86%E5%88%AB" class="hash-link" aria-label="1. 问题特征识别的直接链接" title="1. 问题特征识别的直接链接">​</a></h4>
<p>以下特征通常表明可以使用贪心算法：</p>
<p>✅ <strong>最优子结构</strong>：问题的最优解包含子问题的最优解
✅ <strong>贪心选择性质</strong>：局部最优选择能导致全局最优
✅ <strong>无后效性</strong>：当前选择不会影响之前的状态
✅ <strong>求极值问题</strong>：最大值、最小值、最优解等</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="2-常见问题类型">2. 常见问题类型<a href="https://www.eurekashadow.xin/blog/Algorithm#2-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E7%B1%BB%E5%9E%8B" class="hash-link" aria-label="2. 常见问题类型的直接链接" title="2. 常见问题类型的直接链接">​</a></h4>
<p>以下类型问题经常使用贪心策略：</p>
<p>🔢 <strong>选择问题</strong>：活动选择、区间调度
💰 <strong>优化问题</strong>：背包问题变种、股票买卖
🗺️ <strong>图论问题</strong>：最小生成树、最短路径
📊 <strong>数据处理</strong>：哈夫曼编码、任务调度
🎯 <strong>游戏策略</strong>：跳跃游戏、分配问题</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-如何快速判断的技巧">🎯 如何快速判断的技巧<a href="https://www.eurekashadow.xin/blog/Algorithm#-%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%88%A4%E6%96%AD%E7%9A%84%E6%8A%80%E5%B7%A7" class="hash-link" aria-label="🎯 如何快速判断的技巧的直接链接" title="🎯 如何快速判断的技巧的直接链接">​</a></h3>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="技巧1问自己几个关键问题">技巧1：问自己几个关键问题<a href="https://www.eurekashadow.xin/blog/Algorithm#%E6%8A%80%E5%B7%A71%E9%97%AE%E8%87%AA%E5%B7%B1%E5%87%A0%E4%B8%AA%E5%85%B3%E9%94%AE%E9%97%AE%E9%A2%98" class="hash-link" aria-label="技巧1：问自己几个关键问题的直接链接" title="技巧1：问自己几个关键问题的直接链接">​</a></h4>
<ol>
<li>是否可以通过一系列局部选择得到全局最优解？</li>
<li>当前的最优选择是否会影响后续的决策空间？</li>
<li>如果每步都选当前最好的，最终结果是否最优？</li>
<li>是否存在反例能证明贪心不成立？</li>
</ol>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="技巧2看问题的关键词">技巧2：看问题的关键词<a href="https://www.eurekashadow.xin/blog/Algorithm#%E6%8A%80%E5%B7%A72%E7%9C%8B%E9%97%AE%E9%A2%98%E7%9A%84%E5%85%B3%E9%94%AE%E8%AF%8D" class="hash-link" aria-label="技巧2：看问题的关键词的直接链接" title="技巧2：看问题的关键词的直接链接">​</a></h4>
<p>出现这些关键词时考虑贪心：</p>
<ul>
<li>"最大"、"最小"、"最优"</li>
<li>"尽可能"、"最多"、"最少"</li>
<li>"安排"、"调度"、"分配"</li>
<li>"使得总...最大/最小"</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-如何设计贪心策略">🎯 如何设计贪心策略<a href="https://www.eurekashadow.xin/blog/Algorithm#-%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E8%B4%AA%E5%BF%83%E7%AD%96%E7%95%A5" class="hash-link" aria-label="🎯 如何设计贪心策略的直接链接" title="🎯 如何设计贪心策略的直接链接">​</a></h3>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="1-确定贪心选择标准">1. 确定贪心选择标准<a href="https://www.eurekashadow.xin/blog/Algorithm#1-%E7%A1%AE%E5%AE%9A%E8%B4%AA%E5%BF%83%E9%80%89%E6%8B%A9%E6%A0%87%E5%87%86" class="hash-link" aria-label="1. 确定贪心选择标准的直接链接" title="1. 确定贪心选择标准的直接链接">​</a></h4>
<p>关键步骤：</p>
<ol>
<li>明确每一步要做出什么选择</li>
<li>确定衡量"好"选择的标准</li>
<li>证明这个选择标准的正确性</li>
</ol>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="2-举例分析">2. 举例分析<a href="https://www.eurekashadow.xin/blog/Algorithm#2-%E4%B8%BE%E4%BE%8B%E5%88%86%E6%9E%90" class="hash-link" aria-label="2. 举例分析的直接链接" title="2. 举例分析的直接链接">​</a></h4>
<p><strong>股票买卖问题分析：</strong></p>
<ul>
<li>问题：如何获得最大利润？</li>
<li>贪心选择：只要明天比今天贵，今天就买入明天卖出</li>
<li>选择标准：价格正增长就交易</li>
<li>正确性：所有正收益都 captured，负收益都避免</li>
</ul>
<p><strong>跳跃游戏问题分析：</strong></p>
<ul>
<li>问题：能否到达终点？</li>
<li>贪心选择：每到一个位置，尽可能扩展可达范围</li>
<li>选择标准：选择能让maxReach最大的策略</li>
<li>正确性：最大可达范围决定了能否到达终点</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-实战判断流程">🎯 实战判断流程<a href="https://www.eurekashadow.xin/blog/Algorithm#-%E5%AE%9E%E6%88%98%E5%88%A4%E6%96%AD%E6%B5%81%E7%A8%8B" class="hash-link" aria-label="🎯 实战判断流程的直接链接" title="🎯 实战判断流程的直接链接">​</a></h3>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="三步判断法">三步判断法：<a href="https://www.eurekashadow.xin/blog/Algorithm#%E4%B8%89%E6%AD%A5%E5%88%A4%E6%96%AD%E6%B3%95" class="hash-link" aria-label="三步判断法：的直接链接" title="三步判断法：的直接链接">​</a></h4>
<p>Step 1: 问题分析</p>
<ul>
<li>这是一个优化问题吗？(求最大/最小值)</li>
<li>是否可以分解为一系列选择？</li>
</ul>
<p>Step 2: 贪心假设</p>
<ul>
<li>能否通过局部最优选择得到全局最优？</li>
<li>假设贪心策略，能否构造反例？</li>
</ul>
<p>Step 3: 策略设计</p>
<ul>
<li>明确每步的贪心选择是什么</li>
<li>确定如何衡量选择的好坏</li>
<li>验证算法正确性</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-常见贪心策略模板">🎯 常见贪心策略模板<a href="https://www.eurekashadow.xin/blog/Algorithm#-%E5%B8%B8%E8%A7%81%E8%B4%AA%E5%BF%83%E7%AD%96%E7%95%A5%E6%A8%A1%E6%9D%BF" class="hash-link" aria-label="🎯 常见贪心策略模板的直接链接" title="🎯 常见贪心策略模板的直接链接">​</a></h3>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="1-选择类问题">1. 选择类问题<a href="https://www.eurekashadow.xin/blog/Algorithm#1-%E9%80%89%E6%8B%A9%E7%B1%BB%E9%97%AE%E9%A2%98" class="hash-link" aria-label="1. 选择类问题的直接链接" title="1. 选择类问题的直接链接">​</a></h4>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// 模板：按某种标准排序后贪心选择</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">sort</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">elements</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> compare_function</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 首先按某种标准排序</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">each element</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">               </span><span class="token comment" style="color:#999988;font-style:italic">// 遍历每个元素</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">can_select</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">element</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">// 如果可以选择当前元素</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">select</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">element</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">           </span><span class="token comment" style="color:#999988;font-style:italic">// 就选择它</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="2-扩展类问题">2. 扩展类问题<a href="https://www.eurekashadow.xin/blog/Algorithm#2-%E6%89%A9%E5%B1%95%E7%B1%BB%E9%97%AE%E9%A2%98" class="hash-link" aria-label="2. 扩展类问题的直接链接" title="2. 扩展类问题的直接链接">​</a></h4>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// 模板：逐步扩展最优解</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">each step</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">                           </span><span class="token comment" style="color:#999988;font-style:italic">// 遍历每个决策步骤</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    best_choice </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">find_best_local_choice</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 在当前步骤中找到局部最优选择</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">is_better</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">best_choice</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">           </span><span class="token comment" style="color:#999988;font-style:italic">// 如果这个选择比当前解更好</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">update_solution</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">best_choice</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">       </span><span class="token comment" style="color:#999988;font-style:italic">// 就用这个选择更新当前最优解</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="3-累积类问题">3. 累积类问题<a href="https://www.eurekashadow.xin/blog/Algorithm#3-%E7%B4%AF%E7%A7%AF%E7%B1%BB%E9%97%AE%E9%A2%98" class="hash-link" aria-label="3. 累积类问题的直接链接" title="3. 累积类问题的直接链接">​</a></h4>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// 模板：累积局部最优解</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">total_result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">                    </span><span class="token comment" style="color:#999988;font-style:italic">// 初始化总结果为0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">each sub_problem</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">             </span><span class="token comment" style="color:#999988;font-style:italic">// 遍历每个子问题</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    local_optimal </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">solve_locally</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 求解当前子问题的局部最优解</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    total_result </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> local_optimal</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">   </span><span class="token comment" style="color:#999988;font-style:italic">// 将局部最优解累加到总结果中</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-实用建议">💡 实用建议<a href="https://www.eurekashadow.xin/blog/Algorithm#-%E5%AE%9E%E7%94%A8%E5%BB%BA%E8%AE%AE" class="hash-link" aria-label="💡 实用建议的直接链接" title="💡 实用建议的直接链接">​</a></h3>
<ul>
<li>多练习经典贪心问题：活动选择、背包问题、霍夫曼编码等</li>
<li>学会构造反例：如果想不出反例证明贪心成立</li>
<li>关注边界条件：贪心算法常在边界处出错</li>
<li>证明贪心选择性质：虽然面试不要求严格证明，但思路要清晰</li>
</ul>
<p>记住：贪心算法的关键在于识别问题的贪心性质和设计正确的贪心策略，这需要大量的练习和经验积累。</p>
<hr>]]></content:encoded>
            <category>算法</category>
        </item>
        <item>
            <title><![CDATA[英语小结]]></title>
            <link>https://www.eurekashadow.xin/blog/LearnEng</link>
            <guid>https://www.eurekashadow.xin/blog/LearnEng</guid>
            <pubDate>Sun, 03 Aug 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[记录学习英语中遇到的令人感到疑惑的表达方法🤔]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="记录学习英语中遇到的令人感到疑惑的表达方法"><span class="B2_JnYG">记录学习英语中遇到的令人感到疑惑的表达方法🤔</span><a href="https://www.eurekashadow.xin/blog/LearnEng#%E8%AE%B0%E5%BD%95%E5%AD%A6%E4%B9%A0%E8%8B%B1%E8%AF%AD%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E4%BB%A4%E4%BA%BA%E6%84%9F%E5%88%B0%E7%96%91%E6%83%91%E7%9A%84%E8%A1%A8%E8%BE%BE%E6%96%B9%E6%B3%95" class="hash-link" aria-label="记录学习英语中遇到的令人感到疑惑的表达方法的直接链接" title="记录学习英语中遇到的令人感到疑惑的表达方法的直接链接">​</a></h3>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="put-ones-foot-down"><strong>"Put one's foot down"</strong><a href="https://www.eurekashadow.xin/blog/LearnEng#put-ones-foot-down" class="hash-link" aria-label="put-ones-foot-down的直接链接" title="put-ones-foot-down的直接链接">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="含义"><strong>含义</strong><a href="https://www.eurekashadow.xin/blog/LearnEng#%E5%90%AB%E4%B9%89" class="hash-link" aria-label="含义的直接链接" title="含义的直接链接">​</a></h3>
<ul>
<li><strong>核心意义</strong>：坚决反对某事或制止某种行为，态度强硬不容妥协。</li>
<li><strong>隐含权威</strong>：通常由家长、上司、负责人等具有决策权的人使用。</li>
<li><strong>情感色彩</strong>：可能带有“后悔未早制止”（过去时）或“现在必须阻止”（现在时）的意味。</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="使用实例"><strong>使用实例</strong><a href="https://www.eurekashadow.xin/blog/LearnEng#%E4%BD%BF%E7%94%A8%E5%AE%9E%E4%BE%8B" class="hash-link" aria-label="使用实例的直接链接" title="使用实例的直接链接">​</a></h3>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-制止不当行为">1. <strong>制止不当行为</strong><a href="https://www.eurekashadow.xin/blog/LearnEng#1-%E5%88%B6%E6%AD%A2%E4%B8%8D%E5%BD%93%E8%A1%8C%E4%B8%BA" class="hash-link" aria-label="1-制止不当行为的直接链接" title="1-制止不当行为的直接链接">​</a></h3>
<ul>
<li><em>The teacher <strong>put her foot down</strong> when students tried to cheat on the exam.</em><br>
<!-- -->（学生试图作弊时，老师坚决制止。）</li>
<li><em>I had to <strong>put my foot down</strong> when my roommate kept borrowing my clothes without asking.</em><br>
<!-- -->（室友未经允许一直借我衣服，我不得不明确拒绝。）</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="2-维护规则或底线">2. <strong>维护规则或底线</strong><a href="https://www.eurekashadow.xin/blog/LearnEng#2-%E7%BB%B4%E6%8A%A4%E8%A7%84%E5%88%99%E6%88%96%E5%BA%95%E7%BA%BF" class="hash-link" aria-label="2-维护规则或底线的直接链接" title="2-维护规则或底线的直接链接">​</a></h3>
<ul>
<li><em>The CEO <strong>put his foot down</strong> and banned all overtime work.</em><br>
<!-- -->（CEO 强硬禁止所有加班。）</li>
<li><em>Mom <strong>put her foot down</strong>: no video games until homework is done.</em><br>
<!-- -->（妈妈立下规矩：作业做完前不准打游戏。）</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="3-表达后悔">3. <strong>表达后悔</strong><a href="https://www.eurekashadow.xin/blog/LearnEng#3-%E8%A1%A8%E8%BE%BE%E5%90%8E%E6%82%94" class="hash-link" aria-label="3-表达后悔的直接链接" title="3-表达后悔的直接链接">​</a></h3>
<ul>
<li><em>I <strong>should have put my foot down</strong> when they suggested cutting corners.</em><br>
<!-- -->（他们提议偷工减料时，我本该坚决反对的。）</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="常见场景"><strong>常见场景</strong><a href="https://www.eurekashadow.xin/blog/LearnEng#%E5%B8%B8%E8%A7%81%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="常见场景的直接链接" title="常见场景的直接链接">​</a></h3>
<ul>
<li><strong>家庭场景</strong>：父母管教孩子。</li>
<li><strong>职场场景</strong>：上司制止违规行为。</li>
<li><strong>人际关系</strong>：拒绝他人越界请求。</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="助记技巧"><strong>助记技巧</strong><a href="https://www.eurekashadow.xin/blog/LearnEng#%E5%8A%A9%E8%AE%B0%E6%8A%80%E5%B7%A7" class="hash-link" aria-label="助记技巧的直接链接" title="助记技巧的直接链接">​</a></h3>
<ol>
<li><strong>动作联想</strong>：想象用力踩下刹车（"put foot down"）→ <strong>强行停止</strong>某事。</li>
<li><strong>对比习语</strong>：<!-- -->
<ul>
<li>✅ <strong>"Put one's foot down"</strong> = 制止（反对）。</li>
<li>❌ <strong>"Stand one's ground"</strong> = 坚持立场（不一定是制止）。</li>
</ul>
</li>
<li><strong>中文对应</strong>：类似“拍板叫停”或“亮明底线”。</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-注意事项"><strong>⚠️ 注意事项</strong><a href="https://www.eurekashadow.xin/blog/LearnEng#%EF%B8%8F-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="️-注意事项的直接链接" title="️-注意事项的直接链接">​</a></h3>
<ul>
<li><strong>不用于支持</strong>：仅表示“反对/制止”，不可替换为支持性语境。</li>
<li><strong>语气强硬</strong>：需根据关系谨慎使用，避免显得专横。</li>
</ul>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="throw-someone-under-the-bus"><strong>"Throw someone under the bus"</strong><a href="https://www.eurekashadow.xin/blog/LearnEng#throw-someone-under-the-bus" class="hash-link" aria-label="throw-someone-under-the-bus的直接链接" title="throw-someone-under-the-bus的直接链接">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="含义-1"><strong>含义</strong><a href="https://www.eurekashadow.xin/blog/LearnEng#%E5%90%AB%E4%B9%89-1" class="hash-link" aria-label="含义-1的直接链接" title="含义-1的直接链接">​</a></h3>
<ul>
<li><strong>核心意义</strong>：为了自身利益牺牲或背叛他人，通常是在关键时刻推卸责任或出卖同伴</li>
<li><strong>隐含意味</strong>：带有背叛、不忠诚、自私自利的负面含义</li>
<li><strong>使用场景</strong>：多用于政治、职场或团队合作中描述背叛行为</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="使用实例-1"><strong>使用实例</strong><a href="https://www.eurekashadow.xin/blog/LearnEng#%E4%BD%BF%E7%94%A8%E5%AE%9E%E4%BE%8B-1" class="hash-link" aria-label="使用实例-1的直接链接" title="使用实例-1的直接链接">​</a></h3>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-职场背叛">1. <strong>职场背叛</strong><a href="https://www.eurekashadow.xin/blog/LearnEng#1-%E8%81%8C%E5%9C%BA%E8%83%8C%E5%8F%9B" class="hash-link" aria-label="1-职场背叛的直接链接" title="1-职场背叛的直接链接">​</a></h3>
<ul>
<li><em>The manager threw his assistant under the bus when the project failed.</em>
（项目失败时，经理把责任都推给了助理）</li>
<li><em>Don't trust him - he'll throw you under the bus to save his own job.</em>
（别相信他，他会为了保住自己的工作而出卖你）</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="2-政治场合">2. <strong>政治场合</strong><a href="https://www.eurekashadow.xin/blog/LearnEng#2-%E6%94%BF%E6%B2%BB%E5%9C%BA%E5%90%88" class="hash-link" aria-label="2-政治场合的直接链接" title="2-政治场合的直接链接">​</a></h3>
<ul>
<li><em>The senator threw his colleague under the bus to distance himself from the scandal.</em>
（参议员为了与丑闻撇清关系而出卖了他的同事）</li>
<li><em>In the debate, the candidate kept trying to throw her opponent under the bus.</em>
（辩论中，候选人不断试图把责任推给对手）</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="3-日常人际关系">3. <strong>日常人际关系</strong><a href="https://www.eurekashadow.xin/blog/LearnEng#3-%E6%97%A5%E5%B8%B8%E4%BA%BA%E9%99%85%E5%85%B3%E7%B3%BB" class="hash-link" aria-label="3-日常人际关系的直接链接" title="3-日常人际关系的直接链接">​</a></h3>
<ul>
<li><em>I thought we were friends, but she threw me under the bus when the teacher asked who broke the window.</em>
（我以为我们是朋友，但老师问谁打破窗户时她出卖了我）</li>
<li><em>Real friends don't throw each other under the bus when things go wrong.</em>
（真正的朋友不会在出问题时互相出卖）</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="常见场景-1"><strong>常见场景</strong><a href="https://www.eurekashadow.xin/blog/LearnEng#%E5%B8%B8%E8%A7%81%E5%9C%BA%E6%99%AF-1" class="hash-link" aria-label="常见场景-1的直接链接" title="常见场景-1的直接链接">​</a></h3>
<ul>
<li><strong>职场竞争</strong>：推卸责任，嫁祸同事</li>
<li><strong>政治斗争</strong>：牺牲盟友保全自己</li>
<li><strong>团队合作</strong>：关键时刻背叛队友</li>
<li><strong>朋友关系</strong>：为自保而出卖朋友</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="助记技巧-1"><strong>助记技巧</strong><a href="https://www.eurekashadow.xin/blog/LearnEng#%E5%8A%A9%E8%AE%B0%E6%8A%80%E5%B7%A7-1" class="hash-link" aria-label="助记技巧-1的直接链接" title="助记技巧-1的直接链接">​</a></h3>
<ol>
<li><strong>形象联想</strong>：想象把别人推到行驶的公交车下→极端自私的背叛行为</li>
<li><strong>对比习语</strong>：<!-- -->
<ul>
<li>✅ "Throw someone under the bus" = 为自保而背叛</li>
<li>❌ "Pass the buck" = 推卸责任（不一定涉及背叛）</li>
</ul>
</li>
<li><strong>中文对应</strong>：类似"过河拆桥"、"出卖"、"甩锅"</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-注意事项-1"><strong>⚠️ 注意事项</strong><a href="https://www.eurekashadow.xin/blog/LearnEng#%EF%B8%8F-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9-1" class="hash-link" aria-label="️-注意事项-1的直接链接" title="️-注意事项-1的直接链接">​</a></h3>
<ul>
<li><strong>强烈贬义</strong>：使用时通常带有强烈谴责意味</li>
<li><strong>程度严重</strong>：比一般的推卸责任更恶劣，涉及主动背叛</li>
<li><strong>常见变体</strong>：<!-- -->
<ul>
<li>"Throw [某人] under the bus"（具体对象）</li>
<li>"Get thrown under the bus"（被背叛的被动形式）</li>
</ul>
</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="延伸学习"><strong>延伸学习</strong><a href="https://www.eurekashadow.xin/blog/LearnEng#%E5%BB%B6%E4%BC%B8%E5%AD%A6%E4%B9%A0" class="hash-link" aria-label="延伸学习的直接链接" title="延伸学习的直接链接">​</a></h3>
<ul>
<li><strong>同义表达</strong>：<!-- -->
<ul>
<li>"Stab someone in the back"（背后捅刀）</li>
<li>"Sell someone out"（出卖）</li>
</ul>
</li>
<li><strong>反义表达</strong>：<!-- -->
<ul>
<li>"Have someone's back"（支持某人）</li>
<li>"Stand by someone"（力挺某人）</li>
</ul>
</li>
</ul>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="gaslight-someone"><strong>"Gaslight someone"</strong><a href="https://www.eurekashadow.xin/blog/LearnEng#gaslight-someone" class="hash-link" aria-label="gaslight-someone的直接链接" title="gaslight-someone的直接链接">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="含义-2"><strong>含义</strong><a href="https://www.eurekashadow.xin/blog/LearnEng#%E5%90%AB%E4%B9%89-2" class="hash-link" aria-label="含义-2的直接链接" title="含义-2的直接链接">​</a></h3>
<ul>
<li><strong>核心意义</strong>：通过心理操纵使某人质疑自己的记忆、感知或理智</li>
<li><strong>词源背景</strong>：源自1944年电影《煤气灯下》(Gaslight)，片中丈夫通过操纵煤气灯光使妻子怀疑自己</li>
<li><strong>心理影响</strong>：属于情感虐待的一种形式，会导致受害者产生自我怀疑</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="使用实例-2"><strong>使用实例</strong><a href="https://www.eurekashadow.xin/blog/LearnEng#%E4%BD%BF%E7%94%A8%E5%AE%9E%E4%BE%8B-2" class="hash-link" aria-label="使用实例-2的直接链接" title="使用实例-2的直接链接">​</a></h3>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-情感操控">1. <strong>情感操控</strong><a href="https://www.eurekashadow.xin/blog/LearnEng#1-%E6%83%85%E6%84%9F%E6%93%8D%E6%8E%A7" class="hash-link" aria-label="1-情感操控的直接链接" title="1-情感操控的直接链接">​</a></h3>
<ul>
<li><em>He kept gaslighting me by denying things he had clearly said before.</em>
（他通过否认自己说过的话来操控我）</li>
<li><em>Don't let him gaslight you into thinking you're overreacting.</em>
（别让他操控你觉得是你反应过度）</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="2-职场pua">2. <strong>职场PUA</strong><a href="https://www.eurekashadow.xin/blog/LearnEng#2-%E8%81%8C%E5%9C%BApua" class="hash-link" aria-label="2-职场pua的直接链接" title="2-职场pua的直接链接">​</a></h3>
<ul>
<li><em>My boss gaslights the team by constantly changing deadlines and then claiming we misunderstood.</em>
（老板通过不断改变截止日期然后说是我们理解错误来操控团队）</li>
<li><em>That's classic gaslighting - first she gives unclear instructions, then blames us for not following them.</em>
（典型的心理操控 - 她先给出模糊指示，然后责怪我们没有遵守）</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="3-家庭关系">3. <strong>家庭关系</strong><a href="https://www.eurekashadow.xin/blog/LearnEng#3-%E5%AE%B6%E5%BA%AD%E5%85%B3%E7%B3%BB" class="hash-link" aria-label="3-家庭关系的直接链接" title="3-家庭关系的直接链接">​</a></h3>
<ul>
<li><em>Growing up with a gaslighting parent made me doubt my own judgment.</em>
（在有操控欲的父母身边长大让我怀疑自己的判断力）</li>
<li><em>She realized her partner had been gaslighting her when she started keeping records of their conversations.</em>
（当她开始记录他们的对话时，才意识到伴侣一直在操控她）</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="常见场景-2"><strong>常见场景</strong><a href="https://www.eurekashadow.xin/blog/LearnEng#%E5%B8%B8%E8%A7%81%E5%9C%BA%E6%99%AF-2" class="hash-link" aria-label="常见场景-2的直接链接" title="常见场景-2的直接链接">​</a></h3>
<ul>
<li><strong>亲密关系</strong>：伴侣间的心理操控</li>
<li><strong>职场环境</strong>：上司对下属的精神控制</li>
<li><strong>家庭关系</strong>：父母对子女的情感虐待</li>
<li><strong>政治宣传</strong>：通过虚假信息操控公众认知</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="助记技巧-2"><strong>助记技巧</strong><a href="https://www.eurekashadow.xin/blog/LearnEng#%E5%8A%A9%E8%AE%B0%E6%8A%80%E5%B7%A7-2" class="hash-link" aria-label="助记技巧-2的直接链接" title="助记技巧-2的直接链接">​</a></h3>
<ol>
<li><strong>电影联想</strong>：记住源自《煤气灯下》电影情节</li>
<li><strong>行为特征</strong>：<!-- -->
<ul>
<li>否认事实</li>
<li>扭曲现实</li>
<li>制造困惑</li>
</ul>
</li>
<li><strong>中文对应</strong>：类似"心理操控"、"精神控制"、"洗脑"</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-注意事项-2"><strong>⚠️ 注意事项</strong><a href="https://www.eurekashadow.xin/blog/LearnEng#%EF%B8%8F-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9-2" class="hash-link" aria-label="️-注意事项-2的直接链接" title="️-注意事项-2的直接链接">​</a></h3>
<ul>
<li><strong>严重性</strong>：属于心理虐待，比简单的说谎更恶劣</li>
<li><strong>渐进过程</strong>：通常是长期、渐进的行为模式</li>
<li><strong>受害者表现</strong>：<!-- -->
<ul>
<li>经常道歉</li>
<li>过度自我怀疑</li>
<li>需要反复确认自己的记忆</li>
</ul>
</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="延伸学习-1"><strong>延伸学习</strong><a href="https://www.eurekashadow.xin/blog/LearnEng#%E5%BB%B6%E4%BC%B8%E5%AD%A6%E4%B9%A0-1" class="hash-link" aria-label="延伸学习-1的直接链接" title="延伸学习-1的直接链接">​</a></h3>
<ul>
<li><strong>相关概念</strong>：<!-- -->
<ul>
<li>"Emotional abuse"（情感虐待）</li>
<li>"Psychological manipulation"（心理操纵）</li>
</ul>
</li>
<li><strong>应对方式</strong>：<!-- -->
<ul>
<li>"Keep a paper trail"（保留书面记录）</li>
<li>"Trust your gut"（相信自己的直觉）</li>
<li>"Seek external validation"（寻求外部确认）</li>
</ul>
</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="辨别特征"><strong>辨别特征</strong><a href="https://www.eurekashadow.xin/blog/LearnEng#%E8%BE%A8%E5%88%AB%E7%89%B9%E5%BE%81" class="hash-link" aria-label="辨别特征的直接链接" title="辨别特征的直接链接">​</a></h3>
<ol>
<li>否认明明发生过的事情</li>
<li>将问题归咎于你的"错误记忆"</li>
<li>让你觉得自己总是反应过度</li>
<li>通过小事逐渐瓦解你的自信</li>
</ol>
<hr>]]></content:encoded>
            <category>English</category>
        </item>
        <item>
            <title><![CDATA[力扣做题总结模板]]></title>
            <link>https://www.eurekashadow.xin/blog/LeetCodeExample</link>
            <guid>https://www.eurekashadow.xin/blog/LeetCodeExample</guid>
            <pubDate>Sun, 03 Aug 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[力扣面试经典——X题]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="力扣面试经典x题"><span class="B2_JnYG"><a href="https://leetcode.cn/studyplan/top-interview-150/" target="_blank" rel="noopener noreferrer" title="力扣">力扣面试经典——X题</a></span><a href="https://www.eurekashadow.xin/blog/LeetCodeExample#%E5%8A%9B%E6%89%A3%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B8x%E9%A2%98" class="hash-link" aria-label="力扣面试经典x题的直接链接" title="力扣面试经典x题的直接链接">​</a></h3>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-参考代码">💡 参考代码：<a href="https://www.eurekashadow.xin/blog/LeetCodeExample#-%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81" class="hash-link" aria-label="💡 参考代码：的直接链接" title="💡 参考代码：的直接链接">​</a></h3>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">code</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-总结">📖 总结：<a href="https://www.eurekashadow.xin/blog/LeetCodeExample#-%E6%80%BB%E7%BB%93" class="hash-link" aria-label="📖 总结：的直接链接" title="📖 总结：的直接链接">​</a></h3>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>点击展开题目总结</summary><div><div class="collapsibleContent_i85q"><h1>🤔 [题目名称]</h1><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1️⃣-题目核心信息">1️⃣ 题目核心信息<a href="https://www.eurekashadow.xin/blog/LeetCodeExample#1%EF%B8%8F%E2%83%A3-%E9%A2%98%E7%9B%AE%E6%A0%B8%E5%BF%83%E4%BF%A1%E6%81%AF" class="hash-link" aria-label="1️⃣ 题目核心信息的直接链接" title="1️⃣ 题目核心信息的直接链接">​</a></h2><p>🎯 <strong>功能描述</strong>：[简要描述题目要解决的核心问题]</p><p>📥 <strong>输入输出</strong>：</p><ul>
<li><strong>输入</strong>：[列出主要输入参数及其含义]</li>
<li><strong>输出</strong>：[描述函数返回值及副作用]</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2️⃣-实现原理">2️⃣ 实现原理<a href="https://www.eurekashadow.xin/blog/LeetCodeExample#2%EF%B8%8F%E2%83%A3-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86" class="hash-link" aria-label="2️⃣ 实现原理的直接链接" title="2️⃣ 实现原理的直接链接">​</a></h2><p>💡 <strong>核心思路</strong>：[概括解决该问题的主要算法思想]</p><p>📋 <strong>实现步骤</strong>：</p><ol>
<li>[步骤1]</li>
<li>[步骤2]</li>
<li>[步骤3]</li>
<li>[步骤4]</li>
</ol><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3️⃣-关键点解析">3️⃣ 关键点解析<a href="https://www.eurekashadow.xin/blog/LeetCodeExample#3%EF%B8%8F%E2%83%A3-%E5%85%B3%E9%94%AE%E7%82%B9%E8%A7%A3%E6%9E%90" class="hash-link" aria-label="3️⃣ 关键点解析的直接链接" title="3️⃣ 关键点解析的直接链接">​</a></h2><p>给出原始做题思路并比较与最优解区别（可选）</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-代码技巧">🎯 代码技巧<a href="https://www.eurekashadow.xin/blog/LeetCodeExample#-%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7" class="hash-link" aria-label="🎯 代码技巧的直接链接" title="🎯 代码技巧的直接链接">​</a></h3><ul>
<li>[技巧1]</li>
<li>[技巧2]</li>
<li>[技巧3]</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4️⃣-使用场景">4️⃣ 使用场景<a href="https://www.eurekashadow.xin/blog/LeetCodeExample#4%EF%B8%8F%E2%83%A3-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="4️⃣ 使用场景的直接链接" title="4️⃣ 使用场景的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-适用情况">✅ 适用情况：<a href="https://www.eurekashadow.xin/blog/LeetCodeExample#-%E9%80%82%E7%94%A8%E6%83%85%E5%86%B5" class="hash-link" aria-label="✅ 适用情况：的直接链接" title="✅ 适用情况：的直接链接">​</a></h3><ul>
<li>[场景1]</li>
<li>[场景2]</li>
<li>[场景3]</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-前提条件">⚠️ 前提条件：<a href="https://www.eurekashadow.xin/blog/LeetCodeExample#%EF%B8%8F-%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6" class="hash-link" aria-label="⚠️ 前提条件：的直接链接" title="⚠️ 前提条件：的直接链接">​</a></h3><ul>
<li>[条件1]</li>
<li>[条件2]</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5️⃣-复杂度分析">5️⃣ 复杂度分析<a href="https://www.eurekashadow.xin/blog/LeetCodeExample#5%EF%B8%8F%E2%83%A3-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90" class="hash-link" aria-label="5️⃣ 复杂度分析的直接链接" title="5️⃣ 复杂度分析的直接链接">​</a></h2><ul>
<li>
<p>⏱️ 时间复杂度：[时间复杂度分析]</p>
</li>
<li>
<p>💾 空间复杂度：[空间复杂度分析]</p>
</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6️⃣-注意事项">6️⃣ 注意事项<a href="https://www.eurekashadow.xin/blog/LeetCodeExample#6%EF%B8%8F%E2%83%A3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="6️⃣ 注意事项的直接链接" title="6️⃣ 注意事项的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-边界情况">🚩 边界情况：<a href="https://www.eurekashadow.xin/blog/LeetCodeExample#-%E8%BE%B9%E7%95%8C%E6%83%85%E5%86%B5" class="hash-link" aria-label="🚩 边界情况：的直接链接" title="🚩 边界情况：的直接链接">​</a></h3><ul>
<li>[边界情况1]</li>
<li>[边界情况2]</li>
<li>[边界情况3]</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-易错点">💥 易错点：<a href="https://www.eurekashadow.xin/blog/LeetCodeExample#-%E6%98%93%E9%94%99%E7%82%B9" class="hash-link" aria-label="💥 易错点：的直接链接" title="💥 易错点：的直接链接">​</a></h3><ul>
<li>[易错点1]</li>
<li>[易错点2]</li>
<li>[易错点3]</li>
</ul></div></div></details>]]></content:encoded>
            <category>数组</category>
        </item>
        <item>
            <title><![CDATA[跳跃游戏II]]></title>
            <link>https://www.eurekashadow.xin/blog/LeetCode45</link>
            <guid>https://www.eurekashadow.xin/blog/LeetCode45</guid>
            <pubDate>Sun, 03 Aug 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[力扣面试经典——45题]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="力扣面试经典45题"><span class="B2_JnYG"><a href="https://leetcode.cn/problems/jump-game-ii/description/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer" title="力扣">力扣面试经典——45题</a></span><a href="https://www.eurekashadow.xin/blog/LeetCode45#%E5%8A%9B%E6%89%A3%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B845%E9%A2%98" class="hash-link" aria-label="力扣面试经典45题的直接链接" title="力扣面试经典45题的直接链接">​</a></h3>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-参考代码">💡 参考代码：<a href="https://www.eurekashadow.xin/blog/LeetCode45#-%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81" class="hash-link" aria-label="💡 参考代码：的直接链接" title="💡 参考代码：的直接链接">​</a></h3>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 计算跳跃游戏的最小跳跃次数</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 此函数只关心最小跳跃次数，而不关心真实的跳跃路径</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param nums 非负整数数组，每个元素代表在该位置可以跳跃的最大长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param numsSize 数组长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 到达最后一个下标的最小跳跃次数</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">jump</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 边界情况：数组长度小于等于1，不需要跳跃</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">numsSize </span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> jumps </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// 记录跳跃次数</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> currentEnd </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">// 当前这次跳跃能到达的最远边界，但并非真要跳到此边界</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> farthest </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">       </span><span class="token comment" style="color:#999988;font-style:italic">// 目前为止能到达的最远位置</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 只需要遍历到 numsSize-2，因为题目保证能到达最后位置</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> numsSize </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 计算从位置i能跳到的最远位置，并更新全局最远位置</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> currentFarthest </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        farthest </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">farthest </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> currentFarthest</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> farthest </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> currentFarthest</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 如果到达当前跳跃的边界，必须进行下一次跳跃</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> currentEnd</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            jumps</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">                </span><span class="token comment" style="color:#999988;font-style:italic">// 增加跳跃次数</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            currentEnd </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> farthest</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 更新下一次跳跃的边界</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> jumps</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 返回最小跳跃次数</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-总结">📖 总结：<a href="https://www.eurekashadow.xin/blog/LeetCode45#-%E6%80%BB%E7%BB%93" class="hash-link" aria-label="📖 总结：的直接链接" title="📖 总结：的直接链接">​</a></h3>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>点击展开题目总结</summary><div><div class="collapsibleContent_i85q"><h1>🤔 跳跃游戏 II</h1><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1️⃣-题目核心信息">1️⃣ 题目核心信息<a href="https://www.eurekashadow.xin/blog/LeetCode45#1%EF%B8%8F%E2%83%A3-%E9%A2%98%E7%9B%AE%E6%A0%B8%E5%BF%83%E4%BF%A1%E6%81%AF" class="hash-link" aria-label="1️⃣ 题目核心信息的直接链接" title="1️⃣ 题目核心信息的直接链接">​</a></h2><p>🎯 <strong>功能描述</strong>：给定一个数组，数组中每个元素表示在该位置可以跳跃的最大长度，求到达最后一个位置的最小跳跃次数。</p><p>📥 <strong>输入输出</strong>：</p><ul>
<li><strong>输入</strong>：int* nums（非负整数数组），int numsSize（数组长度）</li>
<li><strong>输出</strong>：到达最后一个下标的最小跳跃次数</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2️⃣-实现原理">2️⃣ 实现原理<a href="https://www.eurekashadow.xin/blog/LeetCode45#2%EF%B8%8F%E2%83%A3-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86" class="hash-link" aria-label="2️⃣ 实现原理的直接链接" title="2️⃣ 实现原理的直接链接">​</a></h2><p>💡 <strong>核心思路</strong>：使用贪心算法，在每次必须跳跃时选择能跳得最远的位置，从而最小化跳跃次数。</p><p>📋 <strong>实现步骤</strong>：</p><ol>
<li>维护三个变量：跳跃次数、当前跳跃边界、全局最远位置</li>
<li>遍历数组（除最后一个元素），不断更新能到达的最远位置</li>
<li>当到达当前跳跃边界时，必须进行下一次跳跃</li>
<li>更新跳跃次数和下一次跳跃的边界</li>
</ol><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3️⃣-关键点解析">3️⃣ 关键点解析<a href="https://www.eurekashadow.xin/blog/LeetCode45#3%EF%B8%8F%E2%83%A3-%E5%85%B3%E9%94%AE%E7%82%B9%E8%A7%A3%E6%9E%90" class="hash-link" aria-label="3️⃣ 关键点解析的直接链接" title="3️⃣ 关键点解析的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-代码技巧">🎯 代码技巧<a href="https://www.eurekashadow.xin/blog/LeetCode45#-%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7" class="hash-link" aria-label="🎯 代码技巧的直接链接" title="🎯 代码技巧的直接链接">​</a></h3><ul>
<li>使用贪心策略：在必须跳跃时选择最优方案</li>
<li>双指针思想：currentEnd标记当前跳跃边界，farthest记录最远可达位置</li>
<li>提前终止：只需遍历到倒数第二个元素</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4️⃣-使用场景">4️⃣ 使用场景<a href="https://www.eurekashadow.xin/blog/LeetCode45#4%EF%B8%8F%E2%83%A3-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="4️⃣ 使用场景的直接链接" title="4️⃣ 使用场景的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-适用情况">✅ 适用情况：<a href="https://www.eurekashadow.xin/blog/LeetCode45#-%E9%80%82%E7%94%A8%E6%83%85%E5%86%B5" class="hash-link" aria-label="✅ 适用情况：的直接链接" title="✅ 适用情况：的直接链接">​</a></h3><ul>
<li>求解最小跳跃次数问题</li>
<li>数组元素表示跳跃能力的场景</li>
<li>需要优化路径选择的问题</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-前提条件">⚠️ 前提条件：<a href="https://www.eurekashadow.xin/blog/LeetCode45#%EF%B8%8F-%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6" class="hash-link" aria-label="⚠️ 前提条件：的直接链接" title="⚠️ 前提条件：的直接链接">​</a></h3><ul>
<li>题目保证可以到达最后一个位置</li>
<li>数组元素为非负整数</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5️⃣-复杂度分析">5️⃣ 复杂度分析<a href="https://www.eurekashadow.xin/blog/LeetCode45#5%EF%B8%8F%E2%83%A3-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90" class="hash-link" aria-label="5️⃣ 复杂度分析的直接链接" title="5️⃣ 复杂度分析的直接链接">​</a></h2><ul>
<li>⏱️ 时间复杂度：O(n)，只需遍历一次数组</li>
<li>💾 空间复杂度：O(1)，只使用常数额外空间</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6️⃣-注意事项">6️⃣ 注意事项<a href="https://www.eurekashadow.xin/blog/LeetCode45#6%EF%B8%8F%E2%83%A3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="6️⃣ 注意事项的直接链接" title="6️⃣ 注意事项的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-边界情况">🚩 边界情况：<a href="https://www.eurekashadow.xin/blog/LeetCode45#-%E8%BE%B9%E7%95%8C%E6%83%85%E5%86%B5" class="hash-link" aria-label="🚩 边界情况：的直接链接" title="🚩 边界情况：的直接链接">​</a></h3><ul>
<li>数组长度为1：不需要跳跃，返回0</li>
<li>数组长度为2：最多只需1次跳跃</li>
<li>第一个元素为0：根据题目保证，这种情况不会出现</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-易错点">💥 易错点：<a href="https://www.eurekashadow.xin/blog/LeetCode45#-%E6%98%93%E9%94%99%E7%82%B9" class="hash-link" aria-label="💥 易错点：的直接链接" title="💥 易错点：的直接链接">​</a></h3><ul>
<li>循环只需要到 numsSize-1，否则可能多计算一次跳跃</li>
<li>必须在到达边界时才增加跳跃次数</li>
<li>更新边界和最远位置的顺序不能颠倒</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="7⃣-补充说明">7⃣ 补充说明<a href="https://www.eurekashadow.xin/blog/LeetCode45#7%E2%83%A3-%E8%A1%A5%E5%85%85%E8%AF%B4%E6%98%8E" class="hash-link" aria-label="7⃣ 补充说明的直接链接" title="7⃣ 补充说明的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-关键洞察">🎯 关键洞察<a href="https://www.eurekashadow.xin/blog/LeetCode45#-%E5%85%B3%E9%94%AE%E6%B4%9E%E5%AF%9F" class="hash-link" aria-label="🎯 关键洞察的直接链接" title="🎯 关键洞察的直接链接">​</a></h3><ul>
<li><code>jump</code> 变量更新的位置 ≠ 实际跳跃发生的物理位置</li>
<li><code>jump</code> 变量表示的是"必须做出跳跃决策"的次数</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-算法执行逻辑">📊 算法执行逻辑<a href="https://www.eurekashadow.xin/blog/LeetCode45#-%E7%AE%97%E6%B3%95%E6%89%A7%E8%A1%8C%E9%80%BB%E8%BE%91" class="hash-link" aria-label="📊 算法执行逻辑的直接链接" title="📊 算法执行逻辑的直接链接">​</a></h3><p><strong>例：nums = [2, 3, 1, 1, 4]</strong></p><p><strong>真实跳跃路径</strong>：0 → 1 → 4</p><p><strong>算法计数逻辑</strong>：</p><ol>
<li><strong>位置0</strong>：确定第1次跳跃覆盖范围(0-2)</li>
<li><strong>位置1,2</strong>：探索发现能跳到位置4</li>
<li><strong>位置2(边界)</strong>：必须决策，<code>jump++</code>，确定下次跳跃范围</li>
</ol><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-算法本质">🎯 算法本质<a href="https://www.eurekashadow.xin/blog/LeetCode45#-%E7%AE%97%E6%B3%95%E6%9C%AC%E8%B4%A8" class="hash-link" aria-label="🎯 算法本质的直接链接" title="🎯 算法本质的直接链接">​</a></h3><p>这是<strong>批量决策</strong>过程：</p><ul>
<li><strong>第1次决策</strong>(jump=1)：站在起点，确定覆盖范围0-2</li>
<li><strong>第2次决策</strong>(jump=2)：在范围内探索，发现能到位置4</li>
</ul><p><strong>实际执行</strong>：位置0 → 位置1 → 位置4<br>
<strong>算法计数</strong>：在必须决策时计数，非实际起跳时</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-设计优势">💡 设计优势<a href="https://www.eurekashadow.xin/blog/LeetCode45#-%E8%AE%BE%E8%AE%A1%E4%BC%98%E5%8A%BF" class="hash-link" aria-label="💡 设计优势的直接链接" title="💡 设计优势的直接链接">​</a></h3><ul>
<li><strong>提前规划</strong>：必须跳跃前已知最优选择</li>
<li><strong>批量处理</strong>：一次决策覆盖一个区间</li>
<li><strong>贪心最优</strong>：每次都选能跳最远的方案</li>
</ul><p>✅ <code>jump</code> 变量容易误导人，它记录的是"决策次数"而非"起跳时刻"。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="8⃣-惑之未解">8⃣ 惑之未解？<a href="https://www.eurekashadow.xin/blog/LeetCode45#8%E2%83%A3-%E6%83%91%E4%B9%8B%E6%9C%AA%E8%A7%A3" class="hash-link" aria-label="8⃣ 惑之未解？的直接链接" title="8⃣ 惑之未解？的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-问题思考">🤔 问题思考<a href="https://www.eurekashadow.xin/blog/LeetCode45#-%E9%97%AE%E9%A2%98%E6%80%9D%E8%80%83" class="hash-link" aria-label="🤔 问题思考的直接链接" title="🤔 问题思考的直接链接">​</a></h3><p>为什么for循环的判断条件是 <code>i &lt; numsSize - 1</code> 而不是 <code>i &lt; numsSize</code>？</p><p>如果使用 <code>i &lt; numsSize</code>，在某些情况下（如 <code>[2,3,1,1,4]</code>），当能够跳转到最后位置时，<code>jump</code> 会多加1，导致结果错误。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-深入分析">🧐 深入分析<a href="https://www.eurekashadow.xin/blog/LeetCode45#-%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90" class="hash-link" aria-label="🧐 深入分析的直接链接" title="🧐 深入分析的直接链接">​</a></h3><p>经过再次思考，这些变量 <code>jump</code>、<code>currentEnd</code>、<code>farthest</code>、<code>currentFarthest</code> 都是根据数组下标及其对应数值来决定是否更新的。</p><p><strong>关键理解点</strong>：</p><ul>
<li><code>jump</code> 的含义是"需要跳跃jump次才能到达数组最后一个元素"</li>
<li>如果循环条件设定为 <code>i &lt; numsSize</code>，for循环会遍历到数组的最后一个位置</li>
<li>但当我们处理到倒数第二个位置时，已经收集了足够的信息来确定最少跳跃次数</li>
<li>继续处理最后一个位置是不必要的，甚至可能导致错误结果</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="9⃣-举一反一">9⃣ 举一反一？😂<a href="https://www.eurekashadow.xin/blog/LeetCode45#9%E2%83%A3-%E4%B8%BE%E4%B8%80%E5%8F%8D%E4%B8%80" class="hash-link" aria-label="9⃣ 举一反一？😂的直接链接" title="9⃣ 举一反一？😂的直接链接">​</a></h2><p><strong>最小跳跃次数 + 真实跳跃路径</strong></p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 计算跳跃游戏的最小跳跃次数和路径</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param nums 非负整数数组，每个元素代表在该位置可以跳跃的最大长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param numsSize 数组长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param path 用于存储跳跃路径的数组</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param pathSize 用于返回路径长度的指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 到达最后一个下标的最小跳跃次数</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">jumpWithPath</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> path</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> pathSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 边界情况：数组长度小于等于1，不需要跳跃</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">numsSize </span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">pathSize </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> jumps </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// 记录跳跃次数</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> currentEnd </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">// 当前这次跳跃能到达的最远边界</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> farthest </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">       </span><span class="token comment" style="color:#999988;font-style:italic">// 目前为止能到达的最远位置</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> farthestIndex </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 能到达最远位置的索引</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 记录路径</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    path</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 起点总是位置0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> pathIndex </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 只需要遍历到 numsSize-2，因为题目保证能到达最后位置</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> numsSize </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 计算从位置i能跳到的最远位置</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> currentFarthest </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 更新全局最远位置和对应的索引</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">currentFarthest </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> farthest</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            farthest </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> currentFarthest</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            farthestIndex </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 如果到达当前跳跃的边界，必须进行下一次跳跃</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> currentEnd</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            jumps</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">                </span><span class="token comment" style="color:#999988;font-style:italic">// 增加跳跃次数</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            currentEnd </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> farthest</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 更新下一次跳跃的边界</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            path</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">pathIndex</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> farthestIndex</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 记录跳跃位置</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 添加终点</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    path</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">pathIndex</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> numsSize </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">pathSize </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> pathIndex</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> jumps</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 返回最小跳跃次数</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// 使用示例</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/*</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">int main() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">    int nums[] = {2, 3, 1, 1, 4};</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">    int numsSize = 5;</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">    int path[100];</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">    int pathSize;</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">    int jumps = jumpWithPath(nums, numsSize, path, &amp;pathSize);</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">    printf("最小跳跃次数: %d\n", jumps);</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">    printf("跳跃路径: ");</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">    for (int i = 0; i &lt; pathSize; i++) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">        printf("%d ", path[i]);</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">    printf("\n");</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">    return 0;</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">*/</span><br></span></code></pre></div></div></div></div></details>]]></content:encoded>
            <category>数组</category>
        </item>
        <item>
            <title><![CDATA[跳跃游戏]]></title>
            <link>https://www.eurekashadow.xin/blog/LeetCode55</link>
            <guid>https://www.eurekashadow.xin/blog/LeetCode55</guid>
            <pubDate>Sun, 03 Aug 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[力扣面试经典——55题]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="力扣面试经典55题"><span class="B2_JnYG"><a href="https://leetcode.cn/problems/jump-game/description/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer" title="力扣">力扣面试经典——55题</a></span><a href="https://www.eurekashadow.xin/blog/LeetCode55#%E5%8A%9B%E6%89%A3%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B855%E9%A2%98" class="hash-link" aria-label="力扣面试经典55题的直接链接" title="力扣面试经典55题的直接链接">​</a></h3>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-参考代码">💡 参考代码：<a href="https://www.eurekashadow.xin/blog/LeetCode55#-%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81" class="hash-link" aria-label="💡 参考代码：的直接链接" title="💡 参考代码：的直接链接">​</a></h3>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 判断是否能跳到最后一个下标</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param nums 非负整数数组，每个元素代表在该位置可以跳跃的最大长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param numsSize 数组长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 如果能到达最后一个下标返回true，否则返回false</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">bool </span><span class="token function" style="color:#d73a49">canJump</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> maxReach </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 记录当前能到达的最远位置下标</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 遍历数组中的每个位置</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 如果当前位置i超出了当前能到达的最远位置，说明无法到达位置i</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> maxReach</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> false</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 计算从当前位置i能到达的最远位置</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> currentReach </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 更新全局能到达的最远位置</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">currentReach </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> maxReach</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            maxReach </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> currentReach</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 如果已经能到达或超过最后一个位置(numsSize-1)，直接返回true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">maxReach </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> numsSize </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> true</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 必须保留这行，即使逻辑上不会执行到</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> maxReach </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> numsSize </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-总结">📖 总结：<a href="https://www.eurekashadow.xin/blog/LeetCode55#-%E6%80%BB%E7%BB%93" class="hash-link" aria-label="📖 总结：的直接链接" title="📖 总结：的直接链接">​</a></h3>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>点击展开题目总结</summary><div><div class="collapsibleContent_i85q"><h1>🤔 跳跃游戏</h1><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1️⃣-题目核心信息">1️⃣ 题目核心信息<a href="https://www.eurekashadow.xin/blog/LeetCode55#1%EF%B8%8F%E2%83%A3-%E9%A2%98%E7%9B%AE%E6%A0%B8%E5%BF%83%E4%BF%A1%E6%81%AF" class="hash-link" aria-label="1️⃣ 题目核心信息的直接链接" title="1️⃣ 题目核心信息的直接链接">​</a></h2><p>🎯 <strong>功能描述</strong>：判断是否能从数组的第一个位置跳跃到最后一个位置，数组中每个元素表示在该位置可以跳跃的最大长度</p><p>📥 <strong>输入输出</strong>：</p><ul>
<li><strong>输入</strong>：int* nums（非负整数数组），int numsSize（数组长度）</li>
<li><strong>输出</strong>：bool类型，如果能到达最后一个下标返回true，否则返回false</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2️⃣-实现原理">2️⃣ 实现原理<a href="https://www.eurekashadow.xin/blog/LeetCode55#2%EF%B8%8F%E2%83%A3-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86" class="hash-link" aria-label="2️⃣ 实现原理的直接链接" title="2️⃣ 实现原理的直接链接">​</a></h2><p>💡 <strong>核心思路</strong>：使用贪心算法，维护一个变量记录当前能到达的最远位置，遍历数组不断更新最远可达位置</p><p>📋 <strong>实现步骤</strong>：</p><ol>
<li>初始化maxReach为0，表示当前能到达的最远位置下标</li>
<li>遍历数组中的每个位置i</li>
<li>如果当前位置i超出maxReach，说明无法到达，返回false</li>
<li>计算从位置i能到达的最远位置(i + nums[i])，并更新maxReach</li>
<li>如果maxReach已经能到达或超过最后一个位置，直接返回true</li>
<li>遍历结束后检查maxReach是否能到达最后一个下标</li>
</ol><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3️⃣-关键点解析">3️⃣ 关键点解析<a href="https://www.eurekashadow.xin/blog/LeetCode55#3%EF%B8%8F%E2%83%A3-%E5%85%B3%E9%94%AE%E7%82%B9%E8%A7%A3%E6%9E%90" class="hash-link" aria-label="3️⃣ 关键点解析的直接链接" title="3️⃣ 关键点解析的直接链接">​</a></h2><p>原始思路是通过BFS方式探索所有可能路径，逐层扩展可能的跳跃路径，但这种方法时间复杂度较高。最优解使用贪心算法，通过维护全局最远可达位置来判断，避免了路径探索和重复计算。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-代码技巧">🎯 代码技巧<a href="https://www.eurekashadow.xin/blog/LeetCode55#-%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7" class="hash-link" aria-label="🎯 代码技巧的直接链接" title="🎯 代码技巧的直接链接">​</a></h3><ul>
<li>使用maxReach变量记录全局最远可达位置，避免重复计算</li>
<li>提前终止优化：一旦能到达终点就立即返回，无需继续遍历</li>
<li>边界检查：在遍历过程中实时检查是否能到达当前位置</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4️⃣-使用场景">4️⃣ 使用场景<a href="https://www.eurekashadow.xin/blog/LeetCode55#4%EF%B8%8F%E2%83%A3-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="4️⃣ 使用场景的直接链接" title="4️⃣ 使用场景的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-适用情况">✅ 适用情况：<a href="https://www.eurekashadow.xin/blog/LeetCode55#-%E9%80%82%E7%94%A8%E6%83%85%E5%86%B5" class="hash-link" aria-label="✅ 适用情况：的直接链接" title="✅ 适用情况：的直接链接">​</a></h3><ul>
<li>判断能否通过跳跃到达目标位置</li>
<li>游戏中角色移动范围判断</li>
<li>资源分配问题中判断能否覆盖所有节点</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-前提条件">⚠️ 前提条件：<a href="https://www.eurekashadow.xin/blog/LeetCode55#%EF%B8%8F-%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6" class="hash-link" aria-label="⚠️ 前提条件：的直接链接" title="⚠️ 前提条件：的直接链接">​</a></h3><ul>
<li>数组元素为非负整数</li>
<li>数组长度至少为1</li>
<li>从第一个位置开始跳跃</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5️⃣-复杂度分析">5️⃣ 复杂度分析<a href="https://www.eurekashadow.xin/blog/LeetCode55#5%EF%B8%8F%E2%83%A3-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90" class="hash-link" aria-label="5️⃣ 复杂度分析的直接链接" title="5️⃣ 复杂度分析的直接链接">​</a></h2><ul>
<li>
<p>⏱️ 时间复杂度：O(n)，其中n是数组长度，只需遍历一次数组</p>
</li>
<li>
<p>💾 空间复杂度：O(1)，只使用了常数级别的额外空间</p>
</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6️⃣-注意事项">6️⃣ 注意事项<a href="https://www.eurekashadow.xin/blog/LeetCode55#6%EF%B8%8F%E2%83%A3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="6️⃣ 注意事项的直接链接" title="6️⃣ 注意事项的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-边界情况">🚩 边界情况：<a href="https://www.eurekashadow.xin/blog/LeetCode55#-%E8%BE%B9%E7%95%8C%E6%83%85%E5%86%B5" class="hash-link" aria-label="🚩 边界情况：的直接链接" title="🚩 边界情况：的直接链接">​</a></h3><ul>
<li>数组只有一个元素的情况</li>
<li>第一个元素为0的情况</li>
<li>中间存在0元素的情况</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-易错点">💥 易错点：<a href="https://www.eurekashadow.xin/blog/LeetCode55#-%E6%98%93%E9%94%99%E7%82%B9" class="hash-link" aria-label="💥 易错点：的直接链接" title="💥 易错点：的直接链接">​</a></h3><ul>
<li>忘记检查当前位置是否可达</li>
<li>没有及时更新最远可达位置</li>
<li>忽略提前终止条件导致效率降低</li>
<li>函数末尾没有添加 return 语句</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="7️⃣-补充说明">7️⃣ 补充说明<a href="https://www.eurekashadow.xin/blog/LeetCode55#7%EF%B8%8F%E2%83%A3-%E8%A1%A5%E5%85%85%E8%AF%B4%E6%98%8E" class="hash-link" aria-label="7️⃣ 补充说明的直接链接" title="7️⃣ 补充说明的直接链接">​</a></h2><p><strong>为什么 <code>i &gt; maxReach</code> 就能判断无法到达最后位置</strong></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-核心理解">🎯 核心理解<a href="https://www.eurekashadow.xin/blog/LeetCode55#-%E6%A0%B8%E5%BF%83%E7%90%86%E8%A7%A3" class="hash-link" aria-label="🎯 核心理解的直接链接" title="🎯 核心理解的直接链接">​</a></h3><p><code>maxReach</code> 表示截至目前能到达的最远位置。如果 <code>i &gt; maxReach</code>，说明：</p><ul>
<li>位置 <code>i</code> 不可达</li>
<li>无法利用位置 <code>i</code> 的跳跃能力</li>
<li>更不可能到达最后位置</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-举例说明">📝 举例说明<a href="https://www.eurekashadow.xin/blog/LeetCode55#-%E4%B8%BE%E4%BE%8B%E8%AF%B4%E6%98%8E" class="hash-link" aria-label="📝 举例说明的直接链接" title="📝 举例说明的直接链接">​</a></h3><p>假设 <code>nums = [2, 0, 0, 3, 4]</code>：</p><ul>
<li><code>i = 0</code>: <code>maxReach = 2</code>，能到达位置0,1,2</li>
<li><code>i = 1,2</code>: 均 <code>&lt;= maxReach</code>，可达</li>
<li><code>i = 3</code>: <code>3 &gt; maxReach(2)</code>，<strong>不可达</strong></li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-关键原理">🔄 关键原理<a href="https://www.eurekashadow.xin/blog/LeetCode55#-%E5%85%B3%E9%94%AE%E5%8E%9F%E7%90%86" class="hash-link" aria-label="🔄 关键原理的直接链接" title="🔄 关键原理的直接链接">​</a></h3><p>我们只能从位置0开始连续向前跳跃，不能跳过中间位置：</p><ul>
<li>要到达位置 <code>i</code>，必须先到达 <code>0,1,2,...,i-1</code> 中某位置</li>
<li>如果 <code>maxReach &lt; i</code>，说明前面所有位置都无法触及位置 <code>i</code></li>
<li>因此位置 <code>i</code> 及其后面所有位置都不可达</li>
</ul></div></div></details>]]></content:encoded>
            <category>数组</category>
        </item>
        <item>
            <title><![CDATA[买卖股票的最佳时机Ⅱ]]></title>
            <link>https://www.eurekashadow.xin/blog/LeetCode122</link>
            <guid>https://www.eurekashadow.xin/blog/LeetCode122</guid>
            <pubDate>Sat, 02 Aug 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[力扣面试经典——122题]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="力扣面试经典122题"><span class="B2_JnYG"><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/description/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer" title="力扣">力扣面试经典——122题</a></span><a href="https://www.eurekashadow.xin/blog/LeetCode122#%E5%8A%9B%E6%89%A3%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B8122%E9%A2%98" class="hash-link" aria-label="力扣面试经典122题的直接链接" title="力扣面试经典122题的直接链接">​</a></h3>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-参考代码">💡 参考代码：<a href="https://www.eurekashadow.xin/blog/LeetCode122#-%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81" class="hash-link" aria-label="💡 参考代码：的直接链接" title="💡 参考代码：的直接链接">​</a></h3>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 计算股票买卖的最大利润（可多次交易）</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 算法思路：贪心策略，收集所有上涨段的利润</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 核心思想：只要明天价格比今天高，就相当于今天买入明天卖出</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param prices 股票价格数组，prices[i]表示第i天的股票价格</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param pricesSize 数组长度，表示股票交易天数</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 能获得的最大利润</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 时间复杂度：O(n)，只需要遍历一次价格数组</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 空间复杂度：O(1)，只使用常数额外空间</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 示例：</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * prices = [7,1,5,3,6,4]</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 第2天买入(1)，第3天卖出(5)：利润4</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 第4天买入(3)，第5天卖出(6)：利润3</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 总利润：7</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">maxProfit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> prices</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> pricesSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> profit </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 累计总利润</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 从第2天开始遍历，比较相邻两天的价格</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> pricesSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 如果今天价格高于昨天价格，说明可以获利</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 相当于昨天买入今天卖出</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">prices</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> prices</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            profit </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> prices</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> prices</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 累加利润</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> profit</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 返回最大利润</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-总结">📖 总结：<a href="https://www.eurekashadow.xin/blog/LeetCode122#-%E6%80%BB%E7%BB%93" class="hash-link" aria-label="📖 总结：的直接链接" title="📖 总结：的直接链接">​</a></h3>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>点击展开题目总结</summary><div><div class="collapsibleContent_i85q"><h1>🤔 买卖股票的最佳时机Ⅱ</h1><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1️⃣-题目核心信息">1️⃣ 题目核心信息<a href="https://www.eurekashadow.xin/blog/LeetCode122#1%EF%B8%8F%E2%83%A3-%E9%A2%98%E7%9B%AE%E6%A0%B8%E5%BF%83%E4%BF%A1%E6%81%AF" class="hash-link" aria-label="1️⃣ 题目核心信息的直接链接" title="1️⃣ 题目核心信息的直接链接">​</a></h2><p>🎯 <strong>功能描述</strong>：给定股票每天的价格，计算在可以多次买卖的条件下能获得的最大利润，任何时候最多只能持有一股股票</p><p>📥 <strong>输入输出</strong>：</p><ul>
<li><strong>输入</strong>：int* prices（股票价格数组），int pricesSize（数组长度）</li>
<li><strong>输出</strong>：int（能获得的最大利润）</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2️⃣-实现原理">2️⃣ 实现原理<a href="https://www.eurekashadow.xin/blog/LeetCode122#2%EF%B8%8F%E2%83%A3-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86" class="hash-link" aria-label="2️⃣ 实现原理的直接链接" title="2️⃣ 实现原理的直接链接">​</a></h2><p>💡 <strong>核心思路</strong>：贪心算法，收集所有上涨段的利润。只要相邻两天价格上涨就进行交易，相当于今天买入明天卖出</p><p>📋 <strong>实现步骤</strong>：</p><ol>
<li>初始化利润为0</li>
<li>从第2天开始遍历价格数组</li>
<li>比较当天与前一天的价格</li>
<li>如果当天价格更高，则将差值加入总利润</li>
<li>返回累计利润</li>
</ol><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3️⃣-关键点解析">3️⃣ 关键点解析<a href="https://www.eurekashadow.xin/blog/LeetCode122#3%EF%B8%8F%E2%83%A3-%E5%85%B3%E9%94%AE%E7%82%B9%E8%A7%A3%E6%9E%90" class="hash-link" aria-label="3️⃣ 关键点解析的直接链接" title="3️⃣ 关键点解析的直接链接">​</a></h2><p>原始思路是寻找局部最优的买卖点，考虑各种复杂的买卖策略组合，但最优解采用贪心策略，将问题简化为收集所有上涨利润。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-代码技巧">🎯 代码技巧<a href="https://www.eurekashadow.xin/blog/LeetCode122#-%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7" class="hash-link" aria-label="🎯 代码技巧的直接链接" title="🎯 代码技巧的直接链接">​</a></h3><ul>
<li>利用数学中的望远镜求和原理，将多次交易等价于最优的一次性交易</li>
<li>通过比较相邻元素差值来模拟交易决策</li>
<li>避免实际模拟买卖过程，直接计算理论最大收益</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4️⃣-使用场景">4️⃣ 使用场景<a href="https://www.eurekashadow.xin/blog/LeetCode122#4%EF%B8%8F%E2%83%A3-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="4️⃣ 使用场景的直接链接" title="4️⃣ 使用场景的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-适用情况">✅ 适用情况：<a href="https://www.eurekashadow.xin/blog/LeetCode122#-%E9%80%82%E7%94%A8%E6%83%85%E5%86%B5" class="hash-link" aria-label="✅ 适用情况：的直接链接" title="✅ 适用情况：的直接链接">​</a></h3><ul>
<li>需要计算可多次交易情况下的最大理论收益</li>
<li>股票价格趋势分析</li>
<li>算法教学中的贪心策略示例</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-前提条件">⚠️ 前提条件：<a href="https://www.eurekashadow.xin/blog/LeetCode122#%EF%B8%8F-%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6" class="hash-link" aria-label="⚠️ 前提条件：的直接链接" title="⚠️ 前提条件：的直接链接">​</a></h3><ul>
<li>可以同一天买入并卖出</li>
<li>每次交易只持有一股股票</li>
<li>不考虑交易成本和税收</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5️⃣-复杂度分析">5️⃣ 复杂度分析<a href="https://www.eurekashadow.xin/blog/LeetCode122#5%EF%B8%8F%E2%83%A3-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90" class="hash-link" aria-label="5️⃣ 复杂度分析的直接链接" title="5️⃣ 复杂度分析的直接链接">​</a></h2><ul>
<li>
<p>⏱️ 时间复杂度：O(n)，只需要遍历一次价格数组</p>
</li>
<li>
<p>💾 空间复杂度：O(1)，只使用常数额外空间</p>
</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6️⃣-注意事项">6️⃣ 注意事项<a href="https://www.eurekashadow.xin/blog/LeetCode122#6%EF%B8%8F%E2%83%A3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="6️⃣ 注意事项的直接链接" title="6️⃣ 注意事项的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-边界情况">🚩 边界情况：<a href="https://www.eurekashadow.xin/blog/LeetCode122#-%E8%BE%B9%E7%95%8C%E6%83%85%E5%86%B5" class="hash-link" aria-label="🚩 边界情况：的直接链接" title="🚩 边界情况：的直接链接">​</a></h3><ul>
<li>空数组或只有一个元素：返回0</li>
<li>价格持续下跌：返回0</li>
<li>价格持续上涨：返回首尾差值</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-易错点">💥 易错点：<a href="https://www.eurekashadow.xin/blog/LeetCode122#-%E6%98%93%E9%94%99%E7%82%B9" class="hash-link" aria-label="💥 易错点：的直接链接" title="💥 易错点：的直接链接">​</a></h3><ul>
<li>误以为需要模拟真实的买卖过程</li>
<li>混淆与只能买卖一次的股票问题</li>
<li>忽略算法基于"预知未来"的假设条件</li>
</ul></div></div></details>]]></content:encoded>
            <category>数组</category>
        </item>
        <item>
            <title><![CDATA[买卖股票的最佳时机]]></title>
            <link>https://www.eurekashadow.xin/blog/LeetCode121</link>
            <guid>https://www.eurekashadow.xin/blog/LeetCode121</guid>
            <pubDate>Fri, 01 Aug 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[力扣面试经典——121题]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="力扣面试经典121题"><span class="B2_JnYG"><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/description/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer" title="力扣">力扣面试经典——121题</a></span><a href="https://www.eurekashadow.xin/blog/LeetCode121#%E5%8A%9B%E6%89%A3%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B8121%E9%A2%98" class="hash-link" aria-label="力扣面试经典121题的直接链接" title="力扣面试经典121题的直接链接">​</a></h3>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-参考代码">💡 参考代码：<a href="https://www.eurekashadow.xin/blog/LeetCode121#-%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81" class="hash-link" aria-label="💡 参考代码：的直接链接" title="💡 参考代码：的直接链接">​</a></h3>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 计算股票交易的最大利润</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 给定一个数组，它的第i个元素是一支给定股票第i天的价格。</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 只能选择某一天买入股票，并选择在未来的某一个不同的日子卖出该股票。</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 设计一个算法来计算所能获取的最大利润。</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param prices 整数数组，表示股票每天的价格</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param pricesSize 数组prices的长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 返回能获取的最大利润，如果不能获取任何利润则返回0</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 示例:</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 输入: [7,1,5,3,6,4]</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 输出: 5</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 解释: 在第2天买入(价格=1)，在第5天卖出(价格=6)，利润=6-1=5</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 输入: [7,6,4,3,1]</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 输出: 0</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 解释: 价格持续下跌，无法获得利润</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 时间复杂度: O(n)</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 空间复杂度: O(1)</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">maxProfit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> prices</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> pricesSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 如果天数少于2天，无法完成交易，返回0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">pricesSize </span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 初始化最低价格为第一天的价格</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> minPrice </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> prices</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 初始化最大利润为0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> maxProfit </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 从第二天开始遍历所有价格</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> pricesSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 如果当前价格比记录的最低价格更低，则更新最低价格</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">prices</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> minPrice</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            minPrice </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> prices</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 如果当前价格与最低价格的差值大于记录的最大利润，则更新最大利润</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">prices</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> minPrice </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> maxProfit</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            maxProfit </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> prices</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> minPrice</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> maxProfit</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-总结">📖 总结：<a href="https://www.eurekashadow.xin/blog/LeetCode121#-%E6%80%BB%E7%BB%93" class="hash-link" aria-label="📖 总结：的直接链接" title="📖 总结：的直接链接">​</a></h3>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>点击展开题目总结</summary><div><div class="collapsibleContent_i85q"><h1>🤔 买卖股票的最佳时机</h1><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1️⃣-题目核心信息">1️⃣ 题目核心信息<a href="https://www.eurekashadow.xin/blog/LeetCode121#1%EF%B8%8F%E2%83%A3-%E9%A2%98%E7%9B%AE%E6%A0%B8%E5%BF%83%E4%BF%A1%E6%81%AF" class="hash-link" aria-label="1️⃣ 题目核心信息的直接链接" title="1️⃣ 题目核心信息的直接链接">​</a></h2><p>🎯 <strong>功能描述</strong>：给定股票价格数组，找出买入和卖出股票能获得的最大利润，只能进行一次交易且卖出日必须在买入日之后</p><p>📥 <strong>输入输出</strong>：</p><ul>
<li><strong>输入</strong>：int* prices（股票价格数组）, int pricesSize（数组长度）</li>
<li><strong>输出</strong>：int（最大利润值，无法获利时返回0）</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2️⃣-实现原理">2️⃣ 实现原理<a href="https://www.eurekashadow.xin/blog/LeetCode121#2%EF%B8%8F%E2%83%A3-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86" class="hash-link" aria-label="2️⃣ 实现原理的直接链接" title="2️⃣ 实现原理的直接链接">​</a></h2><p>💡 <strong>核心思路</strong>：一次遍历动态维护最低买入价格和最大利润</p><p>📋 <strong>实现步骤</strong>：</p><ol>
<li>初始化最低价格为第一天价格，最大利润为0</li>
<li>从第二天开始遍历价格数组</li>
<li>若当前价格低于最低价格，则更新最低价格</li>
<li>否则计算当前卖出可得利润，若大于最大利润则更新最大利润</li>
<li>遍历结束返回最大利润</li>
</ol><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3️⃣-关键点解析">3️⃣ 关键点解析<a href="https://www.eurekashadow.xin/blog/LeetCode121#3%EF%B8%8F%E2%83%A3-%E5%85%B3%E9%94%AE%E7%82%B9%E8%A7%A3%E6%9E%90" class="hash-link" aria-label="3️⃣ 关键点解析的直接链接" title="3️⃣ 关键点解析的直接链接">​</a></h2><p>原始思路是使用快慢指针枚举所有买入卖出组合，通过两层循环计算每种可能的利润并取最大值。但该方法时间复杂度为O(n²)。最优解通过记录到目前为止的最低价格和最大利润，只需一次遍历就能得到结果，时间复杂度优化为O(n)。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-代码技巧">🎯 代码技巧<a href="https://www.eurekashadow.xin/blog/LeetCode121#-%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7" class="hash-link" aria-label="🎯 代码技巧的直接链接" title="🎯 代码技巧的直接链接">​</a></h3><ul>
<li>使用else if避免不必要的利润计算</li>
<li>初始化最低价格为第一个元素，从第二个元素开始遍历</li>
<li>利用贪心思想，始终维护到目前为止的最优解</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4️⃣-使用场景">4️⃣ 使用场景<a href="https://www.eurekashadow.xin/blog/LeetCode121#4%EF%B8%8F%E2%83%A3-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="4️⃣ 使用场景的直接链接" title="4️⃣ 使用场景的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-适用情况">✅ 适用情况：<a href="https://www.eurekashadow.xin/blog/LeetCode121#-%E9%80%82%E7%94%A8%E6%83%85%E5%86%B5" class="hash-link" aria-label="✅ 适用情况：的直接链接" title="✅ 适用情况：的直接链接">​</a></h3><ul>
<li>股票交易利润最大化问题</li>
<li>需要找出数组中两个元素的最大正向差值</li>
<li>在线算法需要实时更新最优解</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-前提条件">⚠️ 前提条件：<a href="https://www.eurekashadow.xin/blog/LeetCode121#%EF%B8%8F-%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6" class="hash-link" aria-label="⚠️ 前提条件：的直接链接" title="⚠️ 前提条件：的直接链接">​</a></h3><ul>
<li>卖出日必须在买入日之后</li>
<li>只能进行一次交易</li>
<li>数组元素为非负整数</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5️⃣-复杂度分析">5️⃣ 复杂度分析<a href="https://www.eurekashadow.xin/blog/LeetCode121#5%EF%B8%8F%E2%83%A3-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90" class="hash-link" aria-label="5️⃣ 复杂度分析的直接链接" title="5️⃣ 复杂度分析的直接链接">​</a></h2><ul>
<li>
<p>⏱️ 时间复杂度：O(n)，只需遍历数组一次</p>
</li>
<li>
<p>💾 空间复杂度：O(1)，只使用常数个额外变量</p>
</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6️⃣-注意事项">6️⃣ 注意事项<a href="https://www.eurekashadow.xin/blog/LeetCode121#6%EF%B8%8F%E2%83%A3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="6️⃣ 注意事项的直接链接" title="6️⃣ 注意事项的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-边界情况">🚩 边界情况：<a href="https://www.eurekashadow.xin/blog/LeetCode121#-%E8%BE%B9%E7%95%8C%E6%83%85%E5%86%B5" class="hash-link" aria-label="🚩 边界情况：的直接链接" title="🚩 边界情况：的直接链接">​</a></h3><ul>
<li>数组长度为0或1时，无法完成交易</li>
<li>价格持续下跌时，利润为0</li>
<li>数组为空指针的情况</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-易错点">💥 易错点：<a href="https://www.eurekashadow.xin/blog/LeetCode121#-%E6%98%93%E9%94%99%E7%82%B9" class="hash-link" aria-label="💥 易错点：的直接链接" title="💥 易错点：的直接链接">​</a></h3><ul>
<li>忘记处理数组长度小于2的边界情况</li>
<li>错误地允许在买入前卖出</li>
<li>没有正确初始化最小价格和最大利润</li>
</ul></div></div></details>]]></content:encoded>
            <category>数组</category>
        </item>
        <item>
            <title><![CDATA[轮转数组]]></title>
            <link>https://www.eurekashadow.xin/blog/LeetCode189</link>
            <guid>https://www.eurekashadow.xin/blog/LeetCode189</guid>
            <pubDate>Fri, 01 Aug 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[力扣面试经典——189题]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="力扣面试经典189题"><span class="B2_JnYG"><a href="https://leetcode.cn/problems/rotate-array/description/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer" title="力扣">力扣面试经典——189题</a></span><a href="https://www.eurekashadow.xin/blog/LeetCode189#%E5%8A%9B%E6%89%A3%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B8189%E9%A2%98" class="hash-link" aria-label="力扣面试经典189题的直接链接" title="力扣面试经典189题的直接链接">​</a></h3>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-参考代码">💡 参考代码：<a href="https://www.eurekashadow.xin/blog/LeetCode189#-%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81" class="hash-link" aria-label="💡 参考代码：的直接链接" title="💡 参考代码：的直接链接">​</a></h3>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @brief 反转数组中指定范围的元素</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param nums 指向整型数组的指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param start 反转范围的起始索引（包含）</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param end 反转范围的结束索引（包含）</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @details 使用双指针法，从两端向中间交换元素，实现数组部分反转</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          时间复杂度: O(n)，空间复杂度: O(1)</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">reverse</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> start</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> end</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">start </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> end</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> temp </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">start</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">start</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">end</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">end</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> temp</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        start</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        end</span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @brief 将数组中的元素向右轮转 k 个位置</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param nums 指向整型数组的指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param numsSize 数组的长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param k 轮转的步数（非负数）</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @details 使用三步反转法实现数组轮转：</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          1. 反转整个数组</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          2. 反转前 k 个元素</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          3. 反转后 n-k 个元素</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          例如: nums = [1,2,3,4,5,6,7], k = 3</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          step1: [7,6,5,4,3,2,1] 反转整个数组</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          step2: [5,6,7,4,3,2,1] 反转前3个元素</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          step3: [5,6,7,1,2,3,4] 反转后4个元素</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          时间复杂度: O(n)，空间复杂度: O(1)</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rotate</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> k</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 处理k大于数组长度的情况，避免不必要的轮转</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    k </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> k </span><span class="token operator" style="color:#393A34">%</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 三步反转法</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">reverse</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">nums</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> numsSize </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// 反转整个数组</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">reverse</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">nums</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> k </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 反转前k个元素</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">reverse</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">nums</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> k</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> numsSize </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">// 反转后n-k个元素</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-总结">📖 总结：<a href="https://www.eurekashadow.xin/blog/LeetCode189#-%E6%80%BB%E7%BB%93" class="hash-link" aria-label="📖 总结：的直接链接" title="📖 总结：的直接链接">​</a></h3>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>点击展开题目总结</summary><div><div class="collapsibleContent_i85q"><h1>🤔 轮转数组</h1><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1️⃣-题目核心信息">1️⃣ 题目核心信息<a href="https://www.eurekashadow.xin/blog/LeetCode189#1%EF%B8%8F%E2%83%A3-%E9%A2%98%E7%9B%AE%E6%A0%B8%E5%BF%83%E4%BF%A1%E6%81%AF" class="hash-link" aria-label="1️⃣ 题目核心信息的直接链接" title="1️⃣ 题目核心信息的直接链接">​</a></h2><p>🎯 <strong>功能描述</strong>：将数组中的元素向右轮转 k 个位置，实现循环移位</p><p>📥 <strong>输入输出</strong>：</p><ul>
<li><strong>输入</strong>：<!-- -->
<ul>
<li><code>nums</code>: 指向整型数组的指针</li>
<li><code>numsSize</code>: 数组的长度</li>
<li><code>k</code>: 轮转的步数（非负数）</li>
</ul>
</li>
<li><strong>输出</strong>：无返回值，直接在原数组上进行修改</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2️⃣-实现原理">2️⃣ 实现原理<a href="https://www.eurekashadow.xin/blog/LeetCode189#2%EF%B8%8F%E2%83%A3-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86" class="hash-link" aria-label="2️⃣ 实现原理的直接链接" title="2️⃣ 实现原理的直接链接">​</a></h2><p>💡 <strong>核心思路</strong>：使用三步反转法（三次数组反转）实现数组轮转</p><p>📋 <strong>实现步骤</strong>：</p><ol>
<li>首先对 k 取模，处理 k 大于数组长度的情况</li>
<li>反转整个数组</li>
<li>反转前 k 个元素</li>
<li>反转后 n-k 个元素</li>
</ol><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3️⃣-关键点解析">3️⃣ 关键点解析<a href="https://www.eurekashadow.xin/blog/LeetCode189#3%EF%B8%8F%E2%83%A3-%E5%85%B3%E9%94%AE%E7%82%B9%E8%A7%A3%E6%9E%90" class="hash-link" aria-label="3️⃣ 关键点解析的直接链接" title="3️⃣ 关键点解析的直接链接">​</a></h2><p>原始思路是模拟轮转过程，每次将数组整体右移一位，重复k次。这种方法的时间复杂度是O(n×k)，当k很大时效率较低。而最优解使用三步反转法，时间复杂度仅为O(n)。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-代码技巧">🎯 代码技巧<a href="https://www.eurekashadow.xin/blog/LeetCode189#-%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7" class="hash-link" aria-label="🎯 代码技巧的直接链接" title="🎯 代码技巧的直接链接">​</a></h3><ul>
<li>使用取模运算 <code>k = k % numsSize</code> 优化轮转次数</li>
<li>采用双指针法实现数组反转，空间复杂度O(1)</li>
<li>三步反转法的巧妙应用，将轮转问题转化为反转问题</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4️⃣-使用场景">4️⃣ 使用场景<a href="https://www.eurekashadow.xin/blog/LeetCode189#4%EF%B8%8F%E2%83%A3-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="4️⃣ 使用场景的直接链接" title="4️⃣ 使用场景的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-适用情况">✅ 适用情况：<a href="https://www.eurekashadow.xin/blog/LeetCode189#-%E9%80%82%E7%94%A8%E6%83%85%E5%86%B5" class="hash-link" aria-label="✅ 适用情况：的直接链接" title="✅ 适用情况：的直接链接">​</a></h3><ul>
<li>需要实现数组循环移位操作</li>
<li>对空间复杂度有严格要求的场景</li>
<li>需要原地修改数组的场合</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-前提条件">⚠️ 前提条件：<a href="https://www.eurekashadow.xin/blog/LeetCode189#%EF%B8%8F-%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6" class="hash-link" aria-label="⚠️ 前提条件：的直接链接" title="⚠️ 前提条件：的直接链接">​</a></h3><ul>
<li>数组不能为空指针</li>
<li>数组长度必须大于0</li>
<li>k值必须为非负数</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5️⃣-复杂度分析">5️⃣ 复杂度分析<a href="https://www.eurekashadow.xin/blog/LeetCode189#5%EF%B8%8F%E2%83%A3-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90" class="hash-link" aria-label="5️⃣ 复杂度分析的直接链接" title="5️⃣ 复杂度分析的直接链接">​</a></h2><ul>
<li>
<p>⏱️ 时间复杂度：O(n)，其中n为数组长度，需要遍历数组常数次</p>
</li>
<li>
<p>💾 空间复杂度：O(1)，只使用了常数级别的额外空间</p>
</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6️⃣-注意事项">6️⃣ 注意事项<a href="https://www.eurekashadow.xin/blog/LeetCode189#6%EF%B8%8F%E2%83%A3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="6️⃣ 注意事项的直接链接" title="6️⃣ 注意事项的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-边界情况">🚩 边界情况：<a href="https://www.eurekashadow.xin/blog/LeetCode189#-%E8%BE%B9%E7%95%8C%E6%83%85%E5%86%B5" class="hash-link" aria-label="🚩 边界情况：的直接链接" title="🚩 边界情况：的直接链接">​</a></h3><ul>
<li>k等于0或数组长度的倍数时，数组保持不变</li>
<li>数组长度为1时，无论k为何值数组都保持不变</li>
<li>k大于数组长度时，需要取模运算避免多余操作</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-易错点">💥 易错点：<a href="https://www.eurekashadow.xin/blog/LeetCode189#-%E6%98%93%E9%94%99%E7%82%B9" class="hash-link" aria-label="💥 易错点：的直接链接" title="💥 易错点：的直接链接">​</a></h3><ul>
<li>忘记对k取模导致不必要的计算</li>
<li>反转时边界条件处理错误</li>
<li>混淆左转和右转的方向</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="7️⃣-补充说明">7️⃣ 补充说明<a href="https://www.eurekashadow.xin/blog/LeetCode189#7%EF%B8%8F%E2%83%A3-%E8%A1%A5%E5%85%85%E8%AF%B4%E6%98%8E" class="hash-link" aria-label="7️⃣ 补充说明的直接链接" title="7️⃣ 补充说明的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="为什么需要-k--k--numssize-操作">为什么需要 k = k % numsSize 操作？🤔<a href="https://www.eurekashadow.xin/blog/LeetCode189#%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81-k--k--numssize-%E6%93%8D%E4%BD%9C" class="hash-link" aria-label="为什么需要 k = k % numsSize 操作？🤔的直接链接" title="为什么需要 k = k % numsSize 操作？🤔的直接链接">​</a></h3><p><strong>问题背景</strong></p><p>当 <code>k</code> 大于数组长度时，实际上会发生重复的轮转。这个操作是为了避免不必要的重复计算。</p><p><strong>举例说明</strong></p><p>假设我们有一个长度为 7 的数组：<code>[1,2,3,4,5,6,7]</code></p><table><thead><tr><th>k 值</th><th>实际效果</th><th>说明</th></tr></thead><tbody><tr><td>k=3</td><td><code>[5,6,7,1,2,3,4]</code></td><td>轮转3步</td></tr><tr><td>k=10</td><td><code>[5,6,7,1,2,3,4]</code></td><td>10 = 7+3，相当于轮转3步</td></tr><tr><td>k=17</td><td><code>[5,6,7,1,2,3,4]</code></td><td>17 = 7×2+3，也相当于轮转3步</td></tr></tbody></table><p><strong>数学原理</strong></p><p>对于长度为 <code>n</code> 的数组，轮转 <code>k</code> 步和轮转 <code>k % n</code> 步的效果完全相同。</p><p>这是因为：</p><ul>
<li>轮转 <code>n</code> 步会让数组回到原始状态</li>
<li>所以轮转 <code>k</code> 步 = 轮转 <code>(k/n) × n + k%n</code> 步 = 轮转 <code>k%n</code> 步</li>
</ul><p><strong>优化意义</strong></p><p><strong>性能优化</strong>：避免不必要的重复轮转</p><ul>
<li>如果没有取模，<code>k=1000000</code>时就要执行1000000次操作</li>
<li>取模后，只需要执行 <code>1000000%7 = 2</code> 次有效操作</li>
</ul><p><strong>结果正确性</strong>：确保算法在任何 k 值下都能正确工作</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="8⃣-其他解法">8⃣ 其他解法<a href="https://www.eurekashadow.xin/blog/LeetCode189#8%E2%83%A3-%E5%85%B6%E4%BB%96%E8%A7%A3%E6%B3%95" class="hash-link" aria-label="8⃣ 其他解法的直接链接" title="8⃣ 其他解法的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-环形替换法">✨ 环形替换法<a href="https://www.eurekashadow.xin/blog/LeetCode189#-%E7%8E%AF%E5%BD%A2%E6%9B%BF%E6%8D%A2%E6%B3%95" class="hash-link" aria-label="✨ 环形替换法的直接链接" title="✨ 环形替换法的直接链接">​</a></h3><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @brief 使用环形替换法将数组中的元素向右轮转 k 个位置</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param nums 指向整型数组的指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param numsSize 数组的长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param k 轮转的步数（非负数）</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @details 核心思想是将数组中每个元素直接放到轮转后的位置上。</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          通过追踪元素的移动轨迹形成环形，每个元素只访问一次。</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          算法流程：</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          1. 从每个未访问的起始位置开始</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          2. 沿着环形路径移动元素，直到回到起始位置</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          3. 继续处理下一个环形，直到所有元素都被处理</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          例如: nums = [1,2,3,4,5,6], k = 2</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          形成两个环形: 1-&gt;3-&gt;5-&gt;1 和 2-&gt;4-&gt;6-&gt;2</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          时间复杂度: O(n)，空间复杂度: O(1)</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rotate</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> k</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 处理k大于数组长度的情况，避免不必要的轮转</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    k </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> k </span><span class="token operator" style="color:#393A34">%</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 记录已处理的元素个数</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> count </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 遍历所有可能的起始位置，直到所有元素都被处理</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> start </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> count </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> start</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> current </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> start</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 当前处理的位置</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> prev </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">start</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 需要放置到下一个位置的值</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 沿着环形路径移动元素，直到回到起始位置</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">do</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> next </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">current </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> k</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">%</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 计算下一个位置</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> temp </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">next</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">                </span><span class="token comment" style="color:#999988;font-style:italic">// 保存下一个位置的原始值</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">next</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> prev</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">                    </span><span class="token comment" style="color:#999988;font-style:italic">// 将prev放到下一个位置</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            prev </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> temp</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">                          </span><span class="token comment" style="color:#999988;font-style:italic">// 更新prev为下一个位置的原始值</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            current </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> next</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">                       </span><span class="token comment" style="color:#999988;font-style:italic">// 移动到下一个位置</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            count</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">                              </span><span class="token comment" style="color:#999988;font-style:italic">// 增加已处理元素计数</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">start </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> current</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 当回到起始位置时结束当前环形处理</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-使用额外数组">✨ 使用额外数组<a href="https://www.eurekashadow.xin/blog/LeetCode189#-%E4%BD%BF%E7%94%A8%E9%A2%9D%E5%A4%96%E6%95%B0%E7%BB%84" class="hash-link" aria-label="✨ 使用额外数组的直接链接" title="✨ 使用额外数组的直接链接">​</a></h3><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @brief 使用额外数组法将数组中的元素向右轮转 k 个位置</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param nums 指向整型数组的指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param numsSize 数组的长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param k 轮转的步数（非负数）</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @details 核心思想是创建一个新数组，将原数组中每个元素直接放到轮转后的位置上，</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          然后将新数组的内容复制回原数组。</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          算法流程：</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          1. 创建与原数组等长的新数组</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          2. 遍历原数组，将每个元素 nums[i] 放到新数组的 (i + k) % n 位置</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          3. 将新数组的内容复制回原数组</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          例如: nums = [1,2,3,4,5,6,7], k = 3</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          nums[0]=1 放到 newArr[(0+3)%7] = newArr[3] 的位置</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          nums[1]=2 放到 newArr[(1+3)%7] = newArr[4] 的位置</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          ...以此类推</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          时间复杂度: O(n)，空间复杂度: O(n)</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rotate</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> k</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> newArr</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">numsSize</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">// 创建与原数组等长的新数组</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    k </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> k </span><span class="token operator" style="color:#393A34">%</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">         </span><span class="token comment" style="color:#999988;font-style:italic">// 处理k大于数组长度的情况</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 将元素放到新位置</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 将nums[i]放到新数组的(i + k) % numsSize位置（轮转后的位置）</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        newArr</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> k</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">%</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 复制回原数组</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> newArr</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div></div></div></details>]]></content:encoded>
            <category>数组</category>
        </item>
        <item>
            <title><![CDATA[多数元素]]></title>
            <link>https://www.eurekashadow.xin/blog/LeetCode169</link>
            <guid>https://www.eurekashadow.xin/blog/LeetCode169</guid>
            <pubDate>Thu, 31 Jul 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[力扣面试经典——169题]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="力扣面试经典169题"><span class="B2_JnYG"><a href="https://leetcode.cn/problems/majority-element/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer" title="力扣">力扣面试经典——169题</a></span><a href="https://www.eurekashadow.xin/blog/LeetCode169#%E5%8A%9B%E6%89%A3%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B8169%E9%A2%98" class="hash-link" aria-label="力扣面试经典169题的直接链接" title="力扣面试经典169题的直接链接">​</a></h3>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-参考代码">💡 参考代码：<a href="https://www.eurekashadow.xin/blog/LeetCode169#-%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81" class="hash-link" aria-label="💡 参考代码：的直接链接" title="💡 参考代码：的直接链接">​</a></h3>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 查找数组中的多数元素（出现次数大于⌊n/2⌋的元素）</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 使用Boyer-Moore投票算法实现</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param nums 整数数组指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param numsSize 数组长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 返回多数元素</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">majorityElement</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 初始化候选人为第一个元素，计数为1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> candidate </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> count </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 投票阶段：遍历数组中剩余的所有元素</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 如果计数为0，更换候选人</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">count </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            candidate </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 设置新的候选人</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            count </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 重置计数为1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 如果当前元素与候选人相同，计数加1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> candidate</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            count</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 如果当前元素与候选人不同，计数减1（相当于抵消）</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            count</span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 返回最终的候选人（多数元素）</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> candidate</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-总结">📖 总结：<a href="https://www.eurekashadow.xin/blog/LeetCode169#-%E6%80%BB%E7%BB%93" class="hash-link" aria-label="📖 总结：的直接链接" title="📖 总结：的直接链接">​</a></h3>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>点击展开题目总结</summary><div><div class="collapsibleContent_i85q"><h1>🤔 多数元素</h1><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1️⃣-题目核心信息">1️⃣ 题目核心信息<a href="https://www.eurekashadow.xin/blog/LeetCode169#1%EF%B8%8F%E2%83%A3-%E9%A2%98%E7%9B%AE%E6%A0%B8%E5%BF%83%E4%BF%A1%E6%81%AF" class="hash-link" aria-label="1️⃣ 题目核心信息的直接链接" title="1️⃣ 题目核心信息的直接链接">​</a></h2><p>🎯 <strong>功能描述</strong>：给定一个大小为 n 的数组，找到其中的多数元素。多数元素是指在数组中出现次数大于 ⌊ n/2 ⌋ 的元素。</p><p>📥 <strong>输入输出</strong>：</p><ul>
<li><strong>输入</strong>：<code>int* nums</code>（整数数组指针），<code>int numsSize</code>（数组长度）</li>
<li><strong>输出</strong>：返回多数元素（保证存在）</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2️⃣-实现原理">2️⃣ 实现原理<a href="https://www.eurekashadow.xin/blog/LeetCode169#2%EF%B8%8F%E2%83%A3-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86" class="hash-link" aria-label="2️⃣ 实现原理的直接链接" title="2️⃣ 实现原理的直接链接">​</a></h2><p>💡 <strong>核心思路</strong>：使用Boyer-Moore投票算法，利用多数元素出现次数超过一半的特性，通过"投票抵消"机制找到目标元素。</p><p>📋 <strong>实现步骤</strong>：</p><ol>
<li>初始化候选元素为数组第一个元素，计数器为1</li>
<li>遍历数组剩余元素</li>
<li>若计数器为0，更新候选元素为当前元素，计数器重置为1</li>
<li>若当前元素等于候选元素，计数器加1</li>
<li>若当前元素不等于候选元素，计数器减1</li>
<li>返回最终候选元素</li>
</ol><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3️⃣-关键点解析">3️⃣ 关键点解析<a href="https://www.eurekashadow.xin/blog/LeetCode169#3%EF%B8%8F%E2%83%A3-%E5%85%B3%E9%94%AE%E7%82%B9%E8%A7%A3%E6%9E%90" class="hash-link" aria-label="3️⃣ 关键点解析的直接链接" title="3️⃣ 关键点解析的直接链接">​</a></h2><p>原始思路是使用双重循环统计每个元素出现次数，时间复杂度O(n²)，虽然正确但效率低。最优解使用Boyer-Moore投票算法，时间复杂度降为O(n)，空间复杂度O(1)。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-代码技巧">🎯 代码技巧<a href="https://www.eurekashadow.xin/blog/LeetCode169#-%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7" class="hash-link" aria-label="🎯 代码技巧的直接链接" title="🎯 代码技巧的直接链接">​</a></h3><ul>
<li>利用多数元素超过一半的数学特性</li>
<li>采用抵消思想，相同+1，不同-1</li>
<li>无需实际统计次数，只需找到候选元素</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4️⃣-使用场景">4️⃣ 使用场景<a href="https://www.eurekashadow.xin/blog/LeetCode169#4%EF%B8%8F%E2%83%A3-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="4️⃣ 使用场景的直接链接" title="4️⃣ 使用场景的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-适用情况">✅ 适用情况：<a href="https://www.eurekashadow.xin/blog/LeetCode169#-%E9%80%82%E7%94%A8%E6%83%85%E5%86%B5" class="hash-link" aria-label="✅ 适用情况：的直接链接" title="✅ 适用情况：的直接链接">​</a></h3><ul>
<li>需要找到出现次数超过一半的元素</li>
<li>数据流中查找多数元素</li>
<li>在线算法场景，需要实时处理</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-前提条件">⚠️ 前提条件：<a href="https://www.eurekashadow.xin/blog/LeetCode169#%EF%B8%8F-%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6" class="hash-link" aria-label="⚠️ 前提条件：的直接链接" title="⚠️ 前提条件：的直接链接">​</a></h3><ul>
<li>数组非空</li>
<li>保证存在多数元素（出现次数&gt;n/2）</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5️⃣-复杂度分析">5️⃣ 复杂度分析<a href="https://www.eurekashadow.xin/blog/LeetCode169#5%EF%B8%8F%E2%83%A3-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90" class="hash-link" aria-label="5️⃣ 复杂度分析的直接链接" title="5️⃣ 复杂度分析的直接链接">​</a></h2><ul>
<li>
<p>⏱️ 时间复杂度：O(n) - 只需遍历数组一次</p>
</li>
<li>
<p>💾 空间复杂度：O(1) - 只使用常数额外空间</p>
</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6️⃣-注意事项">6️⃣ 注意事项<a href="https://www.eurekashadow.xin/blog/LeetCode169#6%EF%B8%8F%E2%83%A3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="6️⃣ 注意事项的直接链接" title="6️⃣ 注意事项的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-边界情况">🚩 边界情况：<a href="https://www.eurekashadow.xin/blog/LeetCode169#-%E8%BE%B9%E7%95%8C%E6%83%85%E5%86%B5" class="hash-link" aria-label="🚩 边界情况：的直接链接" title="🚩 边界情况：的直接链接">​</a></h3><ul>
<li>数组只有一个元素</li>
<li>多数元素刚好出现⌊n/2⌋+1次</li>
<li>数组长度为偶数或奇数的情况</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-易错点">💥 易错点：<a href="https://www.eurekashadow.xin/blog/LeetCode169#-%E6%98%93%E9%94%99%E7%82%B9" class="hash-link" aria-label="💥 易错点：的直接链接" title="💥 易错点：的直接链接">​</a></h3><ul>
<li>忘记处理计数器为0时的候选元素更新</li>
<li>混淆多数元素的判断条件（&gt;n/2而非≥n/2）</li>
<li>在实际应用中未验证结果确实为多数元素</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="7️⃣-补充说明">7️⃣ 补充说明<a href="https://www.eurekashadow.xin/blog/LeetCode169#7%EF%B8%8F%E2%83%A3-%E8%A1%A5%E5%85%85%E8%AF%B4%E6%98%8E" class="hash-link" aria-label="7️⃣ 补充说明的直接链接" title="7️⃣ 补充说明的直接链接">​</a></h2><p><strong>"战场对决"类比</strong></p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 多数元素查找 - Boyer-Moore投票算法详解</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 核心思想：多数元素的数量超过总数的一半</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 就像一支军队人数超过总兵力的50%，即使与其他所有军队一对一战斗，</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 最后剩下的肯定还是这支军队的人</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">majorityElement</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 初始时，我们假设第一个士兵（数组第一个元素）是我们要找的军队</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> candidate </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 当前候选军队</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> count </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 当前军队的士兵数量（初始为1）</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 从第二个士兵开始检阅整个军队</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 如果战场上没有士兵了（count为0）</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">count </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 更换候选军队为当前遇到的士兵所属军队</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            candidate </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 新的候选军队</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            count </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 这支军队当前有1个士兵</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 如果当前士兵属于我们正在追踪的候选军队</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> candidate</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            count</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 该军队士兵数量+1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 如果当前士兵属于其他军队（敌对军队）</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            count</span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 我们候选军队的士兵与敌军士兵同归于尽，数量-1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 最终剩下的候选军队就是多数军队（多数元素）</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> candidate</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div><p><strong>具体例子演示</strong></p><p>以数组 <code>[2,2,1,1,1,2,2]</code> 为例：</p><table><thead><tr><th>步骤</th><th>当前元素</th><th>candidate</th><th>count</th><th>说明</th></tr></thead><tbody><tr><td>初始</td><td>-</td><td>2</td><td>1</td><td>假设第一个元素2是多数元素</td></tr><tr><td>i=1</td><td>2</td><td>2</td><td>2</td><td>遇到相同元素，count++</td></tr><tr><td>i=2</td><td>1</td><td>2</td><td>1</td><td>遇到不同元素，count--（2和1抵消）</td></tr><tr><td>i=3</td><td>1</td><td>2</td><td>0</td><td>再次抵消，count变为0</td></tr><tr><td>i=4</td><td>1</td><td>1</td><td>1</td><td>count为0，更换候选元素为1</td></tr><tr><td>i=5</td><td>2</td><td>1</td><td>0</td><td>1和2抵消，count变为0</td></tr><tr><td>i=6</td><td>2</td><td>2</td><td>1</td><td>count为0，更换候选元素为2</td></tr></tbody></table></div></div></details>]]></content:encoded>
            <category>数组</category>
        </item>
        <item>
            <title><![CDATA[删除有序数组中的重复项]]></title>
            <link>https://www.eurekashadow.xin/blog/LeetCode26</link>
            <guid>https://www.eurekashadow.xin/blog/LeetCode26</guid>
            <pubDate>Wed, 30 Jul 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[力扣面试经典——26题]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="力扣面试经典26题"><span class="B2_JnYG"><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array/description/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer" title="力扣">力扣面试经典——26题</a></span><a href="https://www.eurekashadow.xin/blog/LeetCode26#%E5%8A%9B%E6%89%A3%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B826%E9%A2%98" class="hash-link" aria-label="力扣面试经典26题的直接链接" title="力扣面试经典26题的直接链接">​</a></h3>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-参考代码">💡 参考代码：<a href="https://www.eurekashadow.xin/blog/LeetCode26#-%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81" class="hash-link" aria-label="💡 参考代码：的直接链接" title="💡 参考代码：的直接链接">​</a></h3>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 删除排序数组中的重复项</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param nums 排序数组指针，用于原地删除重复元素</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param numsSize 数组长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 返回删除重复元素后数组的新长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @description 使用双指针法原地删除重复元素，保持元素相对顺序不变</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 时间复杂度: O(n)</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 空间复杂度: O(1)</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">removeDuplicates</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> slow </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 慢指针，指向不重复元素的当前位置</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 快指针遍历整个数组，从第二个元素开始</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> fast </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> fast </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> fast</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 当快指针指向的元素与慢指针指向的元素不相等时</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">fast</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">slow</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 将慢指针前移一位，并将快指针元素复制到该位置</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">++</span><span class="token plain">slow</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">fast</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> slow </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 返回不重复元素的个数</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-总结">📖 总结：<a href="https://www.eurekashadow.xin/blog/LeetCode26#-%E6%80%BB%E7%BB%93" class="hash-link" aria-label="📖 总结：的直接链接" title="📖 总结：的直接链接">​</a></h3>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>点击展开题目总结</summary><div><div class="collapsibleContent_i85q"><h1>🤔 删除有序数组中的重复项</h1><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1️⃣-题目核心信息">1️⃣ 题目核心信息<a href="https://www.eurekashadow.xin/blog/LeetCode26#1%EF%B8%8F%E2%83%A3-%E9%A2%98%E7%9B%AE%E6%A0%B8%E5%BF%83%E4%BF%A1%E6%81%AF" class="hash-link" aria-label="1️⃣ 题目核心信息的直接链接" title="1️⃣ 题目核心信息的直接链接">​</a></h2><p>🎯 <strong>功能描述</strong>：原地删除非严格递增排列数组中的重复元素，使每个元素只出现一次</p><p>📥 <strong>输入输出</strong>：</p><ul>
<li><strong>输入</strong>：非严格递增排列数组 <code>nums</code>、数组长度 <code>numsSize</code></li>
<li><strong>输出</strong>：删除重复元素后数组的新长度，并保证前k个元素为唯一元素</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2️⃣-实现原理">2️⃣ 实现原理<a href="https://www.eurekashadow.xin/blog/LeetCode26#2%EF%B8%8F%E2%83%A3-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86" class="hash-link" aria-label="2️⃣ 实现原理的直接链接" title="2️⃣ 实现原理的直接链接">​</a></h2><p>💡 <strong>核心思路</strong>：使用快慢双指针技术，快指针遍历数组，慢指针记录不重复元素位置</p><p>📋 <strong>实现步骤</strong>：</p><ol>
<li>初始化慢指针指向数组第一个元素位置</li>
<li>快指针从第二个元素开始遍历整个数组</li>
<li>当快指针元素与慢指针元素不相等时，将快指针元素复制到慢指针下一个位置</li>
<li>返回慢指针位置加1即为新数组长度</li>
</ol><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3️⃣-关键点解析">3️⃣ 关键点解析<a href="https://www.eurekashadow.xin/blog/LeetCode26#3%EF%B8%8F%E2%83%A3-%E5%85%B3%E9%94%AE%E7%82%B9%E8%A7%A3%E6%9E%90" class="hash-link" aria-label="3️⃣ 关键点解析的直接链接" title="3️⃣ 关键点解析的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-代码技巧">🎯 代码技巧<a href="https://www.eurekashadow.xin/blog/LeetCode26#-%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7" class="hash-link" aria-label="🎯 代码技巧的直接链接" title="🎯 代码技巧的直接链接">​</a></h3><ul>
<li>快慢指针的经典应用</li>
<li>利用数组已排序特性，只需比较相邻不同元素</li>
<li><code>slow</code> 指针既作为索引又作为计数器</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4️⃣-使用场景">4️⃣ 使用场景<a href="https://www.eurekashadow.xin/blog/LeetCode26#4%EF%B8%8F%E2%83%A3-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="4️⃣ 使用场景的直接链接" title="4️⃣ 使用场景的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-适用情况">✅ 适用情况：<a href="https://www.eurekashadow.xin/blog/LeetCode26#-%E9%80%82%E7%94%A8%E6%83%85%E5%86%B5" class="hash-link" aria-label="✅ 适用情况：的直接链接" title="✅ 适用情况：的直接链接">​</a></h3><ul>
<li>有序数组去重操作</li>
<li>保留唯一元素并维持原有顺序</li>
<li>类似问题：删除重复元素II、移除元素等</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-前提条件">⚠️ 前提条件：<a href="https://www.eurekashadow.xin/blog/LeetCode26#%EF%B8%8F-%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6" class="hash-link" aria-label="⚠️ 前提条件：的直接链接" title="⚠️ 前提条件：的直接链接">​</a></h3><ul>
<li>数组必须是排序的（非严格递增）</li>
<li>只关心前k个元素，其余位置内容无关紧要</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5️⃣-复杂度分析">5️⃣ 复杂度分析<a href="https://www.eurekashadow.xin/blog/LeetCode26#5%EF%B8%8F%E2%83%A3-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90" class="hash-link" aria-label="5️⃣ 复杂度分析的直接链接" title="5️⃣ 复杂度分析的直接链接">​</a></h2><ul>
<li>
<p>⏱️ 时间复杂度：O(n)，只需要遍历数组一次</p>
</li>
<li>
<p>💾 空间复杂度：O(1)，只使用了常数个额外变量</p>
</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6️⃣-注意事项">6️⃣ 注意事项<a href="https://www.eurekashadow.xin/blog/LeetCode26#6%EF%B8%8F%E2%83%A3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="6️⃣ 注意事项的直接链接" title="6️⃣ 注意事项的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-边界情况">🚩 边界情况：<a href="https://www.eurekashadow.xin/blog/LeetCode26#-%E8%BE%B9%E7%95%8C%E6%83%85%E5%86%B5" class="hash-link" aria-label="🚩 边界情况：的直接链接" title="🚩 边界情况：的直接链接">​</a></h3><ul>
<li>空数组或单元素数组：<code>numsSize &lt;= 1</code></li>
<li>所有元素都相同</li>
<li>所有元素都不相同</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-易错点">💥 易错点：<a href="https://www.eurekashadow.xin/blog/LeetCode26#-%E6%98%93%E9%94%99%E7%82%B9" class="hash-link" aria-label="💥 易错点：的直接链接" title="💥 易错点：的直接链接">​</a></h3><ul>
<li>忘记处理边界条件（如果题目没有保证数组非空）</li>
<li>返回值应该是 <code>slow + 1</code> 而不是 <code>slow</code></li>
<li>没有正确理解"原地"的含义</li>
<li>快指针起始位置应该是1而不是0</li>
</ul></div></div></details>]]></content:encoded>
            <category>数组</category>
        </item>
        <item>
            <title><![CDATA[删除有序数组中的重复项 Ⅱ]]></title>
            <link>https://www.eurekashadow.xin/blog/LeetCode80</link>
            <guid>https://www.eurekashadow.xin/blog/LeetCode80</guid>
            <pubDate>Wed, 30 Jul 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[力扣面试经典——80题]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="力扣面试经典80题"><span class="B2_JnYG"><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array-ii/description/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer" title="力扣">力扣面试经典——80题</a></span><a href="https://www.eurekashadow.xin/blog/LeetCode80#%E5%8A%9B%E6%89%A3%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B880%E9%A2%98" class="hash-link" aria-label="力扣面试经典80题的直接链接" title="力扣面试经典80题的直接链接">​</a></h3>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-参考代码">💡 参考代码：<a href="https://www.eurekashadow.xin/blog/LeetCode80#-%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81" class="hash-link" aria-label="💡 参考代码：的直接链接" title="💡 参考代码：的直接链接">​</a></h3>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 删除有序数组中的重复项（最多保留2个相同元素）</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param nums 有序数组指针，用于原地删除重复元素</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param numsSize 数组长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 返回删除重复元素后数组的新长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @description 使用双指针法原地删除重复元素，使得每个元素最多出现两次</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 时间复杂度: O(n) - 只需遍历数组一次</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 空间复杂度: O(1) - 只使用常数额外空间</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">removeDuplicates</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 边界条件：如果数组长度小于等于2，无需处理直接返回</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 因为最多保留2个相同元素，所以长度小于等于2的数组肯定符合要求</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">numsSize </span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 初始化慢指针指向索引2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 前两个元素肯定可以保留（最多允许2个重复），所以从第3个位置开始放置有效元素</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> slow </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 快指针从索引2开始遍历整个数组</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 从第3个元素开始检查是否需要保留</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> fast </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> fast </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> fast</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 核心判断条件：只有当当前元素与slow指针前两个位置的元素不同时才保留</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 这确保了任何元素都不会出现超过2次</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 原理：如果nums[fast] == nums[slow-2]，说明包括即将插入的位置已经有3个相同元素了</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">fast</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">slow </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 将当前元素复制到slow指针位置</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">slow</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">fast</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 慢指针前移，指向下一个可放置元素的位置</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            slow</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 如果nums[fast] == nums[slow-2]，则跳过当前元素（不复制），fast继续前进</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 返回新数组的长度</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 由于slow指向下一个可放置位置的索引，所以直接返回slow即为数组长度</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> slow</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-总结">📖 总结：<a href="https://www.eurekashadow.xin/blog/LeetCode80#-%E6%80%BB%E7%BB%93" class="hash-link" aria-label="📖 总结：的直接链接" title="📖 总结：的直接链接">​</a></h3>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>点击展开题目总结</summary><div><div class="collapsibleContent_i85q"><h1>🤔 删除有序数组中的重复项 II</h1><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1️⃣-题目核心信息">1️⃣ 题目核心信息<a href="https://www.eurekashadow.xin/blog/LeetCode80#1%EF%B8%8F%E2%83%A3-%E9%A2%98%E7%9B%AE%E6%A0%B8%E5%BF%83%E4%BF%A1%E6%81%AF" class="hash-link" aria-label="1️⃣ 题目核心信息的直接链接" title="1️⃣ 题目核心信息的直接链接">​</a></h2><p>🎯 <strong>功能描述</strong>：原地删除有序数组中的重复元素，使得每个元素最多出现两次</p><p>📥 <strong>输入输出</strong>：</p><ul>
<li><strong>输入</strong>：有序数组 <code>nums</code>、数组长度 <code>numsSize</code></li>
<li><strong>输出</strong>：删除重复元素后数组的新长度，并修改原数组前k个元素</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2️⃣-实现原理">2️⃣ 实现原理<a href="https://www.eurekashadow.xin/blog/LeetCode80#2%EF%B8%8F%E2%83%A3-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86" class="hash-link" aria-label="2️⃣ 实现原理的直接链接" title="2️⃣ 实现原理的直接链接">​</a></h2><p>💡 <strong>核心思路</strong>：使用双指针技术，通过比较当前元素与已保留元素中倒数第2个元素来判断是否允许插入</p><p>📋 <strong>实现步骤</strong>：</p><ol>
<li>处理边界情况：数组长度≤2时直接返回</li>
<li>初始化慢指针指向索引2（前两个元素肯定可以保留）</li>
<li>快指针从索引2开始遍历数组</li>
<li>当快指针元素与慢指针前两个位置元素不同时，将其复制到慢指针位置</li>
<li>返回慢指针位置作为新数组长度</li>
</ol><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3️⃣-关键点解析">3️⃣ 关键点解析<a href="https://www.eurekashadow.xin/blog/LeetCode80#3%EF%B8%8F%E2%83%A3-%E5%85%B3%E9%94%AE%E7%82%B9%E8%A7%A3%E6%9E%90" class="hash-link" aria-label="3️⃣ 关键点解析的直接链接" title="3️⃣ 关键点解析的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="初始思路-vs-最优解">初始思路 vs 最优解<a href="https://www.eurekashadow.xin/blog/LeetCode80#%E5%88%9D%E5%A7%8B%E6%80%9D%E8%B7%AF-vs-%E6%9C%80%E4%BC%98%E8%A7%A3" class="hash-link" aria-label="初始思路 vs 最优解的直接链接" title="初始思路 vs 最优解的直接链接">​</a></h3><h4 class="anchor anchorWithStickyNavbar_LWe7" id="-我的初始想法">💭 我的初始想法<a href="https://www.eurekashadow.xin/blog/LeetCode80#-%E6%88%91%E7%9A%84%E5%88%9D%E5%A7%8B%E6%83%B3%E6%B3%95" class="hash-link" aria-label="💭 我的初始想法的直接链接" title="💭 我的初始想法的直接链接">​</a></h4><p>使用显式计数器记录当前元素出现次数，当元素相同时只有计数小于1时才允许复制：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">removeDuplicates</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> slow </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> count </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> fast </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> fast </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> fast</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">fast</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">slow</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">++</span><span class="token plain">slow</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">fast</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            count </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">if</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">count </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            count</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">++</span><span class="token plain">slow</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">fast</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> slow </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div><h4 class="anchor anchorWithStickyNavbar_LWe7" id="-最优解法隐式计数">⚡ 最优解法（隐式计数）<a href="https://www.eurekashadow.xin/blog/LeetCode80#-%E6%9C%80%E4%BC%98%E8%A7%A3%E6%B3%95%E9%9A%90%E5%BC%8F%E8%AE%A1%E6%95%B0" class="hash-link" aria-label="⚡ 最优解法（隐式计数）的直接链接" title="⚡ 最优解法（隐式计数）的直接链接">​</a></h4><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">removeDuplicates</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">numsSize </span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> slow </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> fast </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> fast </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> fast</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">fast</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">slow </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">slow</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">fast</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            slow</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> slow</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-对比分析">🆚 对比分析<a href="https://www.eurekashadow.xin/blog/LeetCode80#-%E5%AF%B9%E6%AF%94%E5%88%86%E6%9E%90" class="hash-link" aria-label="🆚 对比分析的直接链接" title="🆚 对比分析的直接链接">​</a></h3><table><thead><tr><th>方面</th><th>初始思路</th><th>最优解</th></tr></thead><tbody><tr><td>计数方式</td><td>显式计数器</td><td>隐式通过数组位置关系</td></tr><tr><td>代码复杂度</td><td>需要维护count变量</td><td>无需额外变量</td></tr><tr><td>可读性</td><td>逻辑清晰但稍复杂</td><td>简洁但需要理解技巧</td></tr><tr><td>扩展性</td><td>容易扩展到k次重复</td><td>需要修改索引计算</td></tr></tbody></table><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-代码技巧">🎯 代码技巧<a href="https://www.eurekashadow.xin/blog/LeetCode80#-%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7" class="hash-link" aria-label="🎯 代码技巧的直接链接" title="🎯 代码技巧的直接链接">​</a></h3><ul>
<li>双指针法的经典应用</li>
<li>利用数组有序特性，通过位置关系隐式计数</li>
<li>边界条件的巧妙处理（前两个元素天然满足条件）</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4️⃣-使用场景">4️⃣ 使用场景<a href="https://www.eurekashadow.xin/blog/LeetCode80#4%EF%B8%8F%E2%83%A3-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="4️⃣ 使用场景的直接链接" title="4️⃣ 使用场景的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-适用情况">✅ 适用情况：<a href="https://www.eurekashadow.xin/blog/LeetCode80#-%E9%80%82%E7%94%A8%E6%83%85%E5%86%B5" class="hash-link" aria-label="✅ 适用情况：的直接链接" title="✅ 适用情况：的直接链接">​</a></h3><ul>
<li>有序数组中限制元素出现次数</li>
<li>需要原地处理数组数据</li>
<li>类似问题：删除重复元素I、移除元素等</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-前提条件">⚠️ 前提条件：<a href="https://www.eurekashadow.xin/blog/LeetCode80#%EF%B8%8F-%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6" class="hash-link" aria-label="⚠️ 前提条件：的直接链接" title="⚠️ 前提条件：的直接链接">​</a></h3><ul>
<li>数组必须是排序的</li>
<li>只关心前k个元素，其余位置内容无关紧要</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5️⃣-复杂度分析">5️⃣ 复杂度分析<a href="https://www.eurekashadow.xin/blog/LeetCode80#5%EF%B8%8F%E2%83%A3-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90" class="hash-link" aria-label="5️⃣ 复杂度分析的直接链接" title="5️⃣ 复杂度分析的直接链接">​</a></h2><ul>
<li>
<p>⏱️ 时间复杂度：O(n)，只需要遍历数组一次</p>
</li>
<li>
<p>💾 空间复杂度：O(1)，只使用了常数个额外变量</p>
</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6️⃣-注意事项">6️⃣ 注意事项<a href="https://www.eurekashadow.xin/blog/LeetCode80#6%EF%B8%8F%E2%83%A3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="6️⃣ 注意事项的直接链接" title="6️⃣ 注意事项的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-边界情况">🚩 边界情况：<a href="https://www.eurekashadow.xin/blog/LeetCode80#-%E8%BE%B9%E7%95%8C%E6%83%85%E5%86%B5" class="hash-link" aria-label="🚩 边界情况：的直接链接" title="🚩 边界情况：的直接链接">​</a></h3><ul>
<li>空数组或单元素数组：<code>numsSize &lt;= 2</code></li>
<li>所有元素都相同</li>
<li>所有元素都不相同</li>
<li>只有部分元素重复超过两次</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-易错点">💥 易错点：<a href="https://www.eurekashadow.xin/blog/LeetCode80#-%E6%98%93%E9%94%99%E7%82%B9" class="hash-link" aria-label="💥 易错点：的直接链接" title="💥 易错点：的直接链接">​</a></h3><ul>
<li>忘记处理边界条件</li>
<li>慢指针起始位置应该是2而不是0</li>
<li>返回值应该是 <code>slow</code> 而不是 <code>slow + 1</code></li>
<li>比较条件应该是 <code>nums[fast] != nums[slow - 2]</code> 而不是其他位置</li>
</ul></div></div></details>]]></content:encoded>
            <category>数组</category>
        </item>
        <item>
            <title><![CDATA[移除元素]]></title>
            <link>https://www.eurekashadow.xin/blog/LeetCode27</link>
            <guid>https://www.eurekashadow.xin/blog/LeetCode27</guid>
            <pubDate>Tue, 29 Jul 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[力扣面试经典——27题]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="力扣面试经典27题"><span class="B2_JnYG"><a href="https://leetcode.cn/problems/remove-element/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer" title="力扣">力扣面试经典——27题</a></span><a href="https://www.eurekashadow.xin/blog/LeetCode27#%E5%8A%9B%E6%89%A3%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B827%E9%A2%98" class="hash-link" aria-label="力扣面试经典27题的直接链接" title="力扣面试经典27题的直接链接">​</a></h3>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-参考代码">💡 参考代码：<a href="https://www.eurekashadow.xin/blog/LeetCode27#-%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81" class="hash-link" aria-label="💡 参考代码：的直接链接" title="💡 参考代码：的直接链接">​</a></h3>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 原地移除数组中等于 val 的元素</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param nums 输入数组</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param numsSize 数组长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param val  要移除的值</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 返回不等于 val 的元素数量</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">removeElement</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> val</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> slow </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 慢指针，指向下一个要放置非val元素的位置</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 快指针遍历整个数组</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> fast </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> fast </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> fast</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 如果当前元素不等于val，则将其放到slow位置</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">fast</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> val</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">slow</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">fast</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> slow</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// slow即为新数组的长度</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-总结">📖 总结：<a href="https://www.eurekashadow.xin/blog/LeetCode27#-%E6%80%BB%E7%BB%93" class="hash-link" aria-label="📖 总结：的直接链接" title="📖 总结：的直接链接">​</a></h3>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>点击展开题目总结</summary><div><div class="collapsibleContent_i85q"><h1>🤔 移除元素</h1><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1️⃣-题目核心信息">1️⃣ 题目核心信息<a href="https://www.eurekashadow.xin/blog/LeetCode27#1%EF%B8%8F%E2%83%A3-%E9%A2%98%E7%9B%AE%E6%A0%B8%E5%BF%83%E4%BF%A1%E6%81%AF" class="hash-link" aria-label="1️⃣ 题目核心信息的直接链接" title="1️⃣ 题目核心信息的直接链接">​</a></h2><p>🎯 <strong>功能描述</strong>：原地移除数组中所有等于指定值的元素，返回剩余元素数量</p><p>📥 <strong>输入输出</strong>：</p><ul>
<li><strong>输入</strong>：数组 <code>nums</code>、数组长度 <code>numsSize</code>、要移除的值 <code>val</code></li>
<li><strong>输出</strong>：不等于 <code>val</code> 的元素数量，且这些元素位于数组前部</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2️⃣-实现原理">2️⃣ 实现原理<a href="https://www.eurekashadow.xin/blog/LeetCode27#2%EF%B8%8F%E2%83%A3-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86" class="hash-link" aria-label="2️⃣ 实现原理的直接链接" title="2️⃣ 实现原理的直接链接">​</a></h2><p>💡 <strong>核心思路</strong>：使用快慢双指针技术，快指针遍历数组，慢指针记录有效元素位置</p><p>📋 <strong>实现步骤</strong>：</p><ol>
<li>初始化慢指针指向数组开头（下一个有效元素存放位置）</li>
<li>快指针遍历整个数组</li>
<li>遇到不等于 <code>val</code> 的元素就放到慢指针位置，并移动慢指针</li>
<li>返回慢指针的位置即为新数组长度</li>
</ol><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3️⃣-关键点解析">3️⃣ 关键点解析<a href="https://www.eurekashadow.xin/blog/LeetCode27#3%EF%B8%8F%E2%83%A3-%E5%85%B3%E9%94%AE%E7%82%B9%E8%A7%A3%E6%9E%90" class="hash-link" aria-label="3️⃣ 关键点解析的直接链接" title="3️⃣ 关键点解析的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-初始思路-vs-最优解">🧠 初始思路 vs 最优解<a href="https://www.eurekashadow.xin/blog/LeetCode27#-%E5%88%9D%E5%A7%8B%E6%80%9D%E8%B7%AF-vs-%E6%9C%80%E4%BC%98%E8%A7%A3" class="hash-link" aria-label="🧠 初始思路 vs 最优解的直接链接" title="🧠 初始思路 vs 最优解的直接链接">​</a></h3><h4 class="anchor anchorWithStickyNavbar_LWe7" id="-我的初始想法">💭 我的初始想法<a href="https://www.eurekashadow.xin/blog/LeetCode27#-%E6%88%91%E7%9A%84%E5%88%9D%E5%A7%8B%E6%83%B3%E6%B3%95" class="hash-link" aria-label="💭 我的初始想法的直接链接" title="💭 我的初始想法的直接链接">​</a></h4><p>使用额外数组存储不等于 <code>val</code> 的元素，遍历完成后复制回原数组。即：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">removeElement</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> val</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> tempArray</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">100</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 额外数组</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> count </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 第一遍遍历：复制到临时数组</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> val</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            tempArray</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">count</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 第二遍遍历：复制回原数组</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> count</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> tempArray</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> count</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div><h4 class="anchor anchorWithStickyNavbar_LWe7" id="-最优解法双指针">⚡ 最优解法（双指针）<a href="https://www.eurekashadow.xin/blog/LeetCode27#-%E6%9C%80%E4%BC%98%E8%A7%A3%E6%B3%95%E5%8F%8C%E6%8C%87%E9%92%88" class="hash-link" aria-label="⚡ 最优解法（双指针）的直接链接" title="⚡ 最优解法（双指针）的直接链接">​</a></h4><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">removeElement</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> val</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> slow </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 慢指针，指向下一个要放置非val元素的位置</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 快指针遍历整个数组</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> fast </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> fast </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> fast</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 如果当前元素不等于val，则将其放到slow位置</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">fast</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> val</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">slow</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">fast</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> slow</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// slow即为新数组的长度</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-对比分析">🆚 对比分析<a href="https://www.eurekashadow.xin/blog/LeetCode27#-%E5%AF%B9%E6%AF%94%E5%88%86%E6%9E%90" class="hash-link" aria-label="🆚 对比分析的直接链接" title="🆚 对比分析的直接链接">​</a></h3><table><thead><tr><th>方面</th><th>初始思路</th><th>最优解(双指针)</th></tr></thead><tbody><tr><td>空间复杂度</td><td>O(n) - 需要额外数组</td><td>O(1) - 原地操作</td></tr><tr><td>时间复杂度</td><td>O(n) - 两次遍历</td><td>O(n) - 一次遍历</td></tr><tr><td>代码简洁性</td><td>需要两个循环</td><td>只需一个循环</td></tr><tr><td>是否原地</td><td>否</td><td>是</td></tr></tbody></table><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-代码技巧">🎯 代码技巧<a href="https://www.eurekashadow.xin/blog/LeetCode27#-%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7" class="hash-link" aria-label="🎯 代码技巧的直接链接" title="🎯 代码技巧的直接链接">​</a></h3><ul>
<li>快慢指针的经典应用</li>
<li>利用数组随机访问特性，直接覆盖无效元素</li>
<li><code>slow</code> 指针既作为索引又作为计数器</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4️⃣-使用场景">4️⃣ 使用场景<a href="https://www.eurekashadow.xin/blog/LeetCode27#4%EF%B8%8F%E2%83%A3-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="4️⃣ 使用场景的直接链接" title="4️⃣ 使用场景的直接链接">​</a></h2><p>✅ <strong>适用情况</strong>：</p><ul>
<li>需要原地删除数组中满足条件的元素</li>
<li>数组元素过滤操作</li>
<li>类似问题：删除重复元素、移动零等</li>
</ul><p>⚠️ <strong>前提条件</strong>：</p><ul>
<li>元素顺序可以改变</li>
<li>只关心前k个元素，其余位置内容无关紧要</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5️⃣-复杂度分析">5️⃣ 复杂度分析<a href="https://www.eurekashadow.xin/blog/LeetCode27#5%EF%B8%8F%E2%83%A3-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90" class="hash-link" aria-label="5️⃣ 复杂度分析的直接链接" title="5️⃣ 复杂度分析的直接链接">​</a></h2><p>⏱️ <strong>时间复杂度</strong>：O(n)，只需要遍历数组一次</p><p>💾 <strong>空间复杂度</strong>：O(1)，只使用了常数个额外变量</p><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6️⃣-注意事项">6️⃣ 注意事项<a href="https://www.eurekashadow.xin/blog/LeetCode27#6%EF%B8%8F%E2%83%A3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="6️⃣ 注意事项的直接链接" title="6️⃣ 注意事项的直接链接">​</a></h2><p>🚩 <strong>边界情况</strong>：</p><ul>
<li>空数组：<code>numsSize = 0</code></li>
<li>所有元素都等于 <code>val</code></li>
<li>所有元素都不等于 <code>val</code></li>
</ul><p>💥 <strong>易错点</strong>：</p><ul>
<li>忘记返回新数组长度</li>
<li>指针边界条件处理错误</li>
<li>没有正确理解"原地"的含义</li>
</ul></div></div></details>]]></content:encoded>
            <category>数组</category>
        </item>
        <item>
            <title><![CDATA[Git学习]]></title>
            <link>https://www.eurekashadow.xin/blog/LearnGit</link>
            <guid>https://www.eurekashadow.xin/blog/LearnGit</guid>
            <pubDate>Sun, 06 Jul 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[Git 使用技巧汇总]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="git-使用技巧汇总">Git 使用技巧汇总<a href="https://www.eurekashadow.xin/blog/LearnGit#git-%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E6%B1%87%E6%80%BB" class="hash-link" aria-label="Git 使用技巧汇总的直接链接" title="Git 使用技巧汇总的直接链接">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="测试-git-diff-功能">测试 git diff 功能<a href="https://www.eurekashadow.xin/blog/LearnGit#%E6%B5%8B%E8%AF%95-git-diff-%E5%8A%9F%E8%83%BD" class="hash-link" aria-label="测试 git diff 功能的直接链接" title="测试 git diff 功能的直接链接">​</a></h3>
<ul>
<li><code>git diff</code>：查看<strong>未暂存文件</strong>与上次提交之间的差异。</li>
<li><code>git diff --staged</code>：查看<strong>已暂存文件</strong>与上次提交之间的差异。</li>
</ul>
<p>✅ <strong>一句话总结</strong>：如果文件在<strong>未暂存区</strong>，使用 <code>git diff</code>；如果文件<strong>已暂存</strong>，使用 <code>git diff --staged</code>。</p>
<hr>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="提交操作">提交操作<a href="https://www.eurekashadow.xin/blog/LearnGit#%E6%8F%90%E4%BA%A4%E6%93%8D%E4%BD%9C" class="hash-link" aria-label="提交操作的直接链接" title="提交操作的直接链接">​</a></h3>
<ul>
<li><code>git commit -a</code>：跳过 <code>git add</code> 阶段，一键暂存并提交所有修改。</li>
<li><code>git commit --amend</code>：撤销最近一次提交，并允许：<!-- -->
<ul>
<li>使用 <code>git add</code> 补充遗漏的文件；</li>
<li>编辑或保留原有的提交信息后重新提交。</li>
</ul>
</li>
</ul>
<p>🔁 适用于刚提交完发现还有文件没添加，或者需要修改提交信息的情况。</p>
<hr>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="文件重命名操作">文件重命名操作<a href="https://www.eurekashadow.xin/blog/LearnGit#%E6%96%87%E4%BB%B6%E9%87%8D%E5%91%BD%E5%90%8D%E6%93%8D%E4%BD%9C" class="hash-link" aria-label="文件重命名操作的直接链接" title="文件重命名操作的直接链接">​</a></h3>
<ul>
<li><code>git mv &lt;原文件名&gt; &lt;新文件名&gt;</code>：用于重命名 Git 跟踪的文件。</li>
</ul>
<p>示例：</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">git mv test1.txt test.txt</span><br></span></code></pre></div></div>
<hr>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="撤销暂存操作">撤销暂存操作<a href="https://www.eurekashadow.xin/blog/LearnGit#%E6%92%A4%E9%94%80%E6%9A%82%E5%AD%98%E6%93%8D%E4%BD%9C" class="hash-link" aria-label="撤销暂存操作的直接链接" title="撤销暂存操作的直接链接">​</a></h3>
<ul>
<li><code>git reset HEAD &lt;文件名&gt;</code>：取消某个文件的暂存状态。</li>
</ul>
<p>示例：</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">git reset HEAD README.md</span><br></span></code></pre></div></div>
<p>📌 常用于误将某些文件加入暂存区后想将其移出的情况。</p>
<hr>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="放弃本地修改">放弃本地修改<a href="https://www.eurekashadow.xin/blog/LearnGit#%E6%94%BE%E5%BC%83%E6%9C%AC%E5%9C%B0%E4%BF%AE%E6%94%B9" class="hash-link" aria-label="放弃本地修改的直接链接" title="放弃本地修改的直接链接">​</a></h3>
<ul>
<li><code>git restore &lt;文件名&gt;</code>：放弃对该文件的所有本地修改。</li>
</ul>
<p>⚠️ <strong>注意</strong>：该操作不可逆，请确保确实不需要这些修改后再执行。</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="分支切换与紧急修复流程">分支切换与紧急修复流程<a href="https://www.eurekashadow.xin/blog/LearnGit#%E5%88%86%E6%94%AF%E5%88%87%E6%8D%A2%E4%B8%8E%E7%B4%A7%E6%80%A5%E4%BF%AE%E5%A4%8D%E6%B5%81%E7%A8%8B" class="hash-link" aria-label="分支切换与紧急修复流程的直接链接" title="分支切换与紧急修复流程的直接链接">​</a></h2>
<p>假设你现在正在解决问题53，当前处于 <code>iss53</code> 分支上，而 <code>main</code> 分支突然出现了问题，需要马上修复。</p>
<p>✅ <strong>处理步骤如下</strong>：</p>
<ol>
<li>
<p>切换回 <code>main</code> 分支：</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">git switch main</span><br></span></code></pre></div></div>
</li>
<li>
<p>创建一个临时分支 <code>hotfix</code> 来修复问题：</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">git checkout -b hotfix</span><br></span></code></pre></div></div>
</li>
<li>
<p>修复完成后，提交更改。</p>
</li>
<li>
<p>切换回 <code>main</code> 分支并合并修复内容：</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">git checkout main</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git merge hotfix</span><br></span></code></pre></div></div>
</li>
<li>
<p>删除临时分支（问题已修复）：</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">git branch -d hotfix</span><br></span></code></pre></div></div>
</li>
<li>
<p>回到 <code>iss53</code> 分支继续开发：</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">git switch iss53</span><br></span></code></pre></div></div>
</li>
</ol>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="合并冲突说明及解决方法">合并冲突说明及解决方法<a href="https://www.eurekashadow.xin/blog/LearnGit#%E5%90%88%E5%B9%B6%E5%86%B2%E7%AA%81%E8%AF%B4%E6%98%8E%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95" class="hash-link" aria-label="合并冲突说明及解决方法的直接链接" title="合并冲突说明及解决方法的直接链接">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-冲突原因">⚠️ 冲突原因<a href="https://www.eurekashadow.xin/blog/LearnGit#%EF%B8%8F-%E5%86%B2%E7%AA%81%E5%8E%9F%E5%9B%A0" class="hash-link" aria-label="⚠️ 冲突原因的直接链接" title="⚠️ 冲突原因的直接链接">​</a></h3>
<p>当 <code>main</code> 和 <code>iss53</code> 分支<strong>同时修改了同一个文件的相同部分</strong>（例如 <code>README.md</code>），Git 无法判断应该保留哪边的内容，就会提示冲突。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="示例场景">示例场景<a href="https://www.eurekashadow.xin/blog/LearnGit#%E7%A4%BA%E4%BE%8B%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="示例场景的直接链接" title="示例场景的直接链接">​</a></h3>
<ul>
<li>在 <code>main</code> 分支下修改了 <code>README.md</code> 并提交；</li>
<li>然后切换到 <code>iss53</code> 分支，在此分支下也修改了 <code>README.md</code> 并提交；</li>
<li>最后切换回 <code>main</code> 分支，尝试合并 <code>iss53</code>，出现冲突。</li>
</ul>
<hr>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-解决步骤">🔧 解决步骤<a href="https://www.eurekashadow.xin/blog/LearnGit#-%E8%A7%A3%E5%86%B3%E6%AD%A5%E9%AA%A4" class="hash-link" aria-label="🔧 解决步骤的直接链接" title="🔧 解决步骤的直接链接">​</a></h3>
<ol>
<li>
<p>打开冲突文件（如 <code>README.md</code>），你会看到类似如下内容：</p>
<div class="language-html codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-html codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">This is the content from main.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">=======</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">This is the content from iss53.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&gt;&gt;&gt;&gt;&gt;&gt;&gt; iss53</span><br></span></code></pre></div></div>
</li>
<li>
<p>手动编辑文件，选择你想要保留的内容，删除冲突标记。</p>
</li>
<li>
<p>添加修改后的文件到暂存区：</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">git add README.md</span><br></span></code></pre></div></div>
</li>
<li>
<p>提交合并结果：</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">git commit -m "Fixed conflict"</span><br></span></code></pre></div></div>
</li>
</ol>
<hr>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-如何避免冲突">💡 如何避免冲突？<a href="https://www.eurekashadow.xin/blog/LearnGit#-%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E5%86%B2%E7%AA%81" class="hash-link" aria-label="💡 如何避免冲突？的直接链接" title="💡 如何避免冲突？的直接链接">​</a></h3>
<ul>
<li><strong>保持分支同步</strong>：在修改前先拉取最新代码；</li>
<li><strong>及时合并分支</strong>：避免两个分支长时间不合并；</li>
<li><strong>明确分工</strong>：团队协作时尽量避免多人修改同一文件的关键区域；</li>
<li><strong>使用 Pull Request 审查机制</strong>：提前发现潜在冲突。</li>
</ul>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="-实际测试说明">✅ 实际测试说明<a href="https://www.eurekashadow.xin/blog/LearnGit#-%E5%AE%9E%E9%99%85%E6%B5%8B%E8%AF%95%E8%AF%B4%E6%98%8E" class="hash-link" aria-label="✅ 实际测试说明的直接链接" title="✅ 实际测试说明的直接链接">​</a></h2>
<p>这是一个测试内容，当前文本是在 <code>iss53</code> 分支下编写完成的。之前已经与 <code>main</code> 分支合并。</p>
<p>按照预期，切换回 <code>main</code> 分支后，再合并 <code>iss53</code> 分支不会产生冲突，也就是说，在 <code>main</code> 分支下也能看到这段新增内容。</p>]]></content:encoded>
            <category>Git</category>
        </item>
        <item>
            <title><![CDATA[合并两个有序数组]]></title>
            <link>https://www.eurekashadow.xin/blog/LeetCode88</link>
            <guid>https://www.eurekashadow.xin/blog/LeetCode88</guid>
            <pubDate>Fri, 04 Jul 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[力扣面试经典——88题]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="力扣面试经典88题"><span class="B2_JnYG"><a href="https://leetcode.cn/problems/merge-sorted-array/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer" title="力扣">力扣面试经典——88题</a></span><a href="https://www.eurekashadow.xin/blog/LeetCode88#%E5%8A%9B%E6%89%A3%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B888%E9%A2%98" class="hash-link" aria-label="力扣面试经典88题的直接链接" title="力扣面试经典88题的直接链接">​</a></h3>
<p>给你两个按<strong>非递减顺序</strong>排列的整数数组 <code>nums1</code> 和 <code>nums2</code>，另有两个整数 <code>m</code> 和 <code>n</code>，分别表示 <code>nums1</code> 和 <code>nums2</code> 中的元素数目。</p>
<p>请你合并 <code>nums2</code> 到 <code>nums1</code> 中，使合并后的数组同样按<strong>非递减顺序</strong>排列。</p>
<blockquote>
<p>⚠️ 注意：最终，合并后数组不应由函数返回，而是存储在数组 <code>nums1</code> 中。为了应对这种情况，<code>nums1</code> 的初始长度为 <code>m + n</code>，其中前 <code>m</code> 个元素表示应合并的元素，后 <code>n</code> 个元素为 <code>0</code>，应忽略。<code>nums2</code> 的长度为 <code>n</code>。</p>
</blockquote>
<hr>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-示例说明">🧪 示例说明<a href="https://www.eurekashadow.xin/blog/LeetCode88#-%E7%A4%BA%E4%BE%8B%E8%AF%B4%E6%98%8E" class="hash-link" aria-label="🧪 示例说明的直接链接" title="🧪 示例说明的直接链接">​</a></h3>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="示例-1">示例 1：<a href="https://www.eurekashadow.xin/blog/LeetCode88#%E7%A4%BA%E4%BE%8B-1" class="hash-link" aria-label="示例 1：的直接链接" title="示例 1：的直接链接">​</a></h4>
<blockquote>
<p>输入：<br>
<code>nums1 = [1, 2, 3, 0, 0, 0]</code>, <code>m = 3</code><br>
<code>nums2 = [2, 5, 6]</code>, <code>n = 3</code></p>
<p>输出：<br>
<code>[1, 2, 2, 3, 5, 6]</code></p>
<p>解释：需要合并 <code>[1,2,3]</code> 和 <code>[2,5,6]</code>。<br>
<!-- -->合并结果是 <code>[1, 2, 2, 3, 5, 6]</code>，其中斜体加粗标注的为 <code>nums1</code> 中的原始元素。</p>
</blockquote>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="示例-2">示例 2：<a href="https://www.eurekashadow.xin/blog/LeetCode88#%E7%A4%BA%E4%BE%8B-2" class="hash-link" aria-label="示例 2：的直接链接" title="示例 2：的直接链接">​</a></h4>
<blockquote>
<p>输入：<br>
<code>nums1 = [1]</code>, <code>m = 1</code><br>
<code>nums2 = []</code>, <code>n = 0</code></p>
<p>输出：<br>
<code>[1]</code></p>
</blockquote>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="示例-3">示例 3：<a href="https://www.eurekashadow.xin/blog/LeetCode88#%E7%A4%BA%E4%BE%8B-3" class="hash-link" aria-label="示例 3：的直接链接" title="示例 3：的直接链接">​</a></h4>
<blockquote>
<p>输入：<br>
<code>nums1 = [0]</code>, <code>m = 0</code><br>
<code>nums2 = [1]</code>, <code>n = 1</code></p>
<p>输出：<br>
<code>[1]</code></p>
<p>解释：因为 <code>m = 0</code>，所以 <code>nums1</code> 中没有有效元素。<code>0</code> 只是为了确保合并结果可以顺利存放到 <code>nums1</code> 中。</p>
</blockquote>
<hr>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-提示">🔍 提示：<a href="https://www.eurekashadow.xin/blog/LeetCode88#-%E6%8F%90%E7%A4%BA" class="hash-link" aria-label="🔍 提示：的直接链接" title="🔍 提示：的直接链接">​</a></h3>
<ul>
<li><code>nums1.length == m + n</code></li>
<li><code>nums2.length == n</code></li>
<li><code>0 &lt;= m, n &lt;= 200</code></li>
<li><code>-10^9 &lt;= nums1[i], nums2[j] &lt;= 10^9</code></li>
</ul>
<hr>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-进阶挑战">🚀 进阶挑战：<a href="https://www.eurekashadow.xin/blog/LeetCode88#-%E8%BF%9B%E9%98%B6%E6%8C%91%E6%88%98" class="hash-link" aria-label="🚀 进阶挑战：的直接链接" title="🚀 进阶挑战：的直接链接">​</a></h3>
<p>你可以设计实现一个时间复杂度为 <code>O(m + n)</code> 的算法解决此问题吗？</p>
<hr>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-参考代码">💡 参考代码：<a href="https://www.eurekashadow.xin/blog/LeetCode88#-%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81" class="hash-link" aria-label="💡 参考代码：的直接链接" title="💡 参考代码：的直接链接">​</a></h3>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 合并两个已排序的数组</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 将 nums2 合并到 nums1 中，结果存储在 nums1 内</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param nums1     目标数组，预分配了足够空间 (长度为 m+n)</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param nums1Size nums1 数组的总长度 (等于 m+n)</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param m         nums1 中有效元素的个数</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param nums2     源数组，包含需要合并的元素</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param nums2Size nums2 数组的长度 (等于 n)</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param n         nums2 中元素的个数</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">merge</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> nums1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> nums1Size</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> m</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> nums2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> nums2Size</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> n</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 初始化三个指针：i指向nums1有效元素末尾，j指向nums2末尾，k指向合并结果末尾</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> m </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// nums1有效元素的最后一个索引</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> j </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> n </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// nums2的最后一个索引</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> k </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> m </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> n </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 合并后数组的最后一个索引</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 从后往前比较两个数组的元素，将较大者放到nums1的末尾</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> j </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">nums1</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> nums2</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">j</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            nums1</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">k</span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nums1</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// nums1[i]较大，将其放到位置k</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            nums1</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">k</span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nums2</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">j</span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// nums2[j]较大或相等，将其放到位置k</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 如果nums2中还有剩余元素，复制到nums1中</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 注意：如果nums1有剩余元素(i&gt;=0)，它们已经在正确位置，无需移动</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">j </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        nums1</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">k</span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nums2</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">j</span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-总结">📖 总结：<a href="https://www.eurekashadow.xin/blog/LeetCode88#-%E6%80%BB%E7%BB%93" class="hash-link" aria-label="📖 总结：的直接链接" title="📖 总结：的直接链接">​</a></h3>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>点击展开题目总结</summary><div><div class="collapsibleContent_i85q"><h1>🤔 合并两个有序数组</h1><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1️⃣-题目核心信息">1️⃣ 题目核心信息<a href="https://www.eurekashadow.xin/blog/LeetCode88#1%EF%B8%8F%E2%83%A3-%E9%A2%98%E7%9B%AE%E6%A0%B8%E5%BF%83%E4%BF%A1%E6%81%AF" class="hash-link" aria-label="1️⃣ 题目核心信息的直接链接" title="1️⃣ 题目核心信息的直接链接">​</a></h2><p>🎯 <strong>功能描述</strong>：将两个已排序的数组合并成一个有序数组，结果存储在第一个数组中</p><p>📥 <strong>输入输出</strong>：</p><ul>
<li><strong>输入</strong>：两个已排序数组 <code>nums1</code> 和 <code>nums2</code>，以及它们的有效元素个数 <code>m</code> 和 <code>n</code></li>
<li><strong>输出</strong>：无返回值，合并结果直接存储在 <code>nums1</code> 中</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2️⃣-实现原理">2️⃣ 实现原理<a href="https://www.eurekashadow.xin/blog/LeetCode88#2%EF%B8%8F%E2%83%A3-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86" class="hash-link" aria-label="2️⃣ 实现原理的直接链接" title="2️⃣ 实现原理的直接链接">​</a></h2><p>💡 <strong>核心思路</strong>：采用从后往前的双指针技术，避免覆盖未处理的数据</p><p>📋 <strong>实现步骤</strong>：</p><ol>
<li>设置三个指针分别指向两个数组有效元素末尾和合并结果末尾</li>
<li>从后往前比较两个数组的元素，将较大者放到合并位置</li>
<li>处理剩余未合并的元素</li>
</ol><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3️⃣-关键点解析">3️⃣ 关键点解析<a href="https://www.eurekashadow.xin/blog/LeetCode88#3%EF%B8%8F%E2%83%A3-%E5%85%B3%E9%94%AE%E7%82%B9%E8%A7%A3%E6%9E%90" class="hash-link" aria-label="3️⃣ 关键点解析的直接链接" title="3️⃣ 关键点解析的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-为什么需要两个循环">🔁 为什么需要两个循环<a href="https://www.eurekashadow.xin/blog/LeetCode88#-%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E4%B8%A4%E4%B8%AA%E5%BE%AA%E7%8E%AF" class="hash-link" aria-label="🔁 为什么需要两个循环的直接链接" title="🔁 为什么需要两个循环的直接链接">​</a></h3><p>第一个循环会在<strong>任意一个数组处理完</strong>时停止，但另一个数组可能还有剩余元素需要处理。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="-具体例子">📌 具体例子<a href="https://www.eurekashadow.xin/blog/LeetCode88#-%E5%85%B7%E4%BD%93%E4%BE%8B%E5%AD%90" class="hash-link" aria-label="📌 具体例子的直接链接" title="📌 具体例子的直接链接">​</a></h4><p><code>nums1 = [4,5,6,0,0,0] (m=3) nums2 = [1,2,3] (n=3)</code></p><p>🔄 <strong>执行过程</strong>：</p><ol>
<li>比较 6 和 3 → nums1[5] = 6</li>
<li>比较 5 和 3 → nums1[4] = 5</li>
<li>比较 4 和 3 → nums1[3] = 4</li>
</ol><p>此时第一个循环结束，但nums2中[1,2,3]还没有被处理。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="-关键理解">⚡ 关键理解<a href="https://www.eurekashadow.xin/blog/LeetCode88#-%E5%85%B3%E9%94%AE%E7%90%86%E8%A7%A3" class="hash-link" aria-label="⚡ 关键理解的直接链接" title="⚡ 关键理解的直接链接">​</a></h4><p>当第一个循环结束时，有两种可能情况：</p><ul>
<li><strong>i &lt; 0 但 j &gt;= 0</strong>：nums1处理完了，但nums2还有剩余元素需要复制</li>
<li><strong>j &lt; 0 但 i &gt;= 0</strong>：nums2处理完了，但nums1还有剩余元素</li>
</ul><p>对于第二种情况，nums1的剩余元素<strong>已经处于正确位置</strong>，无需移动，所以不需要额外处理。</p><p>因此需要第二个循环来处理nums2的剩余元素。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-代码技巧">🎯 代码技巧<a href="https://www.eurekashadow.xin/blog/LeetCode88#-%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7" class="hash-link" aria-label="🎯 代码技巧的直接链接" title="🎯 代码技巧的直接链接">​</a></h3><ul>
<li>从后往前遍历避免了覆盖 <code>nums1</code> 中未处理的元素</li>
<li>只需处理 <code>nums2</code> 的剩余元素，因为 <code>nums1</code> 的剩余元素已在正确位置</li>
<li>使用 <code>--</code> 操作符在赋值的同时移动指针，代码更简洁</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4️⃣-使用场景">4️⃣ 使用场景<a href="https://www.eurekashadow.xin/blog/LeetCode88#4%EF%B8%8F%E2%83%A3-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="4️⃣ 使用场景的直接链接" title="4️⃣ 使用场景的直接链接">​</a></h2><p>✅ <strong>适用情况</strong>：</p><ul>
<li>需要合并两个已排序的数组</li>
<li>希望在原地进行合并操作以节省空间</li>
<li>处理数组相关的归并排序问题</li>
</ul><p>⚠️ <strong>前提条件</strong>：</p><ul>
<li><code>nums1</code> 必须有足够空间容纳合并结果（至少 <code>m+n</code> 个元素）</li>
<li>两个输入数组都已按非递减顺序排序</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5️⃣-复杂度分析">5️⃣ 复杂度分析<a href="https://www.eurekashadow.xin/blog/LeetCode88#5%EF%B8%8F%E2%83%A3-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90" class="hash-link" aria-label="5️⃣ 复杂度分析的直接链接" title="5️⃣ 复杂度分析的直接链接">​</a></h2><p>⏱️ <strong>时间复杂度</strong>：O(m + n)，每个元素最多被访问一次</p><p>💾 <strong>空间复杂度</strong>：O(1)，只使用了常数个额外变量</p><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6️⃣-注意事项">6️⃣ 注意事项<a href="https://www.eurekashadow.xin/blog/LeetCode88#6%EF%B8%8F%E2%83%A3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="6️⃣ 注意事项的直接链接" title="6️⃣ 注意事项的直接链接">​</a></h2><p>🚩 <strong>边界情况</strong>：</p><ul>
<li><code>m = 0</code>：<code>nums1</code> 为空数组</li>
<li><code>n = 0</code>：<code>nums2</code> 为空数组</li>
<li>其中一个数组的所有元素都比另一个数组小</li>
</ul><p>💥 <strong>易错点</strong>：</p><ul>
<li>忘记处理剩余元素，特别是第二个循环</li>
<li>指针边界条件判断错误</li>
<li>从前往后合并导致数据被覆盖</li>
</ul></div></div></details>]]></content:encoded>
            <category>数组</category>
        </item>
    </channel>
</rss>