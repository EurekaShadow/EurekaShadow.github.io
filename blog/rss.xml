<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="rss.xsl"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>我的网站 Blog</title>
        <link>https://www.eurekashadow.xin/blog</link>
        <description>我的网站 Blog</description>
        <lastBuildDate>Fri, 01 Aug 2025 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>zh-Hans</language>
        <item>
            <title><![CDATA[买入股票最佳时机]]></title>
            <link>https://www.eurekashadow.xin/blog/LeetCode121</link>
            <guid>https://www.eurekashadow.xin/blog/LeetCode121</guid>
            <pubDate>Fri, 01 Aug 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[力扣面试经典——121题]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="力扣面试经典121题"><span class="B2_JnYG"><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/description/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer" title="力扣">力扣面试经典——121题</a></span><a href="https://www.eurekashadow.xin/blog/LeetCode121#%E5%8A%9B%E6%89%A3%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B8121%E9%A2%98" class="hash-link" aria-label="力扣面试经典121题的直接链接" title="力扣面试经典121题的直接链接">​</a></h3>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-参考代码">💡 参考代码：<a href="https://www.eurekashadow.xin/blog/LeetCode121#-%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81" class="hash-link" aria-label="💡 参考代码：的直接链接" title="💡 参考代码：的直接链接">​</a></h3>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 计算股票交易的最大利润</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 给定一个数组，它的第i个元素是一支给定股票第i天的价格。</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 只能选择某一天买入股票，并选择在未来的某一个不同的日子卖出该股票。</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 设计一个算法来计算所能获取的最大利润。</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param prices 整数数组，表示股票每天的价格</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param pricesSize 数组prices的长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 返回能获取的最大利润，如果不能获取任何利润则返回0</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 示例:</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 输入: [7,1,5,3,6,4]</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 输出: 5</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 解释: 在第2天买入(价格=1)，在第5天卖出(价格=6)，利润=6-1=5</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 输入: [7,6,4,3,1]</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 输出: 0</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 解释: 价格持续下跌，无法获得利润</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 时间复杂度: O(n)</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 空间复杂度: O(1)</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">maxProfit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> prices</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> pricesSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 如果天数少于2天，无法完成交易，返回0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">pricesSize </span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 初始化最低价格为第一天的价格</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> minPrice </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> prices</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 初始化最大利润为0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> maxProfit </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 从第二天开始遍历所有价格</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> pricesSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 如果当前价格比记录的最低价格更低，则更新最低价格</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">prices</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> minPrice</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            minPrice </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> prices</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 如果当前价格与最低价格的差值大于记录的最大利润，则更新最大利润</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">prices</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> minPrice </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> maxProfit</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            maxProfit </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> prices</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> minPrice</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> maxProfit</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-总结">📖 总结：<a href="https://www.eurekashadow.xin/blog/LeetCode121#-%E6%80%BB%E7%BB%93" class="hash-link" aria-label="📖 总结：的直接链接" title="📖 总结：的直接链接">​</a></h3>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>点击展开题目总结</summary><div><div class="collapsibleContent_i85q"><h1>🤔 买卖股票的最佳时机</h1><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1️⃣-题目核心信息">1️⃣ 题目核心信息<a href="https://www.eurekashadow.xin/blog/LeetCode121#1%EF%B8%8F%E2%83%A3-%E9%A2%98%E7%9B%AE%E6%A0%B8%E5%BF%83%E4%BF%A1%E6%81%AF" class="hash-link" aria-label="1️⃣ 题目核心信息的直接链接" title="1️⃣ 题目核心信息的直接链接">​</a></h2><p>🎯 <strong>功能描述</strong>：给定股票价格数组，找出买入和卖出股票能获得的最大利润，只能进行一次交易且卖出日必须在买入日之后</p><p>📥 <strong>输入输出</strong>：</p><ul>
<li><strong>输入</strong>：int* prices（股票价格数组）, int pricesSize（数组长度）</li>
<li><strong>输出</strong>：int（最大利润值，无法获利时返回0）</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2️⃣-实现原理">2️⃣ 实现原理<a href="https://www.eurekashadow.xin/blog/LeetCode121#2%EF%B8%8F%E2%83%A3-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86" class="hash-link" aria-label="2️⃣ 实现原理的直接链接" title="2️⃣ 实现原理的直接链接">​</a></h2><p>💡 <strong>核心思路</strong>：一次遍历动态维护最低买入价格和最大利润</p><p>📋 <strong>实现步骤</strong>：</p><ol>
<li>初始化最低价格为第一天价格，最大利润为0</li>
<li>从第二天开始遍历价格数组</li>
<li>若当前价格低于最低价格，则更新最低价格</li>
<li>否则计算当前卖出可得利润，若大于最大利润则更新最大利润</li>
<li>遍历结束返回最大利润</li>
</ol><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3️⃣-关键点解析">3️⃣ 关键点解析<a href="https://www.eurekashadow.xin/blog/LeetCode121#3%EF%B8%8F%E2%83%A3-%E5%85%B3%E9%94%AE%E7%82%B9%E8%A7%A3%E6%9E%90" class="hash-link" aria-label="3️⃣ 关键点解析的直接链接" title="3️⃣ 关键点解析的直接链接">​</a></h2><p>原始思路是使用快慢指针枚举所有买入卖出组合，通过两层循环计算每种可能的利润并取最大值。但该方法时间复杂度为O(n²)。最优解通过记录到目前为止的最低价格和最大利润，只需一次遍历就能得到结果，时间复杂度优化为O(n)。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-代码技巧">🎯 代码技巧<a href="https://www.eurekashadow.xin/blog/LeetCode121#-%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7" class="hash-link" aria-label="🎯 代码技巧的直接链接" title="🎯 代码技巧的直接链接">​</a></h3><ul>
<li>使用else if避免不必要的利润计算</li>
<li>初始化最低价格为第一个元素，从第二个元素开始遍历</li>
<li>利用贪心思想，始终维护到目前为止的最优解</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4️⃣-使用场景">4️⃣ 使用场景<a href="https://www.eurekashadow.xin/blog/LeetCode121#4%EF%B8%8F%E2%83%A3-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="4️⃣ 使用场景的直接链接" title="4️⃣ 使用场景的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-适用情况">✅ 适用情况：<a href="https://www.eurekashadow.xin/blog/LeetCode121#-%E9%80%82%E7%94%A8%E6%83%85%E5%86%B5" class="hash-link" aria-label="✅ 适用情况：的直接链接" title="✅ 适用情况：的直接链接">​</a></h3><ul>
<li>股票交易利润最大化问题</li>
<li>需要找出数组中两个元素的最大正向差值</li>
<li>在线算法需要实时更新最优解</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-前提条件">⚠️ 前提条件：<a href="https://www.eurekashadow.xin/blog/LeetCode121#%EF%B8%8F-%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6" class="hash-link" aria-label="⚠️ 前提条件：的直接链接" title="⚠️ 前提条件：的直接链接">​</a></h3><ul>
<li>卖出日必须在买入日之后</li>
<li>只能进行一次交易</li>
<li>数组元素为非负整数</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5️⃣-复杂度分析">5️⃣ 复杂度分析<a href="https://www.eurekashadow.xin/blog/LeetCode121#5%EF%B8%8F%E2%83%A3-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90" class="hash-link" aria-label="5️⃣ 复杂度分析的直接链接" title="5️⃣ 复杂度分析的直接链接">​</a></h2><ul>
<li>
<p>⏱️ 时间复杂度：O(n)，只需遍历数组一次</p>
</li>
<li>
<p>💾 空间复杂度：O(1)，只使用常数个额外变量</p>
</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6️⃣-注意事项">6️⃣ 注意事项<a href="https://www.eurekashadow.xin/blog/LeetCode121#6%EF%B8%8F%E2%83%A3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="6️⃣ 注意事项的直接链接" title="6️⃣ 注意事项的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-边界情况">🚩 边界情况：<a href="https://www.eurekashadow.xin/blog/LeetCode121#-%E8%BE%B9%E7%95%8C%E6%83%85%E5%86%B5" class="hash-link" aria-label="🚩 边界情况：的直接链接" title="🚩 边界情况：的直接链接">​</a></h3><ul>
<li>数组长度为0或1时，无法完成交易</li>
<li>价格持续下跌时，利润为0</li>
<li>数组为空指针的情况</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-易错点">💥 易错点：<a href="https://www.eurekashadow.xin/blog/LeetCode121#-%E6%98%93%E9%94%99%E7%82%B9" class="hash-link" aria-label="💥 易错点：的直接链接" title="💥 易错点：的直接链接">​</a></h3><ul>
<li>忘记处理数组长度小于2的边界情况</li>
<li>错误地允许在买入前卖出</li>
<li>没有正确初始化最小价格和最大利润</li>
</ul></div></div></details>]]></content:encoded>
            <category>数组</category>
        </item>
        <item>
            <title><![CDATA[轮转数组]]></title>
            <link>https://www.eurekashadow.xin/blog/LeetCode189</link>
            <guid>https://www.eurekashadow.xin/blog/LeetCode189</guid>
            <pubDate>Fri, 01 Aug 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[力扣面试经典——189题]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="力扣面试经典189题"><span class="B2_JnYG"><a href="https://leetcode.cn/problems/rotate-array/description/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer" title="力扣">力扣面试经典——189题</a></span><a href="https://www.eurekashadow.xin/blog/LeetCode189#%E5%8A%9B%E6%89%A3%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B8189%E9%A2%98" class="hash-link" aria-label="力扣面试经典189题的直接链接" title="力扣面试经典189题的直接链接">​</a></h3>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-参考代码">💡 参考代码：<a href="https://www.eurekashadow.xin/blog/LeetCode189#-%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81" class="hash-link" aria-label="💡 参考代码：的直接链接" title="💡 参考代码：的直接链接">​</a></h3>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @brief 反转数组中指定范围的元素</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param nums 指向整型数组的指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param start 反转范围的起始索引（包含）</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param end 反转范围的结束索引（包含）</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @details 使用双指针法，从两端向中间交换元素，实现数组部分反转</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          时间复杂度: O(n)，空间复杂度: O(1)</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">reverse</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> start</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> end</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">start </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> end</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> temp </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">start</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">start</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">end</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">end</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> temp</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        start</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        end</span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @brief 将数组中的元素向右轮转 k 个位置</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param nums 指向整型数组的指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param numsSize 数组的长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param k 轮转的步数（非负数）</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @details 使用三步反转法实现数组轮转：</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          1. 反转整个数组</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          2. 反转前 k 个元素</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          3. 反转后 n-k 个元素</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          例如: nums = [1,2,3,4,5,6,7], k = 3</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          step1: [7,6,5,4,3,2,1] 反转整个数组</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          step2: [5,6,7,4,3,2,1] 反转前3个元素</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          step3: [5,6,7,1,2,3,4] 反转后4个元素</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          时间复杂度: O(n)，空间复杂度: O(1)</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rotate</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> k</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 处理k大于数组长度的情况，避免不必要的轮转</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    k </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> k </span><span class="token operator" style="color:#393A34">%</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 三步反转法</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">reverse</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">nums</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> numsSize </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// 反转整个数组</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">reverse</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">nums</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> k </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 反转前k个元素</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">reverse</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">nums</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> k</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> numsSize </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">// 反转后n-k个元素</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-总结">📖 总结：<a href="https://www.eurekashadow.xin/blog/LeetCode189#-%E6%80%BB%E7%BB%93" class="hash-link" aria-label="📖 总结：的直接链接" title="📖 总结：的直接链接">​</a></h3>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>点击展开题目总结</summary><div><div class="collapsibleContent_i85q"><h1>🤔 轮转数组</h1><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1️⃣-题目核心信息">1️⃣ 题目核心信息<a href="https://www.eurekashadow.xin/blog/LeetCode189#1%EF%B8%8F%E2%83%A3-%E9%A2%98%E7%9B%AE%E6%A0%B8%E5%BF%83%E4%BF%A1%E6%81%AF" class="hash-link" aria-label="1️⃣ 题目核心信息的直接链接" title="1️⃣ 题目核心信息的直接链接">​</a></h2><p>🎯 <strong>功能描述</strong>：将数组中的元素向右轮转 k 个位置，实现循环移位</p><p>📥 <strong>输入输出</strong>：</p><ul>
<li><strong>输入</strong>：<!-- -->
<ul>
<li><code>nums</code>: 指向整型数组的指针</li>
<li><code>numsSize</code>: 数组的长度</li>
<li><code>k</code>: 轮转的步数（非负数）</li>
</ul>
</li>
<li><strong>输出</strong>：无返回值，直接在原数组上进行修改</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2️⃣-实现原理">2️⃣ 实现原理<a href="https://www.eurekashadow.xin/blog/LeetCode189#2%EF%B8%8F%E2%83%A3-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86" class="hash-link" aria-label="2️⃣ 实现原理的直接链接" title="2️⃣ 实现原理的直接链接">​</a></h2><p>💡 <strong>核心思路</strong>：使用三步反转法（三次数组反转）实现数组轮转</p><p>📋 <strong>实现步骤</strong>：</p><ol>
<li>首先对 k 取模，处理 k 大于数组长度的情况</li>
<li>反转整个数组</li>
<li>反转前 k 个元素</li>
<li>反转后 n-k 个元素</li>
</ol><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3️⃣-关键点解析">3️⃣ 关键点解析<a href="https://www.eurekashadow.xin/blog/LeetCode189#3%EF%B8%8F%E2%83%A3-%E5%85%B3%E9%94%AE%E7%82%B9%E8%A7%A3%E6%9E%90" class="hash-link" aria-label="3️⃣ 关键点解析的直接链接" title="3️⃣ 关键点解析的直接链接">​</a></h2><p>原始思路是模拟轮转过程，每次将数组整体右移一位，重复k次。这种方法的时间复杂度是O(n×k)，当k很大时效率较低。而最优解使用三步反转法，时间复杂度仅为O(n)。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-代码技巧">🎯 代码技巧<a href="https://www.eurekashadow.xin/blog/LeetCode189#-%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7" class="hash-link" aria-label="🎯 代码技巧的直接链接" title="🎯 代码技巧的直接链接">​</a></h3><ul>
<li>使用取模运算 <code>k = k % numsSize</code> 优化轮转次数</li>
<li>采用双指针法实现数组反转，空间复杂度O(1)</li>
<li>三步反转法的巧妙应用，将轮转问题转化为反转问题</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4️⃣-使用场景">4️⃣ 使用场景<a href="https://www.eurekashadow.xin/blog/LeetCode189#4%EF%B8%8F%E2%83%A3-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="4️⃣ 使用场景的直接链接" title="4️⃣ 使用场景的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-适用情况">✅ 适用情况：<a href="https://www.eurekashadow.xin/blog/LeetCode189#-%E9%80%82%E7%94%A8%E6%83%85%E5%86%B5" class="hash-link" aria-label="✅ 适用情况：的直接链接" title="✅ 适用情况：的直接链接">​</a></h3><ul>
<li>需要实现数组循环移位操作</li>
<li>对空间复杂度有严格要求的场景</li>
<li>需要原地修改数组的场合</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-前提条件">⚠️ 前提条件：<a href="https://www.eurekashadow.xin/blog/LeetCode189#%EF%B8%8F-%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6" class="hash-link" aria-label="⚠️ 前提条件：的直接链接" title="⚠️ 前提条件：的直接链接">​</a></h3><ul>
<li>数组不能为空指针</li>
<li>数组长度必须大于0</li>
<li>k值必须为非负数</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5️⃣-复杂度分析">5️⃣ 复杂度分析<a href="https://www.eurekashadow.xin/blog/LeetCode189#5%EF%B8%8F%E2%83%A3-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90" class="hash-link" aria-label="5️⃣ 复杂度分析的直接链接" title="5️⃣ 复杂度分析的直接链接">​</a></h2><ul>
<li>
<p>⏱️ 时间复杂度：O(n)，其中n为数组长度，需要遍历数组常数次</p>
</li>
<li>
<p>💾 空间复杂度：O(1)，只使用了常数级别的额外空间</p>
</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6️⃣-注意事项">6️⃣ 注意事项<a href="https://www.eurekashadow.xin/blog/LeetCode189#6%EF%B8%8F%E2%83%A3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="6️⃣ 注意事项的直接链接" title="6️⃣ 注意事项的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-边界情况">🚩 边界情况：<a href="https://www.eurekashadow.xin/blog/LeetCode189#-%E8%BE%B9%E7%95%8C%E6%83%85%E5%86%B5" class="hash-link" aria-label="🚩 边界情况：的直接链接" title="🚩 边界情况：的直接链接">​</a></h3><ul>
<li>k等于0或数组长度的倍数时，数组保持不变</li>
<li>数组长度为1时，无论k为何值数组都保持不变</li>
<li>k大于数组长度时，需要取模运算避免多余操作</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-易错点">💥 易错点：<a href="https://www.eurekashadow.xin/blog/LeetCode189#-%E6%98%93%E9%94%99%E7%82%B9" class="hash-link" aria-label="💥 易错点：的直接链接" title="💥 易错点：的直接链接">​</a></h3><ul>
<li>忘记对k取模导致不必要的计算</li>
<li>反转时边界条件处理错误</li>
<li>混淆左转和右转的方向</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="7️⃣-补充说明">7️⃣ 补充说明<a href="https://www.eurekashadow.xin/blog/LeetCode189#7%EF%B8%8F%E2%83%A3-%E8%A1%A5%E5%85%85%E8%AF%B4%E6%98%8E" class="hash-link" aria-label="7️⃣ 补充说明的直接链接" title="7️⃣ 补充说明的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="为什么需要-k--k--numssize-操作">为什么需要 k = k % numsSize 操作？🤔<a href="https://www.eurekashadow.xin/blog/LeetCode189#%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81-k--k--numssize-%E6%93%8D%E4%BD%9C" class="hash-link" aria-label="为什么需要 k = k % numsSize 操作？🤔的直接链接" title="为什么需要 k = k % numsSize 操作？🤔的直接链接">​</a></h3><p><strong>问题背景</strong></p><p>当 <code>k</code> 大于数组长度时，实际上会发生重复的轮转。这个操作是为了避免不必要的重复计算。</p><p><strong>举例说明</strong></p><p>假设我们有一个长度为 7 的数组：<code>[1,2,3,4,5,6,7]</code></p><table><thead><tr><th>k 值</th><th>实际效果</th><th>说明</th></tr></thead><tbody><tr><td>k=3</td><td><code>[5,6,7,1,2,3,4]</code></td><td>轮转3步</td></tr><tr><td>k=10</td><td><code>[5,6,7,1,2,3,4]</code></td><td>10 = 7+3，相当于轮转3步</td></tr><tr><td>k=17</td><td><code>[5,6,7,1,2,3,4]</code></td><td>17 = 7×2+3，也相当于轮转3步</td></tr></tbody></table><p><strong>数学原理</strong></p><p>对于长度为 <code>n</code> 的数组，轮转 <code>k</code> 步和轮转 <code>k % n</code> 步的效果完全相同。</p><p>这是因为：</p><ul>
<li>轮转 <code>n</code> 步会让数组回到原始状态</li>
<li>所以轮转 <code>k</code> 步 = 轮转 <code>(k/n) × n + k%n</code> 步 = 轮转 <code>k%n</code> 步</li>
</ul><p><strong>优化意义</strong></p><p><strong>性能优化</strong>：避免不必要的重复轮转</p><ul>
<li>如果没有取模，<code>k=1000000</code>时就要执行1000000次操作</li>
<li>取模后，只需要执行 <code>1000000%7 = 2</code> 次有效操作</li>
</ul><p><strong>结果正确性</strong>：确保算法在任何 k 值下都能正确工作</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="8⃣-其他解法">8⃣ 其他解法<a href="https://www.eurekashadow.xin/blog/LeetCode189#8%E2%83%A3-%E5%85%B6%E4%BB%96%E8%A7%A3%E6%B3%95" class="hash-link" aria-label="8⃣ 其他解法的直接链接" title="8⃣ 其他解法的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-环形替换法">✨ 环形替换法<a href="https://www.eurekashadow.xin/blog/LeetCode189#-%E7%8E%AF%E5%BD%A2%E6%9B%BF%E6%8D%A2%E6%B3%95" class="hash-link" aria-label="✨ 环形替换法的直接链接" title="✨ 环形替换法的直接链接">​</a></h3><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @brief 使用环形替换法将数组中的元素向右轮转 k 个位置</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param nums 指向整型数组的指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param numsSize 数组的长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param k 轮转的步数（非负数）</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @details 核心思想是将数组中每个元素直接放到轮转后的位置上。</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          通过追踪元素的移动轨迹形成环形，每个元素只访问一次。</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          算法流程：</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          1. 从每个未访问的起始位置开始</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          2. 沿着环形路径移动元素，直到回到起始位置</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          3. 继续处理下一个环形，直到所有元素都被处理</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          例如: nums = [1,2,3,4,5,6], k = 2</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          形成两个环形: 1-&gt;3-&gt;5-&gt;1 和 2-&gt;4-&gt;6-&gt;2</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          时间复杂度: O(n)，空间复杂度: O(1)</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rotate</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> k</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 处理k大于数组长度的情况，避免不必要的轮转</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    k </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> k </span><span class="token operator" style="color:#393A34">%</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 记录已处理的元素个数</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> count </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 遍历所有可能的起始位置，直到所有元素都被处理</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> start </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> count </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> start</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> current </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> start</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 当前处理的位置</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> prev </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">start</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 需要放置到下一个位置的值</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 沿着环形路径移动元素，直到回到起始位置</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">do</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> next </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">current </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> k</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">%</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 计算下一个位置</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> temp </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">next</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">                </span><span class="token comment" style="color:#999988;font-style:italic">// 保存下一个位置的原始值</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">next</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> prev</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">                    </span><span class="token comment" style="color:#999988;font-style:italic">// 将prev放到下一个位置</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            prev </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> temp</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">                          </span><span class="token comment" style="color:#999988;font-style:italic">// 更新prev为下一个位置的原始值</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            current </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> next</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">                       </span><span class="token comment" style="color:#999988;font-style:italic">// 移动到下一个位置</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            count</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">                              </span><span class="token comment" style="color:#999988;font-style:italic">// 增加已处理元素计数</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">start </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> current</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 当回到起始位置时结束当前环形处理</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-使用额外数组">✨ 使用额外数组<a href="https://www.eurekashadow.xin/blog/LeetCode189#-%E4%BD%BF%E7%94%A8%E9%A2%9D%E5%A4%96%E6%95%B0%E7%BB%84" class="hash-link" aria-label="✨ 使用额外数组的直接链接" title="✨ 使用额外数组的直接链接">​</a></h3><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @brief 使用额外数组法将数组中的元素向右轮转 k 个位置</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param nums 指向整型数组的指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param numsSize 数组的长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param k 轮转的步数（非负数）</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @details 核心思想是创建一个新数组，将原数组中每个元素直接放到轮转后的位置上，</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          然后将新数组的内容复制回原数组。</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          算法流程：</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          1. 创建与原数组等长的新数组</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          2. 遍历原数组，将每个元素 nums[i] 放到新数组的 (i + k) % n 位置</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          3. 将新数组的内容复制回原数组</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          例如: nums = [1,2,3,4,5,6,7], k = 3</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          nums[0]=1 放到 newArr[(0+3)%7] = newArr[3] 的位置</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          nums[1]=2 放到 newArr[(1+3)%7] = newArr[4] 的位置</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          ...以此类推</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          时间复杂度: O(n)，空间复杂度: O(n)</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rotate</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> k</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> newArr</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">numsSize</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">// 创建与原数组等长的新数组</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    k </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> k </span><span class="token operator" style="color:#393A34">%</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">         </span><span class="token comment" style="color:#999988;font-style:italic">// 处理k大于数组长度的情况</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 将元素放到新位置</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 将nums[i]放到新数组的(i + k) % numsSize位置（轮转后的位置）</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        newArr</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> k</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">%</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 复制回原数组</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> newArr</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div></div></div></details>]]></content:encoded>
            <category>数组</category>
        </item>
        <item>
            <title><![CDATA[多数元素]]></title>
            <link>https://www.eurekashadow.xin/blog/LeetCode169</link>
            <guid>https://www.eurekashadow.xin/blog/LeetCode169</guid>
            <pubDate>Thu, 31 Jul 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[力扣面试经典——169题]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="力扣面试经典169题"><span class="B2_JnYG"><a href="https://leetcode.cn/problems/majority-element/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer" title="力扣">力扣面试经典——169题</a></span><a href="https://www.eurekashadow.xin/blog/LeetCode169#%E5%8A%9B%E6%89%A3%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B8169%E9%A2%98" class="hash-link" aria-label="力扣面试经典169题的直接链接" title="力扣面试经典169题的直接链接">​</a></h3>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-参考代码">💡 参考代码：<a href="https://www.eurekashadow.xin/blog/LeetCode169#-%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81" class="hash-link" aria-label="💡 参考代码：的直接链接" title="💡 参考代码：的直接链接">​</a></h3>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 查找数组中的多数元素（出现次数大于⌊n/2⌋的元素）</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 使用Boyer-Moore投票算法实现</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param nums 整数数组指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param numsSize 数组长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 返回多数元素</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">majorityElement</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 初始化候选人为第一个元素，计数为1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> candidate </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> count </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 投票阶段：遍历数组中剩余的所有元素</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 如果计数为0，更换候选人</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">count </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            candidate </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 设置新的候选人</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            count </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 重置计数为1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 如果当前元素与候选人相同，计数加1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> candidate</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            count</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 如果当前元素与候选人不同，计数减1（相当于抵消）</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            count</span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 返回最终的候选人（多数元素）</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> candidate</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-总结">📖 总结：<a href="https://www.eurekashadow.xin/blog/LeetCode169#-%E6%80%BB%E7%BB%93" class="hash-link" aria-label="📖 总结：的直接链接" title="📖 总结：的直接链接">​</a></h3>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>点击展开题目总结</summary><div><div class="collapsibleContent_i85q"><h1>🤔 多数元素</h1><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1️⃣-题目核心信息">1️⃣ 题目核心信息<a href="https://www.eurekashadow.xin/blog/LeetCode169#1%EF%B8%8F%E2%83%A3-%E9%A2%98%E7%9B%AE%E6%A0%B8%E5%BF%83%E4%BF%A1%E6%81%AF" class="hash-link" aria-label="1️⃣ 题目核心信息的直接链接" title="1️⃣ 题目核心信息的直接链接">​</a></h2><p>🎯 <strong>功能描述</strong>：给定一个大小为 n 的数组，找到其中的多数元素。多数元素是指在数组中出现次数大于 ⌊ n/2 ⌋ 的元素。</p><p>📥 <strong>输入输出</strong>：</p><ul>
<li><strong>输入</strong>：<code>int* nums</code>（整数数组指针），<code>int numsSize</code>（数组长度）</li>
<li><strong>输出</strong>：返回多数元素（保证存在）</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2️⃣-实现原理">2️⃣ 实现原理<a href="https://www.eurekashadow.xin/blog/LeetCode169#2%EF%B8%8F%E2%83%A3-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86" class="hash-link" aria-label="2️⃣ 实现原理的直接链接" title="2️⃣ 实现原理的直接链接">​</a></h2><p>💡 <strong>核心思路</strong>：使用Boyer-Moore投票算法，利用多数元素出现次数超过一半的特性，通过"投票抵消"机制找到目标元素。</p><p>📋 <strong>实现步骤</strong>：</p><ol>
<li>初始化候选元素为数组第一个元素，计数器为1</li>
<li>遍历数组剩余元素</li>
<li>若计数器为0，更新候选元素为当前元素，计数器重置为1</li>
<li>若当前元素等于候选元素，计数器加1</li>
<li>若当前元素不等于候选元素，计数器减1</li>
<li>返回最终候选元素</li>
</ol><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3️⃣-关键点解析">3️⃣ 关键点解析<a href="https://www.eurekashadow.xin/blog/LeetCode169#3%EF%B8%8F%E2%83%A3-%E5%85%B3%E9%94%AE%E7%82%B9%E8%A7%A3%E6%9E%90" class="hash-link" aria-label="3️⃣ 关键点解析的直接链接" title="3️⃣ 关键点解析的直接链接">​</a></h2><p>原始思路是使用双重循环统计每个元素出现次数，时间复杂度O(n²)，虽然正确但效率低。最优解使用Boyer-Moore投票算法，时间复杂度降为O(n)，空间复杂度O(1)。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-代码技巧">🎯 代码技巧<a href="https://www.eurekashadow.xin/blog/LeetCode169#-%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7" class="hash-link" aria-label="🎯 代码技巧的直接链接" title="🎯 代码技巧的直接链接">​</a></h3><ul>
<li>利用多数元素超过一半的数学特性</li>
<li>采用抵消思想，相同+1，不同-1</li>
<li>无需实际统计次数，只需找到候选元素</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4️⃣-使用场景">4️⃣ 使用场景<a href="https://www.eurekashadow.xin/blog/LeetCode169#4%EF%B8%8F%E2%83%A3-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="4️⃣ 使用场景的直接链接" title="4️⃣ 使用场景的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-适用情况">✅ 适用情况：<a href="https://www.eurekashadow.xin/blog/LeetCode169#-%E9%80%82%E7%94%A8%E6%83%85%E5%86%B5" class="hash-link" aria-label="✅ 适用情况：的直接链接" title="✅ 适用情况：的直接链接">​</a></h3><ul>
<li>需要找到出现次数超过一半的元素</li>
<li>数据流中查找多数元素</li>
<li>在线算法场景，需要实时处理</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-前提条件">⚠️ 前提条件：<a href="https://www.eurekashadow.xin/blog/LeetCode169#%EF%B8%8F-%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6" class="hash-link" aria-label="⚠️ 前提条件：的直接链接" title="⚠️ 前提条件：的直接链接">​</a></h3><ul>
<li>数组非空</li>
<li>保证存在多数元素（出现次数&gt;n/2）</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5️⃣-复杂度分析">5️⃣ 复杂度分析<a href="https://www.eurekashadow.xin/blog/LeetCode169#5%EF%B8%8F%E2%83%A3-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90" class="hash-link" aria-label="5️⃣ 复杂度分析的直接链接" title="5️⃣ 复杂度分析的直接链接">​</a></h2><ul>
<li>
<p>⏱️ 时间复杂度：O(n) - 只需遍历数组一次</p>
</li>
<li>
<p>💾 空间复杂度：O(1) - 只使用常数额外空间</p>
</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6️⃣-注意事项">6️⃣ 注意事项<a href="https://www.eurekashadow.xin/blog/LeetCode169#6%EF%B8%8F%E2%83%A3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="6️⃣ 注意事项的直接链接" title="6️⃣ 注意事项的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-边界情况">🚩 边界情况：<a href="https://www.eurekashadow.xin/blog/LeetCode169#-%E8%BE%B9%E7%95%8C%E6%83%85%E5%86%B5" class="hash-link" aria-label="🚩 边界情况：的直接链接" title="🚩 边界情况：的直接链接">​</a></h3><ul>
<li>数组只有一个元素</li>
<li>多数元素刚好出现⌊n/2⌋+1次</li>
<li>数组长度为偶数或奇数的情况</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-易错点">💥 易错点：<a href="https://www.eurekashadow.xin/blog/LeetCode169#-%E6%98%93%E9%94%99%E7%82%B9" class="hash-link" aria-label="💥 易错点：的直接链接" title="💥 易错点：的直接链接">​</a></h3><ul>
<li>忘记处理计数器为0时的候选元素更新</li>
<li>混淆多数元素的判断条件（&gt;n/2而非≥n/2）</li>
<li>在实际应用中未验证结果确实为多数元素</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="7️⃣-补充说明">7️⃣ 补充说明<a href="https://www.eurekashadow.xin/blog/LeetCode169#7%EF%B8%8F%E2%83%A3-%E8%A1%A5%E5%85%85%E8%AF%B4%E6%98%8E" class="hash-link" aria-label="7️⃣ 补充说明的直接链接" title="7️⃣ 补充说明的直接链接">​</a></h2><p><strong>"战场对决"类比</strong></p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 多数元素查找 - Boyer-Moore投票算法详解</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 核心思想：多数元素的数量超过总数的一半</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 就像一支军队人数超过总兵力的50%，即使与其他所有军队一对一战斗，</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 最后剩下的肯定还是这支军队的人</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">majorityElement</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 初始时，我们假设第一个士兵（数组第一个元素）是我们要找的军队</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> candidate </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 当前候选军队</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> count </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 当前军队的士兵数量（初始为1）</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 从第二个士兵开始检阅整个军队</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 如果战场上没有士兵了（count为0）</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">count </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 更换候选军队为当前遇到的士兵所属军队</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            candidate </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 新的候选军队</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            count </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 这支军队当前有1个士兵</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 如果当前士兵属于我们正在追踪的候选军队</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> candidate</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            count</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 该军队士兵数量+1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 如果当前士兵属于其他军队（敌对军队）</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            count</span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 我们候选军队的士兵与敌军士兵同归于尽，数量-1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 最终剩下的候选军队就是多数军队（多数元素）</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> candidate</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div><p><strong>具体例子演示</strong></p><p>以数组 <code>[2,2,1,1,1,2,2]</code> 为例：</p><table><thead><tr><th>步骤</th><th>当前元素</th><th>candidate</th><th>count</th><th>说明</th></tr></thead><tbody><tr><td>初始</td><td>-</td><td>2</td><td>1</td><td>假设第一个元素2是多数元素</td></tr><tr><td>i=1</td><td>2</td><td>2</td><td>2</td><td>遇到相同元素，count++</td></tr><tr><td>i=2</td><td>1</td><td>2</td><td>1</td><td>遇到不同元素，count--（2和1抵消）</td></tr><tr><td>i=3</td><td>1</td><td>2</td><td>0</td><td>再次抵消，count变为0</td></tr><tr><td>i=4</td><td>1</td><td>1</td><td>1</td><td>count为0，更换候选元素为1</td></tr><tr><td>i=5</td><td>2</td><td>1</td><td>0</td><td>1和2抵消，count变为0</td></tr><tr><td>i=6</td><td>2</td><td>2</td><td>1</td><td>count为0，更换候选元素为2</td></tr></tbody></table></div></div></details>]]></content:encoded>
            <category>数组</category>
        </item>
        <item>
            <title><![CDATA[删除有序数组中的重复项]]></title>
            <link>https://www.eurekashadow.xin/blog/LeetCode26</link>
            <guid>https://www.eurekashadow.xin/blog/LeetCode26</guid>
            <pubDate>Wed, 30 Jul 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[力扣面试经典——26题]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="力扣面试经典26题"><span class="B2_JnYG"><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array/description/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer" title="力扣">力扣面试经典——26题</a></span><a href="https://www.eurekashadow.xin/blog/LeetCode26#%E5%8A%9B%E6%89%A3%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B826%E9%A2%98" class="hash-link" aria-label="力扣面试经典26题的直接链接" title="力扣面试经典26题的直接链接">​</a></h3>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-参考代码">💡 参考代码：<a href="https://www.eurekashadow.xin/blog/LeetCode26#-%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81" class="hash-link" aria-label="💡 参考代码：的直接链接" title="💡 参考代码：的直接链接">​</a></h3>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 删除排序数组中的重复项</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param nums 排序数组指针，用于原地删除重复元素</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param numsSize 数组长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 返回删除重复元素后数组的新长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @description 使用双指针法原地删除重复元素，保持元素相对顺序不变</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 时间复杂度: O(n)</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 空间复杂度: O(1)</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">removeDuplicates</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> slow </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 慢指针，指向不重复元素的当前位置</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 快指针遍历整个数组，从第二个元素开始</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> fast </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> fast </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> fast</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 当快指针指向的元素与慢指针指向的元素不相等时</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">fast</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">slow</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 将慢指针前移一位，并将快指针元素复制到该位置</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">++</span><span class="token plain">slow</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">fast</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> slow </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 返回不重复元素的个数</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-总结">📖 总结：<a href="https://www.eurekashadow.xin/blog/LeetCode26#-%E6%80%BB%E7%BB%93" class="hash-link" aria-label="📖 总结：的直接链接" title="📖 总结：的直接链接">​</a></h3>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>点击展开题目总结</summary><div><div class="collapsibleContent_i85q"><h1>🤔 删除有序数组中的重复项</h1><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1️⃣-题目核心信息">1️⃣ 题目核心信息<a href="https://www.eurekashadow.xin/blog/LeetCode26#1%EF%B8%8F%E2%83%A3-%E9%A2%98%E7%9B%AE%E6%A0%B8%E5%BF%83%E4%BF%A1%E6%81%AF" class="hash-link" aria-label="1️⃣ 题目核心信息的直接链接" title="1️⃣ 题目核心信息的直接链接">​</a></h2><p>🎯 <strong>功能描述</strong>：原地删除非严格递增排列数组中的重复元素，使每个元素只出现一次</p><p>📥 <strong>输入输出</strong>：</p><ul>
<li><strong>输入</strong>：非严格递增排列数组 <code>nums</code>、数组长度 <code>numsSize</code></li>
<li><strong>输出</strong>：删除重复元素后数组的新长度，并保证前k个元素为唯一元素</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2️⃣-实现原理">2️⃣ 实现原理<a href="https://www.eurekashadow.xin/blog/LeetCode26#2%EF%B8%8F%E2%83%A3-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86" class="hash-link" aria-label="2️⃣ 实现原理的直接链接" title="2️⃣ 实现原理的直接链接">​</a></h2><p>💡 <strong>核心思路</strong>：使用快慢双指针技术，快指针遍历数组，慢指针记录不重复元素位置</p><p>📋 <strong>实现步骤</strong>：</p><ol>
<li>初始化慢指针指向数组第一个元素位置</li>
<li>快指针从第二个元素开始遍历整个数组</li>
<li>当快指针元素与慢指针元素不相等时，将快指针元素复制到慢指针下一个位置</li>
<li>返回慢指针位置加1即为新数组长度</li>
</ol><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3️⃣-关键点解析">3️⃣ 关键点解析<a href="https://www.eurekashadow.xin/blog/LeetCode26#3%EF%B8%8F%E2%83%A3-%E5%85%B3%E9%94%AE%E7%82%B9%E8%A7%A3%E6%9E%90" class="hash-link" aria-label="3️⃣ 关键点解析的直接链接" title="3️⃣ 关键点解析的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-代码技巧">🎯 代码技巧<a href="https://www.eurekashadow.xin/blog/LeetCode26#-%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7" class="hash-link" aria-label="🎯 代码技巧的直接链接" title="🎯 代码技巧的直接链接">​</a></h3><ul>
<li>快慢指针的经典应用</li>
<li>利用数组已排序特性，只需比较相邻不同元素</li>
<li><code>slow</code> 指针既作为索引又作为计数器</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4️⃣-使用场景">4️⃣ 使用场景<a href="https://www.eurekashadow.xin/blog/LeetCode26#4%EF%B8%8F%E2%83%A3-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="4️⃣ 使用场景的直接链接" title="4️⃣ 使用场景的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-适用情况">✅ 适用情况：<a href="https://www.eurekashadow.xin/blog/LeetCode26#-%E9%80%82%E7%94%A8%E6%83%85%E5%86%B5" class="hash-link" aria-label="✅ 适用情况：的直接链接" title="✅ 适用情况：的直接链接">​</a></h3><ul>
<li>有序数组去重操作</li>
<li>保留唯一元素并维持原有顺序</li>
<li>类似问题：删除重复元素II、移除元素等</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-前提条件">⚠️ 前提条件：<a href="https://www.eurekashadow.xin/blog/LeetCode26#%EF%B8%8F-%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6" class="hash-link" aria-label="⚠️ 前提条件：的直接链接" title="⚠️ 前提条件：的直接链接">​</a></h3><ul>
<li>数组必须是排序的（非严格递增）</li>
<li>只关心前k个元素，其余位置内容无关紧要</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5️⃣-复杂度分析">5️⃣ 复杂度分析<a href="https://www.eurekashadow.xin/blog/LeetCode26#5%EF%B8%8F%E2%83%A3-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90" class="hash-link" aria-label="5️⃣ 复杂度分析的直接链接" title="5️⃣ 复杂度分析的直接链接">​</a></h2><ul>
<li>
<p>⏱️ 时间复杂度：O(n)，只需要遍历数组一次</p>
</li>
<li>
<p>💾 空间复杂度：O(1)，只使用了常数个额外变量</p>
</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6️⃣-注意事项">6️⃣ 注意事项<a href="https://www.eurekashadow.xin/blog/LeetCode26#6%EF%B8%8F%E2%83%A3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="6️⃣ 注意事项的直接链接" title="6️⃣ 注意事项的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-边界情况">🚩 边界情况：<a href="https://www.eurekashadow.xin/blog/LeetCode26#-%E8%BE%B9%E7%95%8C%E6%83%85%E5%86%B5" class="hash-link" aria-label="🚩 边界情况：的直接链接" title="🚩 边界情况：的直接链接">​</a></h3><ul>
<li>空数组或单元素数组：<code>numsSize &lt;= 1</code></li>
<li>所有元素都相同</li>
<li>所有元素都不相同</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-易错点">💥 易错点：<a href="https://www.eurekashadow.xin/blog/LeetCode26#-%E6%98%93%E9%94%99%E7%82%B9" class="hash-link" aria-label="💥 易错点：的直接链接" title="💥 易错点：的直接链接">​</a></h3><ul>
<li>忘记处理边界条件（如果题目没有保证数组非空）</li>
<li>返回值应该是 <code>slow + 1</code> 而不是 <code>slow</code></li>
<li>没有正确理解"原地"的含义</li>
<li>快指针起始位置应该是1而不是0</li>
</ul></div></div></details>]]></content:encoded>
            <category>数组</category>
        </item>
        <item>
            <title><![CDATA[删除有序数组中的重复项 Ⅱ]]></title>
            <link>https://www.eurekashadow.xin/blog/LeetCode80</link>
            <guid>https://www.eurekashadow.xin/blog/LeetCode80</guid>
            <pubDate>Wed, 30 Jul 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[力扣面试经典——80题]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="力扣面试经典80题"><span class="B2_JnYG"><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array-ii/description/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer" title="力扣">力扣面试经典——80题</a></span><a href="https://www.eurekashadow.xin/blog/LeetCode80#%E5%8A%9B%E6%89%A3%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B880%E9%A2%98" class="hash-link" aria-label="力扣面试经典80题的直接链接" title="力扣面试经典80题的直接链接">​</a></h3>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-参考代码">💡 参考代码：<a href="https://www.eurekashadow.xin/blog/LeetCode80#-%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81" class="hash-link" aria-label="💡 参考代码：的直接链接" title="💡 参考代码：的直接链接">​</a></h3>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 删除有序数组中的重复项（最多保留2个相同元素）</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param nums 有序数组指针，用于原地删除重复元素</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param numsSize 数组长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 返回删除重复元素后数组的新长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @description 使用双指针法原地删除重复元素，使得每个元素最多出现两次</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 时间复杂度: O(n) - 只需遍历数组一次</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 空间复杂度: O(1) - 只使用常数额外空间</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">removeDuplicates</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 边界条件：如果数组长度小于等于2，无需处理直接返回</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 因为最多保留2个相同元素，所以长度小于等于2的数组肯定符合要求</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">numsSize </span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 初始化慢指针指向索引2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 前两个元素肯定可以保留（最多允许2个重复），所以从第3个位置开始放置有效元素</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> slow </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 快指针从索引2开始遍历整个数组</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 从第3个元素开始检查是否需要保留</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> fast </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> fast </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> fast</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 核心判断条件：只有当当前元素与slow指针前两个位置的元素不同时才保留</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 这确保了任何元素都不会出现超过2次</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 原理：如果nums[fast] == nums[slow-2]，说明包括即将插入的位置已经有3个相同元素了</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">fast</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">slow </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 将当前元素复制到slow指针位置</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">slow</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">fast</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 慢指针前移，指向下一个可放置元素的位置</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            slow</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 如果nums[fast] == nums[slow-2]，则跳过当前元素（不复制），fast继续前进</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 返回新数组的长度</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 由于slow指向下一个可放置位置的索引，所以直接返回slow即为数组长度</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> slow</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-总结">📖 总结：<a href="https://www.eurekashadow.xin/blog/LeetCode80#-%E6%80%BB%E7%BB%93" class="hash-link" aria-label="📖 总结：的直接链接" title="📖 总结：的直接链接">​</a></h3>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>点击展开题目总结</summary><div><div class="collapsibleContent_i85q"><h1>🤔 删除有序数组中的重复项 II</h1><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1️⃣-题目核心信息">1️⃣ 题目核心信息<a href="https://www.eurekashadow.xin/blog/LeetCode80#1%EF%B8%8F%E2%83%A3-%E9%A2%98%E7%9B%AE%E6%A0%B8%E5%BF%83%E4%BF%A1%E6%81%AF" class="hash-link" aria-label="1️⃣ 题目核心信息的直接链接" title="1️⃣ 题目核心信息的直接链接">​</a></h2><p>🎯 <strong>功能描述</strong>：原地删除有序数组中的重复元素，使得每个元素最多出现两次</p><p>📥 <strong>输入输出</strong>：</p><ul>
<li><strong>输入</strong>：有序数组 <code>nums</code>、数组长度 <code>numsSize</code></li>
<li><strong>输出</strong>：删除重复元素后数组的新长度，并修改原数组前k个元素</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2️⃣-实现原理">2️⃣ 实现原理<a href="https://www.eurekashadow.xin/blog/LeetCode80#2%EF%B8%8F%E2%83%A3-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86" class="hash-link" aria-label="2️⃣ 实现原理的直接链接" title="2️⃣ 实现原理的直接链接">​</a></h2><p>💡 <strong>核心思路</strong>：使用双指针技术，通过比较当前元素与已保留元素中倒数第2个元素来判断是否允许插入</p><p>📋 <strong>实现步骤</strong>：</p><ol>
<li>处理边界情况：数组长度≤2时直接返回</li>
<li>初始化慢指针指向索引2（前两个元素肯定可以保留）</li>
<li>快指针从索引2开始遍历数组</li>
<li>当快指针元素与慢指针前两个位置元素不同时，将其复制到慢指针位置</li>
<li>返回慢指针位置作为新数组长度</li>
</ol><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3️⃣-关键点解析">3️⃣ 关键点解析<a href="https://www.eurekashadow.xin/blog/LeetCode80#3%EF%B8%8F%E2%83%A3-%E5%85%B3%E9%94%AE%E7%82%B9%E8%A7%A3%E6%9E%90" class="hash-link" aria-label="3️⃣ 关键点解析的直接链接" title="3️⃣ 关键点解析的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="初始思路-vs-最优解">初始思路 vs 最优解<a href="https://www.eurekashadow.xin/blog/LeetCode80#%E5%88%9D%E5%A7%8B%E6%80%9D%E8%B7%AF-vs-%E6%9C%80%E4%BC%98%E8%A7%A3" class="hash-link" aria-label="初始思路 vs 最优解的直接链接" title="初始思路 vs 最优解的直接链接">​</a></h3><h4 class="anchor anchorWithStickyNavbar_LWe7" id="-我的初始想法">💭 我的初始想法<a href="https://www.eurekashadow.xin/blog/LeetCode80#-%E6%88%91%E7%9A%84%E5%88%9D%E5%A7%8B%E6%83%B3%E6%B3%95" class="hash-link" aria-label="💭 我的初始想法的直接链接" title="💭 我的初始想法的直接链接">​</a></h4><p>使用显式计数器记录当前元素出现次数，当元素相同时只有计数小于1时才允许复制：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">removeDuplicates</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> slow </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> count </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> fast </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> fast </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> fast</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">fast</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">slow</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">++</span><span class="token plain">slow</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">fast</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            count </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">if</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">count </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            count</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">++</span><span class="token plain">slow</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">fast</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> slow </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div><h4 class="anchor anchorWithStickyNavbar_LWe7" id="-最优解法隐式计数">⚡ 最优解法（隐式计数）<a href="https://www.eurekashadow.xin/blog/LeetCode80#-%E6%9C%80%E4%BC%98%E8%A7%A3%E6%B3%95%E9%9A%90%E5%BC%8F%E8%AE%A1%E6%95%B0" class="hash-link" aria-label="⚡ 最优解法（隐式计数）的直接链接" title="⚡ 最优解法（隐式计数）的直接链接">​</a></h4><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">removeDuplicates</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">numsSize </span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> slow </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> fast </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> fast </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> fast</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">fast</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">slow </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">slow</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">fast</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            slow</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> slow</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-对比分析">🆚 对比分析<a href="https://www.eurekashadow.xin/blog/LeetCode80#-%E5%AF%B9%E6%AF%94%E5%88%86%E6%9E%90" class="hash-link" aria-label="🆚 对比分析的直接链接" title="🆚 对比分析的直接链接">​</a></h3><table><thead><tr><th>方面</th><th>初始思路</th><th>最优解</th></tr></thead><tbody><tr><td>计数方式</td><td>显式计数器</td><td>隐式通过数组位置关系</td></tr><tr><td>代码复杂度</td><td>需要维护count变量</td><td>无需额外变量</td></tr><tr><td>可读性</td><td>逻辑清晰但稍复杂</td><td>简洁但需要理解技巧</td></tr><tr><td>扩展性</td><td>容易扩展到k次重复</td><td>需要修改索引计算</td></tr></tbody></table><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-代码技巧">🎯 代码技巧<a href="https://www.eurekashadow.xin/blog/LeetCode80#-%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7" class="hash-link" aria-label="🎯 代码技巧的直接链接" title="🎯 代码技巧的直接链接">​</a></h3><ul>
<li>双指针法的经典应用</li>
<li>利用数组有序特性，通过位置关系隐式计数</li>
<li>边界条件的巧妙处理（前两个元素天然满足条件）</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4️⃣-使用场景">4️⃣ 使用场景<a href="https://www.eurekashadow.xin/blog/LeetCode80#4%EF%B8%8F%E2%83%A3-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="4️⃣ 使用场景的直接链接" title="4️⃣ 使用场景的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-适用情况">✅ 适用情况：<a href="https://www.eurekashadow.xin/blog/LeetCode80#-%E9%80%82%E7%94%A8%E6%83%85%E5%86%B5" class="hash-link" aria-label="✅ 适用情况：的直接链接" title="✅ 适用情况：的直接链接">​</a></h3><ul>
<li>有序数组中限制元素出现次数</li>
<li>需要原地处理数组数据</li>
<li>类似问题：删除重复元素I、移除元素等</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-前提条件">⚠️ 前提条件：<a href="https://www.eurekashadow.xin/blog/LeetCode80#%EF%B8%8F-%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6" class="hash-link" aria-label="⚠️ 前提条件：的直接链接" title="⚠️ 前提条件：的直接链接">​</a></h3><ul>
<li>数组必须是排序的</li>
<li>只关心前k个元素，其余位置内容无关紧要</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5️⃣-复杂度分析">5️⃣ 复杂度分析<a href="https://www.eurekashadow.xin/blog/LeetCode80#5%EF%B8%8F%E2%83%A3-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90" class="hash-link" aria-label="5️⃣ 复杂度分析的直接链接" title="5️⃣ 复杂度分析的直接链接">​</a></h2><ul>
<li>
<p>⏱️ 时间复杂度：O(n)，只需要遍历数组一次</p>
</li>
<li>
<p>💾 空间复杂度：O(1)，只使用了常数个额外变量</p>
</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6️⃣-注意事项">6️⃣ 注意事项<a href="https://www.eurekashadow.xin/blog/LeetCode80#6%EF%B8%8F%E2%83%A3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="6️⃣ 注意事项的直接链接" title="6️⃣ 注意事项的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-边界情况">🚩 边界情况：<a href="https://www.eurekashadow.xin/blog/LeetCode80#-%E8%BE%B9%E7%95%8C%E6%83%85%E5%86%B5" class="hash-link" aria-label="🚩 边界情况：的直接链接" title="🚩 边界情况：的直接链接">​</a></h3><ul>
<li>空数组或单元素数组：<code>numsSize &lt;= 2</code></li>
<li>所有元素都相同</li>
<li>所有元素都不相同</li>
<li>只有部分元素重复超过两次</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-易错点">💥 易错点：<a href="https://www.eurekashadow.xin/blog/LeetCode80#-%E6%98%93%E9%94%99%E7%82%B9" class="hash-link" aria-label="💥 易错点：的直接链接" title="💥 易错点：的直接链接">​</a></h3><ul>
<li>忘记处理边界条件</li>
<li>慢指针起始位置应该是2而不是0</li>
<li>返回值应该是 <code>slow</code> 而不是 <code>slow + 1</code></li>
<li>比较条件应该是 <code>nums[fast] != nums[slow - 2]</code> 而不是其他位置</li>
</ul></div></div></details>]]></content:encoded>
            <category>数组</category>
        </item>
        <item>
            <title><![CDATA[力扣做题总结模板]]></title>
            <link>https://www.eurekashadow.xin/blog/LeetCodeExample</link>
            <guid>https://www.eurekashadow.xin/blog/LeetCodeExample</guid>
            <pubDate>Wed, 30 Jul 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[力扣面试经典——X题]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="力扣面试经典x题"><span class="B2_JnYG"><a href="https://leetcode.cn/studyplan/top-interview-150/" target="_blank" rel="noopener noreferrer" title="力扣">力扣面试经典——X题</a></span><a href="https://www.eurekashadow.xin/blog/LeetCodeExample#%E5%8A%9B%E6%89%A3%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B8x%E9%A2%98" class="hash-link" aria-label="力扣面试经典x题的直接链接" title="力扣面试经典x题的直接链接">​</a></h3>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-参考代码">💡 参考代码：<a href="https://www.eurekashadow.xin/blog/LeetCodeExample#-%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81" class="hash-link" aria-label="💡 参考代码：的直接链接" title="💡 参考代码：的直接链接">​</a></h3>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">code</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-总结">📖 总结：<a href="https://www.eurekashadow.xin/blog/LeetCodeExample#-%E6%80%BB%E7%BB%93" class="hash-link" aria-label="📖 总结：的直接链接" title="📖 总结：的直接链接">​</a></h3>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>点击展开题目总结</summary><div><div class="collapsibleContent_i85q"><h1>🤔 [题目名称]</h1><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1️⃣-题目核心信息">1️⃣ 题目核心信息<a href="https://www.eurekashadow.xin/blog/LeetCodeExample#1%EF%B8%8F%E2%83%A3-%E9%A2%98%E7%9B%AE%E6%A0%B8%E5%BF%83%E4%BF%A1%E6%81%AF" class="hash-link" aria-label="1️⃣ 题目核心信息的直接链接" title="1️⃣ 题目核心信息的直接链接">​</a></h2><p>🎯 <strong>功能描述</strong>：[简要描述题目要解决的核心问题]</p><p>📥 <strong>输入输出</strong>：</p><ul>
<li><strong>输入</strong>：[列出主要输入参数及其含义]</li>
<li><strong>输出</strong>：[描述函数返回值及副作用]</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2️⃣-实现原理">2️⃣ 实现原理<a href="https://www.eurekashadow.xin/blog/LeetCodeExample#2%EF%B8%8F%E2%83%A3-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86" class="hash-link" aria-label="2️⃣ 实现原理的直接链接" title="2️⃣ 实现原理的直接链接">​</a></h2><p>💡 <strong>核心思路</strong>：[概括解决该问题的主要算法思想]</p><p>📋 <strong>实现步骤</strong>：</p><ol>
<li>[步骤1]</li>
<li>[步骤2]</li>
<li>[步骤3]</li>
<li>[步骤4]</li>
</ol><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3️⃣-关键点解析">3️⃣ 关键点解析<a href="https://www.eurekashadow.xin/blog/LeetCodeExample#3%EF%B8%8F%E2%83%A3-%E5%85%B3%E9%94%AE%E7%82%B9%E8%A7%A3%E6%9E%90" class="hash-link" aria-label="3️⃣ 关键点解析的直接链接" title="3️⃣ 关键点解析的直接链接">​</a></h2><p>给出原始做题思路并比较与最优解区别（可选）</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-代码技巧">🎯 代码技巧<a href="https://www.eurekashadow.xin/blog/LeetCodeExample#-%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7" class="hash-link" aria-label="🎯 代码技巧的直接链接" title="🎯 代码技巧的直接链接">​</a></h3><ul>
<li>[技巧1]</li>
<li>[技巧2]</li>
<li>[技巧3]</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4️⃣-使用场景">4️⃣ 使用场景<a href="https://www.eurekashadow.xin/blog/LeetCodeExample#4%EF%B8%8F%E2%83%A3-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="4️⃣ 使用场景的直接链接" title="4️⃣ 使用场景的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-适用情况">✅ 适用情况：<a href="https://www.eurekashadow.xin/blog/LeetCodeExample#-%E9%80%82%E7%94%A8%E6%83%85%E5%86%B5" class="hash-link" aria-label="✅ 适用情况：的直接链接" title="✅ 适用情况：的直接链接">​</a></h3><ul>
<li>[场景1]</li>
<li>[场景2]</li>
<li>[场景3]</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-前提条件">⚠️ 前提条件：<a href="https://www.eurekashadow.xin/blog/LeetCodeExample#%EF%B8%8F-%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6" class="hash-link" aria-label="⚠️ 前提条件：的直接链接" title="⚠️ 前提条件：的直接链接">​</a></h3><ul>
<li>[条件1]</li>
<li>[条件2]</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5️⃣-复杂度分析">5️⃣ 复杂度分析<a href="https://www.eurekashadow.xin/blog/LeetCodeExample#5%EF%B8%8F%E2%83%A3-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90" class="hash-link" aria-label="5️⃣ 复杂度分析的直接链接" title="5️⃣ 复杂度分析的直接链接">​</a></h2><ul>
<li>
<p>⏱️ 时间复杂度：[时间复杂度分析]</p>
</li>
<li>
<p>💾 空间复杂度：[空间复杂度分析]</p>
</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6️⃣-注意事项">6️⃣ 注意事项<a href="https://www.eurekashadow.xin/blog/LeetCodeExample#6%EF%B8%8F%E2%83%A3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="6️⃣ 注意事项的直接链接" title="6️⃣ 注意事项的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-边界情况">🚩 边界情况：<a href="https://www.eurekashadow.xin/blog/LeetCodeExample#-%E8%BE%B9%E7%95%8C%E6%83%85%E5%86%B5" class="hash-link" aria-label="🚩 边界情况：的直接链接" title="🚩 边界情况：的直接链接">​</a></h3><ul>
<li>[边界情况1]</li>
<li>[边界情况2]</li>
<li>[边界情况3]</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-易错点">💥 易错点：<a href="https://www.eurekashadow.xin/blog/LeetCodeExample#-%E6%98%93%E9%94%99%E7%82%B9" class="hash-link" aria-label="💥 易错点：的直接链接" title="💥 易错点：的直接链接">​</a></h3><ul>
<li>[易错点1]</li>
<li>[易错点2]</li>
<li>[易错点3]</li>
</ul></div></div></details>]]></content:encoded>
            <category>数组</category>
        </item>
        <item>
            <title><![CDATA[移除元素]]></title>
            <link>https://www.eurekashadow.xin/blog/LeetCode27</link>
            <guid>https://www.eurekashadow.xin/blog/LeetCode27</guid>
            <pubDate>Tue, 29 Jul 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[力扣面试经典——27题]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="力扣面试经典27题"><span class="B2_JnYG"><a href="https://leetcode.cn/problems/remove-element/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer" title="力扣">力扣面试经典——27题</a></span><a href="https://www.eurekashadow.xin/blog/LeetCode27#%E5%8A%9B%E6%89%A3%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B827%E9%A2%98" class="hash-link" aria-label="力扣面试经典27题的直接链接" title="力扣面试经典27题的直接链接">​</a></h3>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-参考代码">💡 参考代码：<a href="https://www.eurekashadow.xin/blog/LeetCode27#-%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81" class="hash-link" aria-label="💡 参考代码：的直接链接" title="💡 参考代码：的直接链接">​</a></h3>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 原地移除数组中等于 val 的元素</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param nums 输入数组</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param numsSize 数组长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param val  要移除的值</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 返回不等于 val 的元素数量</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">removeElement</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> val</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> slow </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 慢指针，指向下一个要放置非val元素的位置</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 快指针遍历整个数组</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> fast </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> fast </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> fast</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 如果当前元素不等于val，则将其放到slow位置</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">fast</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> val</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">slow</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">fast</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> slow</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// slow即为新数组的长度</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-总结">📖 总结：<a href="https://www.eurekashadow.xin/blog/LeetCode27#-%E6%80%BB%E7%BB%93" class="hash-link" aria-label="📖 总结：的直接链接" title="📖 总结：的直接链接">​</a></h3>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>点击展开题目总结</summary><div><div class="collapsibleContent_i85q"><h1>🤔 移除元素</h1><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1️⃣-题目核心信息">1️⃣ 题目核心信息<a href="https://www.eurekashadow.xin/blog/LeetCode27#1%EF%B8%8F%E2%83%A3-%E9%A2%98%E7%9B%AE%E6%A0%B8%E5%BF%83%E4%BF%A1%E6%81%AF" class="hash-link" aria-label="1️⃣ 题目核心信息的直接链接" title="1️⃣ 题目核心信息的直接链接">​</a></h2><p>🎯 <strong>功能描述</strong>：原地移除数组中所有等于指定值的元素，返回剩余元素数量</p><p>📥 <strong>输入输出</strong>：</p><ul>
<li><strong>输入</strong>：数组 <code>nums</code>、数组长度 <code>numsSize</code>、要移除的值 <code>val</code></li>
<li><strong>输出</strong>：不等于 <code>val</code> 的元素数量，且这些元素位于数组前部</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2️⃣-实现原理">2️⃣ 实现原理<a href="https://www.eurekashadow.xin/blog/LeetCode27#2%EF%B8%8F%E2%83%A3-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86" class="hash-link" aria-label="2️⃣ 实现原理的直接链接" title="2️⃣ 实现原理的直接链接">​</a></h2><p>💡 <strong>核心思路</strong>：使用快慢双指针技术，快指针遍历数组，慢指针记录有效元素位置</p><p>📋 <strong>实现步骤</strong>：</p><ol>
<li>初始化慢指针指向数组开头（下一个有效元素存放位置）</li>
<li>快指针遍历整个数组</li>
<li>遇到不等于 <code>val</code> 的元素就放到慢指针位置，并移动慢指针</li>
<li>返回慢指针的位置即为新数组长度</li>
</ol><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3️⃣-关键点解析">3️⃣ 关键点解析<a href="https://www.eurekashadow.xin/blog/LeetCode27#3%EF%B8%8F%E2%83%A3-%E5%85%B3%E9%94%AE%E7%82%B9%E8%A7%A3%E6%9E%90" class="hash-link" aria-label="3️⃣ 关键点解析的直接链接" title="3️⃣ 关键点解析的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-初始思路-vs-最优解">🧠 初始思路 vs 最优解<a href="https://www.eurekashadow.xin/blog/LeetCode27#-%E5%88%9D%E5%A7%8B%E6%80%9D%E8%B7%AF-vs-%E6%9C%80%E4%BC%98%E8%A7%A3" class="hash-link" aria-label="🧠 初始思路 vs 最优解的直接链接" title="🧠 初始思路 vs 最优解的直接链接">​</a></h3><h4 class="anchor anchorWithStickyNavbar_LWe7" id="-我的初始想法">💭 我的初始想法<a href="https://www.eurekashadow.xin/blog/LeetCode27#-%E6%88%91%E7%9A%84%E5%88%9D%E5%A7%8B%E6%83%B3%E6%B3%95" class="hash-link" aria-label="💭 我的初始想法的直接链接" title="💭 我的初始想法的直接链接">​</a></h4><p>使用额外数组存储不等于 <code>val</code> 的元素，遍历完成后复制回原数组。即：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">removeElement</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> val</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> tempArray</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">100</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 额外数组</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> count </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 第一遍遍历：复制到临时数组</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> val</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            tempArray</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">count</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 第二遍遍历：复制回原数组</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> count</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> tempArray</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> count</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div><h4 class="anchor anchorWithStickyNavbar_LWe7" id="-最优解法双指针">⚡ 最优解法（双指针）<a href="https://www.eurekashadow.xin/blog/LeetCode27#-%E6%9C%80%E4%BC%98%E8%A7%A3%E6%B3%95%E5%8F%8C%E6%8C%87%E9%92%88" class="hash-link" aria-label="⚡ 最优解法（双指针）的直接链接" title="⚡ 最优解法（双指针）的直接链接">​</a></h4><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">removeElement</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> val</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> slow </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 慢指针，指向下一个要放置非val元素的位置</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 快指针遍历整个数组</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> fast </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> fast </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> fast</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 如果当前元素不等于val，则将其放到slow位置</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">fast</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> val</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">slow</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">fast</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> slow</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// slow即为新数组的长度</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-对比分析">🆚 对比分析<a href="https://www.eurekashadow.xin/blog/LeetCode27#-%E5%AF%B9%E6%AF%94%E5%88%86%E6%9E%90" class="hash-link" aria-label="🆚 对比分析的直接链接" title="🆚 对比分析的直接链接">​</a></h3><table><thead><tr><th>方面</th><th>初始思路</th><th>最优解(双指针)</th></tr></thead><tbody><tr><td>空间复杂度</td><td>O(n) - 需要额外数组</td><td>O(1) - 原地操作</td></tr><tr><td>时间复杂度</td><td>O(n) - 两次遍历</td><td>O(n) - 一次遍历</td></tr><tr><td>代码简洁性</td><td>需要两个循环</td><td>只需一个循环</td></tr><tr><td>是否原地</td><td>否</td><td>是</td></tr></tbody></table><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-代码技巧">🎯 代码技巧<a href="https://www.eurekashadow.xin/blog/LeetCode27#-%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7" class="hash-link" aria-label="🎯 代码技巧的直接链接" title="🎯 代码技巧的直接链接">​</a></h3><ul>
<li>快慢指针的经典应用</li>
<li>利用数组随机访问特性，直接覆盖无效元素</li>
<li><code>slow</code> 指针既作为索引又作为计数器</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4️⃣-使用场景">4️⃣ 使用场景<a href="https://www.eurekashadow.xin/blog/LeetCode27#4%EF%B8%8F%E2%83%A3-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="4️⃣ 使用场景的直接链接" title="4️⃣ 使用场景的直接链接">​</a></h2><p>✅ <strong>适用情况</strong>：</p><ul>
<li>需要原地删除数组中满足条件的元素</li>
<li>数组元素过滤操作</li>
<li>类似问题：删除重复元素、移动零等</li>
</ul><p>⚠️ <strong>前提条件</strong>：</p><ul>
<li>元素顺序可以改变</li>
<li>只关心前k个元素，其余位置内容无关紧要</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5️⃣-复杂度分析">5️⃣ 复杂度分析<a href="https://www.eurekashadow.xin/blog/LeetCode27#5%EF%B8%8F%E2%83%A3-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90" class="hash-link" aria-label="5️⃣ 复杂度分析的直接链接" title="5️⃣ 复杂度分析的直接链接">​</a></h2><p>⏱️ <strong>时间复杂度</strong>：O(n)，只需要遍历数组一次</p><p>💾 <strong>空间复杂度</strong>：O(1)，只使用了常数个额外变量</p><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6️⃣-注意事项">6️⃣ 注意事项<a href="https://www.eurekashadow.xin/blog/LeetCode27#6%EF%B8%8F%E2%83%A3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="6️⃣ 注意事项的直接链接" title="6️⃣ 注意事项的直接链接">​</a></h2><p>🚩 <strong>边界情况</strong>：</p><ul>
<li>空数组：<code>numsSize = 0</code></li>
<li>所有元素都等于 <code>val</code></li>
<li>所有元素都不等于 <code>val</code></li>
</ul><p>💥 <strong>易错点</strong>：</p><ul>
<li>忘记返回新数组长度</li>
<li>指针边界条件处理错误</li>
<li>没有正确理解"原地"的含义</li>
</ul></div></div></details>]]></content:encoded>
            <category>数组</category>
        </item>
        <item>
            <title><![CDATA[Git学习]]></title>
            <link>https://www.eurekashadow.xin/blog/LearnGit</link>
            <guid>https://www.eurekashadow.xin/blog/LearnGit</guid>
            <pubDate>Sun, 06 Jul 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[Git 使用技巧汇总]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="git-使用技巧汇总">Git 使用技巧汇总<a href="https://www.eurekashadow.xin/blog/LearnGit#git-%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E6%B1%87%E6%80%BB" class="hash-link" aria-label="Git 使用技巧汇总的直接链接" title="Git 使用技巧汇总的直接链接">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="测试-git-diff-功能">测试 git diff 功能<a href="https://www.eurekashadow.xin/blog/LearnGit#%E6%B5%8B%E8%AF%95-git-diff-%E5%8A%9F%E8%83%BD" class="hash-link" aria-label="测试 git diff 功能的直接链接" title="测试 git diff 功能的直接链接">​</a></h3>
<ul>
<li><code>git diff</code>：查看<strong>未暂存文件</strong>与上次提交之间的差异。</li>
<li><code>git diff --staged</code>：查看<strong>已暂存文件</strong>与上次提交之间的差异。</li>
</ul>
<p>✅ <strong>一句话总结</strong>：如果文件在<strong>未暂存区</strong>，使用 <code>git diff</code>；如果文件<strong>已暂存</strong>，使用 <code>git diff --staged</code>。</p>
<hr>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="提交操作">提交操作<a href="https://www.eurekashadow.xin/blog/LearnGit#%E6%8F%90%E4%BA%A4%E6%93%8D%E4%BD%9C" class="hash-link" aria-label="提交操作的直接链接" title="提交操作的直接链接">​</a></h3>
<ul>
<li><code>git commit -a</code>：跳过 <code>git add</code> 阶段，一键暂存并提交所有修改。</li>
<li><code>git commit --amend</code>：撤销最近一次提交，并允许：<!-- -->
<ul>
<li>使用 <code>git add</code> 补充遗漏的文件；</li>
<li>编辑或保留原有的提交信息后重新提交。</li>
</ul>
</li>
</ul>
<p>🔁 适用于刚提交完发现还有文件没添加，或者需要修改提交信息的情况。</p>
<hr>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="文件重命名操作">文件重命名操作<a href="https://www.eurekashadow.xin/blog/LearnGit#%E6%96%87%E4%BB%B6%E9%87%8D%E5%91%BD%E5%90%8D%E6%93%8D%E4%BD%9C" class="hash-link" aria-label="文件重命名操作的直接链接" title="文件重命名操作的直接链接">​</a></h3>
<ul>
<li><code>git mv &lt;原文件名&gt; &lt;新文件名&gt;</code>：用于重命名 Git 跟踪的文件。</li>
</ul>
<p>示例：</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">git mv test1.txt test.txt</span><br></span></code></pre></div></div>
<hr>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="撤销暂存操作">撤销暂存操作<a href="https://www.eurekashadow.xin/blog/LearnGit#%E6%92%A4%E9%94%80%E6%9A%82%E5%AD%98%E6%93%8D%E4%BD%9C" class="hash-link" aria-label="撤销暂存操作的直接链接" title="撤销暂存操作的直接链接">​</a></h3>
<ul>
<li><code>git reset HEAD &lt;文件名&gt;</code>：取消某个文件的暂存状态。</li>
</ul>
<p>示例：</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">git reset HEAD README.md</span><br></span></code></pre></div></div>
<p>📌 常用于误将某些文件加入暂存区后想将其移出的情况。</p>
<hr>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="放弃本地修改">放弃本地修改<a href="https://www.eurekashadow.xin/blog/LearnGit#%E6%94%BE%E5%BC%83%E6%9C%AC%E5%9C%B0%E4%BF%AE%E6%94%B9" class="hash-link" aria-label="放弃本地修改的直接链接" title="放弃本地修改的直接链接">​</a></h3>
<ul>
<li><code>git restore &lt;文件名&gt;</code>：放弃对该文件的所有本地修改。</li>
</ul>
<p>⚠️ <strong>注意</strong>：该操作不可逆，请确保确实不需要这些修改后再执行。</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="分支切换与紧急修复流程">分支切换与紧急修复流程<a href="https://www.eurekashadow.xin/blog/LearnGit#%E5%88%86%E6%94%AF%E5%88%87%E6%8D%A2%E4%B8%8E%E7%B4%A7%E6%80%A5%E4%BF%AE%E5%A4%8D%E6%B5%81%E7%A8%8B" class="hash-link" aria-label="分支切换与紧急修复流程的直接链接" title="分支切换与紧急修复流程的直接链接">​</a></h2>
<p>假设你现在正在解决问题53，当前处于 <code>iss53</code> 分支上，而 <code>main</code> 分支突然出现了问题，需要马上修复。</p>
<p>✅ <strong>处理步骤如下</strong>：</p>
<ol>
<li>
<p>切换回 <code>main</code> 分支：</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">git switch main</span><br></span></code></pre></div></div>
</li>
<li>
<p>创建一个临时分支 <code>hotfix</code> 来修复问题：</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">git checkout -b hotfix</span><br></span></code></pre></div></div>
</li>
<li>
<p>修复完成后，提交更改。</p>
</li>
<li>
<p>切换回 <code>main</code> 分支并合并修复内容：</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">git checkout main</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git merge hotfix</span><br></span></code></pre></div></div>
</li>
<li>
<p>删除临时分支（问题已修复）：</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">git branch -d hotfix</span><br></span></code></pre></div></div>
</li>
<li>
<p>回到 <code>iss53</code> 分支继续开发：</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">git switch iss53</span><br></span></code></pre></div></div>
</li>
</ol>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="合并冲突说明及解决方法">合并冲突说明及解决方法<a href="https://www.eurekashadow.xin/blog/LearnGit#%E5%90%88%E5%B9%B6%E5%86%B2%E7%AA%81%E8%AF%B4%E6%98%8E%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95" class="hash-link" aria-label="合并冲突说明及解决方法的直接链接" title="合并冲突说明及解决方法的直接链接">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-冲突原因">⚠️ 冲突原因<a href="https://www.eurekashadow.xin/blog/LearnGit#%EF%B8%8F-%E5%86%B2%E7%AA%81%E5%8E%9F%E5%9B%A0" class="hash-link" aria-label="⚠️ 冲突原因的直接链接" title="⚠️ 冲突原因的直接链接">​</a></h3>
<p>当 <code>main</code> 和 <code>iss53</code> 分支<strong>同时修改了同一个文件的相同部分</strong>（例如 <code>README.md</code>），Git 无法判断应该保留哪边的内容，就会提示冲突。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="示例场景">示例场景<a href="https://www.eurekashadow.xin/blog/LearnGit#%E7%A4%BA%E4%BE%8B%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="示例场景的直接链接" title="示例场景的直接链接">​</a></h3>
<ul>
<li>在 <code>main</code> 分支下修改了 <code>README.md</code> 并提交；</li>
<li>然后切换到 <code>iss53</code> 分支，在此分支下也修改了 <code>README.md</code> 并提交；</li>
<li>最后切换回 <code>main</code> 分支，尝试合并 <code>iss53</code>，出现冲突。</li>
</ul>
<hr>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-解决步骤">🔧 解决步骤<a href="https://www.eurekashadow.xin/blog/LearnGit#-%E8%A7%A3%E5%86%B3%E6%AD%A5%E9%AA%A4" class="hash-link" aria-label="🔧 解决步骤的直接链接" title="🔧 解决步骤的直接链接">​</a></h3>
<ol>
<li>
<p>打开冲突文件（如 <code>README.md</code>），你会看到类似如下内容：</p>
<div class="language-html codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-html codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">This is the content from main.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">=======</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">This is the content from iss53.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&gt;&gt;&gt;&gt;&gt;&gt;&gt; iss53</span><br></span></code></pre></div></div>
</li>
<li>
<p>手动编辑文件，选择你想要保留的内容，删除冲突标记。</p>
</li>
<li>
<p>添加修改后的文件到暂存区：</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">git add README.md</span><br></span></code></pre></div></div>
</li>
<li>
<p>提交合并结果：</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">git commit -m "Fixed conflict"</span><br></span></code></pre></div></div>
</li>
</ol>
<hr>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-如何避免冲突">💡 如何避免冲突？<a href="https://www.eurekashadow.xin/blog/LearnGit#-%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E5%86%B2%E7%AA%81" class="hash-link" aria-label="💡 如何避免冲突？的直接链接" title="💡 如何避免冲突？的直接链接">​</a></h3>
<ul>
<li><strong>保持分支同步</strong>：在修改前先拉取最新代码；</li>
<li><strong>及时合并分支</strong>：避免两个分支长时间不合并；</li>
<li><strong>明确分工</strong>：团队协作时尽量避免多人修改同一文件的关键区域；</li>
<li><strong>使用 Pull Request 审查机制</strong>：提前发现潜在冲突。</li>
</ul>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="-实际测试说明">✅ 实际测试说明<a href="https://www.eurekashadow.xin/blog/LearnGit#-%E5%AE%9E%E9%99%85%E6%B5%8B%E8%AF%95%E8%AF%B4%E6%98%8E" class="hash-link" aria-label="✅ 实际测试说明的直接链接" title="✅ 实际测试说明的直接链接">​</a></h2>
<p>这是一个测试内容，当前文本是在 <code>iss53</code> 分支下编写完成的。之前已经与 <code>main</code> 分支合并。</p>
<p>按照预期，切换回 <code>main</code> 分支后，再合并 <code>iss53</code> 分支不会产生冲突，也就是说，在 <code>main</code> 分支下也能看到这段新增内容。</p>]]></content:encoded>
            <category>Git</category>
        </item>
        <item>
            <title><![CDATA[合并两个有序数组]]></title>
            <link>https://www.eurekashadow.xin/blog/LeetCode88</link>
            <guid>https://www.eurekashadow.xin/blog/LeetCode88</guid>
            <pubDate>Fri, 04 Jul 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[力扣面试经典——88题]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="力扣面试经典88题"><span class="B2_JnYG"><a href="https://leetcode.cn/problems/merge-sorted-array/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer" title="力扣">力扣面试经典——88题</a></span><a href="https://www.eurekashadow.xin/blog/LeetCode88#%E5%8A%9B%E6%89%A3%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B888%E9%A2%98" class="hash-link" aria-label="力扣面试经典88题的直接链接" title="力扣面试经典88题的直接链接">​</a></h3>
<p>给你两个按<strong>非递减顺序</strong>排列的整数数组 <code>nums1</code> 和 <code>nums2</code>，另有两个整数 <code>m</code> 和 <code>n</code>，分别表示 <code>nums1</code> 和 <code>nums2</code> 中的元素数目。</p>
<p>请你合并 <code>nums2</code> 到 <code>nums1</code> 中，使合并后的数组同样按<strong>非递减顺序</strong>排列。</p>
<blockquote>
<p>⚠️ 注意：最终，合并后数组不应由函数返回，而是存储在数组 <code>nums1</code> 中。为了应对这种情况，<code>nums1</code> 的初始长度为 <code>m + n</code>，其中前 <code>m</code> 个元素表示应合并的元素，后 <code>n</code> 个元素为 <code>0</code>，应忽略。<code>nums2</code> 的长度为 <code>n</code>。</p>
</blockquote>
<hr>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-示例说明">🧪 示例说明<a href="https://www.eurekashadow.xin/blog/LeetCode88#-%E7%A4%BA%E4%BE%8B%E8%AF%B4%E6%98%8E" class="hash-link" aria-label="🧪 示例说明的直接链接" title="🧪 示例说明的直接链接">​</a></h3>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="示例-1">示例 1：<a href="https://www.eurekashadow.xin/blog/LeetCode88#%E7%A4%BA%E4%BE%8B-1" class="hash-link" aria-label="示例 1：的直接链接" title="示例 1：的直接链接">​</a></h4>
<blockquote>
<p>输入：<br>
<code>nums1 = [1, 2, 3, 0, 0, 0]</code>, <code>m = 3</code><br>
<code>nums2 = [2, 5, 6]</code>, <code>n = 3</code></p>
<p>输出：<br>
<code>[1, 2, 2, 3, 5, 6]</code></p>
<p>解释：需要合并 <code>[1,2,3]</code> 和 <code>[2,5,6]</code>。<br>
<!-- -->合并结果是 <code>[1, 2, 2, 3, 5, 6]</code>，其中斜体加粗标注的为 <code>nums1</code> 中的原始元素。</p>
</blockquote>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="示例-2">示例 2：<a href="https://www.eurekashadow.xin/blog/LeetCode88#%E7%A4%BA%E4%BE%8B-2" class="hash-link" aria-label="示例 2：的直接链接" title="示例 2：的直接链接">​</a></h4>
<blockquote>
<p>输入：<br>
<code>nums1 = [1]</code>, <code>m = 1</code><br>
<code>nums2 = []</code>, <code>n = 0</code></p>
<p>输出：<br>
<code>[1]</code></p>
</blockquote>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="示例-3">示例 3：<a href="https://www.eurekashadow.xin/blog/LeetCode88#%E7%A4%BA%E4%BE%8B-3" class="hash-link" aria-label="示例 3：的直接链接" title="示例 3：的直接链接">​</a></h4>
<blockquote>
<p>输入：<br>
<code>nums1 = [0]</code>, <code>m = 0</code><br>
<code>nums2 = [1]</code>, <code>n = 1</code></p>
<p>输出：<br>
<code>[1]</code></p>
<p>解释：因为 <code>m = 0</code>，所以 <code>nums1</code> 中没有有效元素。<code>0</code> 只是为了确保合并结果可以顺利存放到 <code>nums1</code> 中。</p>
</blockquote>
<hr>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-提示">🔍 提示：<a href="https://www.eurekashadow.xin/blog/LeetCode88#-%E6%8F%90%E7%A4%BA" class="hash-link" aria-label="🔍 提示：的直接链接" title="🔍 提示：的直接链接">​</a></h3>
<ul>
<li><code>nums1.length == m + n</code></li>
<li><code>nums2.length == n</code></li>
<li><code>0 &lt;= m, n &lt;= 200</code></li>
<li><code>-10^9 &lt;= nums1[i], nums2[j] &lt;= 10^9</code></li>
</ul>
<hr>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-进阶挑战">🚀 进阶挑战：<a href="https://www.eurekashadow.xin/blog/LeetCode88#-%E8%BF%9B%E9%98%B6%E6%8C%91%E6%88%98" class="hash-link" aria-label="🚀 进阶挑战：的直接链接" title="🚀 进阶挑战：的直接链接">​</a></h3>
<p>你可以设计实现一个时间复杂度为 <code>O(m + n)</code> 的算法解决此问题吗？</p>
<hr>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-参考代码">💡 参考代码：<a href="https://www.eurekashadow.xin/blog/LeetCode88#-%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81" class="hash-link" aria-label="💡 参考代码：的直接链接" title="💡 参考代码：的直接链接">​</a></h3>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 合并两个已排序的数组</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 将 nums2 合并到 nums1 中，结果存储在 nums1 内</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param nums1     目标数组，预分配了足够空间 (长度为 m+n)</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param nums1Size nums1 数组的总长度 (等于 m+n)</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param m         nums1 中有效元素的个数</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param nums2     源数组，包含需要合并的元素</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param nums2Size nums2 数组的长度 (等于 n)</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param n         nums2 中元素的个数</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">merge</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> nums1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> nums1Size</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> m</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> nums2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> nums2Size</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> n</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 初始化三个指针：i指向nums1有效元素末尾，j指向nums2末尾，k指向合并结果末尾</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> m </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// nums1有效元素的最后一个索引</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> j </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> n </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// nums2的最后一个索引</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> k </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> m </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> n </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 合并后数组的最后一个索引</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 从后往前比较两个数组的元素，将较大者放到nums1的末尾</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> j </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">nums1</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> nums2</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">j</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            nums1</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">k</span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nums1</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// nums1[i]较大，将其放到位置k</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            nums1</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">k</span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nums2</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">j</span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// nums2[j]较大或相等，将其放到位置k</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 如果nums2中还有剩余元素，复制到nums1中</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 注意：如果nums1有剩余元素(i&gt;=0)，它们已经在正确位置，无需移动</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">j </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        nums1</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">k</span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nums2</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">j</span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-总结">📖 总结：<a href="https://www.eurekashadow.xin/blog/LeetCode88#-%E6%80%BB%E7%BB%93" class="hash-link" aria-label="📖 总结：的直接链接" title="📖 总结：的直接链接">​</a></h3>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>点击展开题目总结</summary><div><div class="collapsibleContent_i85q"><h1>🤔 合并两个有序数组</h1><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1️⃣-题目核心信息">1️⃣ 题目核心信息<a href="https://www.eurekashadow.xin/blog/LeetCode88#1%EF%B8%8F%E2%83%A3-%E9%A2%98%E7%9B%AE%E6%A0%B8%E5%BF%83%E4%BF%A1%E6%81%AF" class="hash-link" aria-label="1️⃣ 题目核心信息的直接链接" title="1️⃣ 题目核心信息的直接链接">​</a></h2><p>🎯 <strong>功能描述</strong>：将两个已排序的数组合并成一个有序数组，结果存储在第一个数组中</p><p>📥 <strong>输入输出</strong>：</p><ul>
<li><strong>输入</strong>：两个已排序数组 <code>nums1</code> 和 <code>nums2</code>，以及它们的有效元素个数 <code>m</code> 和 <code>n</code></li>
<li><strong>输出</strong>：无返回值，合并结果直接存储在 <code>nums1</code> 中</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2️⃣-实现原理">2️⃣ 实现原理<a href="https://www.eurekashadow.xin/blog/LeetCode88#2%EF%B8%8F%E2%83%A3-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86" class="hash-link" aria-label="2️⃣ 实现原理的直接链接" title="2️⃣ 实现原理的直接链接">​</a></h2><p>💡 <strong>核心思路</strong>：采用从后往前的双指针技术，避免覆盖未处理的数据</p><p>📋 <strong>实现步骤</strong>：</p><ol>
<li>设置三个指针分别指向两个数组有效元素末尾和合并结果末尾</li>
<li>从后往前比较两个数组的元素，将较大者放到合并位置</li>
<li>处理剩余未合并的元素</li>
</ol><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3️⃣-关键点解析">3️⃣ 关键点解析<a href="https://www.eurekashadow.xin/blog/LeetCode88#3%EF%B8%8F%E2%83%A3-%E5%85%B3%E9%94%AE%E7%82%B9%E8%A7%A3%E6%9E%90" class="hash-link" aria-label="3️⃣ 关键点解析的直接链接" title="3️⃣ 关键点解析的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-为什么需要两个循环">🔁 为什么需要两个循环<a href="https://www.eurekashadow.xin/blog/LeetCode88#-%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E4%B8%A4%E4%B8%AA%E5%BE%AA%E7%8E%AF" class="hash-link" aria-label="🔁 为什么需要两个循环的直接链接" title="🔁 为什么需要两个循环的直接链接">​</a></h3><p>第一个循环会在<strong>任意一个数组处理完</strong>时停止，但另一个数组可能还有剩余元素需要处理。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="-具体例子">📌 具体例子<a href="https://www.eurekashadow.xin/blog/LeetCode88#-%E5%85%B7%E4%BD%93%E4%BE%8B%E5%AD%90" class="hash-link" aria-label="📌 具体例子的直接链接" title="📌 具体例子的直接链接">​</a></h4><p><code>nums1 = [4,5,6,0,0,0] (m=3) nums2 = [1,2,3] (n=3)</code></p><p>🔄 <strong>执行过程</strong>：</p><ol>
<li>比较 6 和 3 → nums1[5] = 6</li>
<li>比较 5 和 3 → nums1[4] = 5</li>
<li>比较 4 和 3 → nums1[3] = 4</li>
</ol><p>此时第一个循环结束，但nums2中[1,2,3]还没有被处理。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="-关键理解">⚡ 关键理解<a href="https://www.eurekashadow.xin/blog/LeetCode88#-%E5%85%B3%E9%94%AE%E7%90%86%E8%A7%A3" class="hash-link" aria-label="⚡ 关键理解的直接链接" title="⚡ 关键理解的直接链接">​</a></h4><p>当第一个循环结束时，有两种可能情况：</p><ul>
<li><strong>i &lt; 0 但 j &gt;= 0</strong>：nums1处理完了，但nums2还有剩余元素需要复制</li>
<li><strong>j &lt; 0 但 i &gt;= 0</strong>：nums2处理完了，但nums1还有剩余元素</li>
</ul><p>对于第二种情况，nums1的剩余元素<strong>已经处于正确位置</strong>，无需移动，所以不需要额外处理。</p><p>因此需要第二个循环来处理nums2的剩余元素。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-代码技巧">🎯 代码技巧<a href="https://www.eurekashadow.xin/blog/LeetCode88#-%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7" class="hash-link" aria-label="🎯 代码技巧的直接链接" title="🎯 代码技巧的直接链接">​</a></h3><ul>
<li>从后往前遍历避免了覆盖 <code>nums1</code> 中未处理的元素</li>
<li>只需处理 <code>nums2</code> 的剩余元素，因为 <code>nums1</code> 的剩余元素已在正确位置</li>
<li>使用 <code>--</code> 操作符在赋值的同时移动指针，代码更简洁</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4️⃣-使用场景">4️⃣ 使用场景<a href="https://www.eurekashadow.xin/blog/LeetCode88#4%EF%B8%8F%E2%83%A3-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="4️⃣ 使用场景的直接链接" title="4️⃣ 使用场景的直接链接">​</a></h2><p>✅ <strong>适用情况</strong>：</p><ul>
<li>需要合并两个已排序的数组</li>
<li>希望在原地进行合并操作以节省空间</li>
<li>处理数组相关的归并排序问题</li>
</ul><p>⚠️ <strong>前提条件</strong>：</p><ul>
<li><code>nums1</code> 必须有足够空间容纳合并结果（至少 <code>m+n</code> 个元素）</li>
<li>两个输入数组都已按非递减顺序排序</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5️⃣-复杂度分析">5️⃣ 复杂度分析<a href="https://www.eurekashadow.xin/blog/LeetCode88#5%EF%B8%8F%E2%83%A3-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90" class="hash-link" aria-label="5️⃣ 复杂度分析的直接链接" title="5️⃣ 复杂度分析的直接链接">​</a></h2><p>⏱️ <strong>时间复杂度</strong>：O(m + n)，每个元素最多被访问一次</p><p>💾 <strong>空间复杂度</strong>：O(1)，只使用了常数个额外变量</p><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6️⃣-注意事项">6️⃣ 注意事项<a href="https://www.eurekashadow.xin/blog/LeetCode88#6%EF%B8%8F%E2%83%A3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="6️⃣ 注意事项的直接链接" title="6️⃣ 注意事项的直接链接">​</a></h2><p>🚩 <strong>边界情况</strong>：</p><ul>
<li><code>m = 0</code>：<code>nums1</code> 为空数组</li>
<li><code>n = 0</code>：<code>nums2</code> 为空数组</li>
<li>其中一个数组的所有元素都比另一个数组小</li>
</ul><p>💥 <strong>易错点</strong>：</p><ul>
<li>忘记处理剩余元素，特别是第二个循环</li>
<li>指针边界条件判断错误</li>
<li>从前往后合并导致数据被覆盖</li>
</ul></div></div></details>]]></content:encoded>
            <category>数组</category>
        </item>
        <item>
            <title><![CDATA[Blog1!]]></title>
            <link>https://www.eurekashadow.xin/blog/Blog1</link>
            <guid>https://www.eurekashadow.xin/blog/Blog1</guid>
            <pubDate>Mon, 23 Jun 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[关于图标的替换]]></description>
            <content:encoded><![CDATA[<p><strong>关于图标的替换</strong></p>
<p>总结：
字段	含义
slug	页面的自定义 URL 路径
title	页面显示的标题
authors	作者名
tags	文章标签，用于分类</p>]]></content:encoded>
            <category>Recording</category>
        </item>
        <item>
            <title><![CDATA[Greetings!]]></title>
            <link>https://www.eurekashadow.xin/blog/greetings</link>
            <guid>https://www.eurekashadow.xin/blog/greetings</guid>
            <pubDate>Thu, 05 Jun 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[Congratulations, you have made your first post!]]></description>
            <content:encoded><![CDATA[<p>Congratulations, you have made your first post!</p>
<p>Feel free to play around and edit this post as much as you like.AAAA</p>
<p><strong>I MADE MY FIRST BLOG POST!!!</strong></p>
<p>这是后续内容：</p>
<ul>
<li>哈哈哈</li>
<li>舒适</li>
<li>反复</li>
</ul>]]></content:encoded>
            <category>Greetings</category>
        </item>
        <item>
            <title><![CDATA[TEST!]]></title>
            <link>https://www.eurekashadow.xin/blog/TEST</link>
            <guid>https://www.eurekashadow.xin/blog/TEST</guid>
            <pubDate>Thu, 05 Jun 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[This is the summary of a very long blog post,]]></description>
            <content:encoded><![CDATA[<p>This is the summary of a very long blog post,</p>
<p>Use a <code>&lt;!--</code> <code>truncate</code> <code>--&gt;</code> comment to limit blog post size in the list view.</p>
<p><strong>TEST</strong></p>
<p>插入<code>&lt;!--</code> <code>truncate</code> <code>--&gt;</code>，表示<code>&lt;!--</code> <code>truncate</code> <code>--&gt;</code>以上的内容为预览，<code>&lt;!--</code> <code>truncate</code> <code>--&gt;</code>一下的内容为完整内容。</p>]]></content:encoded>
            <category>Greetings</category>
        </item>
    </channel>
</rss>