<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="rss.xsl"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>我的网站 Blog</title>
        <link>https://EurekaShadow.github.io/EurekaShadow.github.io/blog</link>
        <description>我的网站 Blog</description>
        <lastBuildDate>Sun, 24 Aug 2025 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>zh-Hans</language>
        <item>
            <title><![CDATA[图片转换]]></title>
            <link>https://EurekaShadow.github.io/EurekaShadow.github.io/blog/AboutPic</link>
            <guid>https://EurekaShadow.github.io/EurekaShadow.github.io/blog/AboutPic</guid>
            <pubDate>Sun, 24 Aug 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[process-images.js 脚本]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="-process-imagesjs-脚本"><span class="B2_JnYG"> process-images.js 脚本</span><a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/AboutPic#-process-imagesjs-%E8%84%9A%E6%9C%AC" class="hash-link" aria-label="-process-imagesjs-脚本的直接链接" title="-process-imagesjs-脚本的直接链接">​</a></h2>
<p>本文将介绍 <code>process-images.js</code> 脚本以及在使用过程中需要注意的问题。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="-功能">🎯 功能<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/AboutPic#-%E5%8A%9F%E8%83%BD" class="hash-link" aria-label="🎯 功能的直接链接" title="🎯 功能的直接链接">​</a></h2>
<ul>
<li>格式转换：将PNG、GIF、BMP、WebP等格式转换为JPG</li>
<li>智能压缩：自动优化JPG图片大小，保持质量平衡</li>
<li>批量重命名：按指定前缀自动编号重命名图片</li>
<li>处理统计：显示压缩率、处理时间等详细信息</li>
<li>日志记录：可选生成详细处理日志</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="-用途">📝 用途<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/AboutPic#-%E7%94%A8%E9%80%94" class="hash-link" aria-label="📝 用途的直接链接" title="📝 用途的直接链接">​</a></h2>
<p>适用于网站图片优化，特别适合Docusaurus等静态网站项目，帮助：</p>
<ul>
<li>减小图片文件大小，提升网页加载速度</li>
<li>统一图片格式，便于管理</li>
<li>规范图片命名，避免重复文件名</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="️-用法">▶️ 用法<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/AboutPic#%EF%B8%8F-%E7%94%A8%E6%B3%95" class="hash-link" aria-label="▶️ 用法的直接链接" title="▶️ 用法的直接链接">​</a></h2>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_OeMC">bash</div><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 运行脚本</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">node process-images.js</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 按提示操作：</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 1. 选择要处理的图片目录</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 2. 输入文件名前缀（直接回车跳过重命名）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 3. 选择是否生成日志文件</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 4. 确认开始处理</span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="️-注意事项">⚠️ 注意事项<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/AboutPic#%EF%B8%8F-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="⚠️ 注意事项的直接链接" title="⚠️ 注意事项的直接链接">​</a></h2>
<ul>
<li>需要系统已安装ffmpeg</li>
<li>默认处理 static/img 目录下的图片</li>
<li>原文件会被删除，建议先备份重要图片</li>
<li>日志文件默认保存在项目根目录的 logs/ 文件夹</li>
<li>处理大图片或大量图片时需要较长时间</li>
<li>脚本会自动跳过已按命名规则处理的文件</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="-目录结构">📁 目录结构<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/AboutPic#-%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84" class="hash-link" aria-label="📁 目录结构的直接链接" title="📁 目录结构的直接链接">​</a></h2>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">项目根目录/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├── static/img/          # 图片处理目录</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│   ├── Blog/           # 子目录图片</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│   └── *.png/jpg等     # 待处理图片</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├── logs/               # 日志文件目录（自动生成）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">└── process-images.js   # 脚本文件</span><br></span></code></pre></div></div>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="错误将图片进行转换压缩重命名后想要复原">错误将图片进行转换压缩重命名后，想要复原<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/AboutPic#%E9%94%99%E8%AF%AF%E5%B0%86%E5%9B%BE%E7%89%87%E8%BF%9B%E8%A1%8C%E8%BD%AC%E6%8D%A2%E5%8E%8B%E7%BC%A9%E9%87%8D%E5%91%BD%E5%90%8D%E5%90%8E%E6%83%B3%E8%A6%81%E5%A4%8D%E5%8E%9F" class="hash-link" aria-label="错误将图片进行转换压缩重命名后，想要复原的直接链接" title="错误将图片进行转换压缩重命名后，想要复原的直接链接">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-恢复已跟踪的文件到之前状态">1. 恢复已跟踪的文件到之前状态<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/AboutPic#1-%E6%81%A2%E5%A4%8D%E5%B7%B2%E8%B7%9F%E8%B8%AA%E7%9A%84%E6%96%87%E4%BB%B6%E5%88%B0%E4%B9%8B%E5%89%8D%E7%8A%B6%E6%80%81" class="hash-link" aria-label="1. 恢复已跟踪的文件到之前状态的直接链接" title="1. 恢复已跟踪的文件到之前状态的直接链接">​</a></h3>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">git checkout HEAD~1 -- "D:/Docusaurus/test-site/static/img/Blog/"</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="2-查看未跟踪的文件">2. 查看未跟踪的文件<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/AboutPic#2-%E6%9F%A5%E7%9C%8B%E6%9C%AA%E8%B7%9F%E8%B8%AA%E7%9A%84%E6%96%87%E4%BB%B6" class="hash-link" aria-label="2. 查看未跟踪的文件的直接链接" title="2. 查看未跟踪的文件的直接链接">​</a></h3>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">git ls-files --others "D:/Docusaurus/test-site/static/img/Blog/"</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="3-清理未跟踪的文件预览">3. 清理未跟踪的文件（预览）<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/AboutPic#3-%E6%B8%85%E7%90%86%E6%9C%AA%E8%B7%9F%E8%B8%AA%E7%9A%84%E6%96%87%E4%BB%B6%E9%A2%84%E8%A7%88" class="hash-link" aria-label="3. 清理未跟踪的文件（预览）的直接链接" title="3. 清理未跟踪的文件（预览）的直接链接">​</a></h3>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">git clean -n "D:/Docusaurus/test-site/static/img/Blog/"</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="4-确认无误后执行清理">4. 确认无误后执行清理<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/AboutPic#4-%E7%A1%AE%E8%AE%A4%E6%97%A0%E8%AF%AF%E5%90%8E%E6%89%A7%E8%A1%8C%E6%B8%85%E7%90%86" class="hash-link" aria-label="4. 确认无误后执行清理的直接链接" title="4. 确认无误后执行清理的直接链接">​</a></h3>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">git clean -f "D:/Docusaurus/test-site/static/img/Blog/"</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="5-查看最终状态">5. 查看最终状态<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/AboutPic#5-%E6%9F%A5%E7%9C%8B%E6%9C%80%E7%BB%88%E7%8A%B6%E6%80%81" class="hash-link" aria-label="5. 查看最终状态的直接链接" title="5. 查看最终状态的直接链接">​</a></h3>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">git status</span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="预防措施">预防措施<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/AboutPic#%E9%A2%84%E9%98%B2%E6%8E%AA%E6%96%BD" class="hash-link" aria-label="预防措施的直接链接" title="预防措施的直接链接">​</a></h2>
<p>在运行图片处理脚本前：</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 1. 提交当前状态</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git add .</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git commit -m "Before running image processing script"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 2. 创建备份分支</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git checkout -b backup-before-processing</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 3. 回到主分支进行处理</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git checkout main</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 运行脚本...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># node process-images.js</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 如果不满意结果，可以轻松回到备份状态：</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># git reset --hard backup-before-processing</span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="压缩-gif-图片思路">压缩 gif 图片思路<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/AboutPic#%E5%8E%8B%E7%BC%A9-gif-%E5%9B%BE%E7%89%87%E6%80%9D%E8%B7%AF" class="hash-link" aria-label="压缩 gif 图片思路的直接链接" title="压缩 gif 图片思路的直接链接">​</a></h2>
<blockquote>
<p>后续应把 gif 转 jpg 的代码删去</p>
</blockquote>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="交互流程设计">交互流程设计<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/AboutPic#%E4%BA%A4%E4%BA%92%E6%B5%81%E7%A8%8B%E8%AE%BE%E8%AE%A1" class="hash-link" aria-label="交互流程设计的直接链接" title="交互流程设计的直接链接">​</a></h3>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">=== 图片处理脚本 ===</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">请选择处理类型：</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1. 普通图片处理（PNG/JPG等格式转换和压缩）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">2. GIF图片优化</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">请输入选项编号:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 如果选择1：进入原有流程</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 如果选择2：进入GIF专用流程</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="gif处理流程">GIF处理流程<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/AboutPic#gif%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B" class="hash-link" aria-label="GIF处理流程的直接链接" title="GIF处理流程的直接链接">​</a></h3>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">请选择要处理的GIF目录:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1. ~/static/img/xxx目录 (包含N个GIF文件)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">请选择GIF处理选项：</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1. 仅转换格式（PNG/JPG）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">2. 轻微压缩（减小20-30%，保持质量）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">3. 中度压缩（减小50-70%，适度降低质量）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">4. 重度压缩（减小80%+，显著降低质量）</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">5. 自定义压缩</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">是否需要重命名处理后的文件？(Y/N):</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="ffmpeg命令示例">ffmpeg命令示例<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/AboutPic#ffmpeg%E5%91%BD%E4%BB%A4%E7%A4%BA%E4%BE%8B" class="hash-link" aria-label="ffmpeg命令示例的直接链接" title="ffmpeg命令示例的直接链接">​</a></h3>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_OeMC">bash</div><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 轻微压缩</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ffmpeg -i input.gif -filter_complex "[0:v] split [a][b];[a] palettegen=reserve_transparent=on:transparency_color=ffffff [p];[b][p] paletteuse" output.gif</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 中度压缩</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ffmpeg -i input.gif -filter_complex "[0:v] fps=15,scale=iw/2:-1 [a];[a] split [b][c];[b] palettegen=reserve_transparent=on:transparency_color=ffffff [p];[c][p] paletteuse" output.gif</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 重度压缩</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ffmpeg -i input.gif -filter_complex "[0:v] fps=10,scale=iw/3:-1 [a];[a] split [b][c];[b] palettegen=reserve_transparent=on:transparency_color=ffffff [p];[c][p] paletteuse" -colors 32 output.gif</span><br></span></code></pre></div></div><div class="blog-post-comments" style="margin-top:2rem;padding-top:1.5rem;border-top:1px solid var(--ifm-color-emphasis-300)"><div style="margin-top:2rem"><div style="min-height:200px">加载评论中...</div></div></div>]]></content:encoded>
            <category>ffmpeg</category>
            <category>图片</category>
        </item>
        <item>
            <title><![CDATA[长度最小的子数组]]></title>
            <link>https://EurekaShadow.github.io/EurekaShadow.github.io/blog/LeetCode209</link>
            <guid>https://EurekaShadow.github.io/EurekaShadow.github.io/blog/LeetCode209</guid>
            <pubDate>Sat, 23 Aug 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[力扣面试经典——209题]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="力扣面试经典209题"><span class="B2_JnYG"><a href="https://leetcode.cn/problems/minimum-size-subarray-sum/description/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer" title="力扣">力扣面试经典——209题</a></span><a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode209#%E5%8A%9B%E6%89%A3%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B8209%E9%A2%98" class="hash-link" aria-label="力扣面试经典209题的直接链接" title="力扣面试经典209题的直接链接">​</a></h3>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-参考代码">💡 参考代码：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode209#-%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81" class="hash-link" aria-label="💡 参考代码：的直接链接" title="💡 参考代码：的直接链接">​</a></h3>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 找到数组中和大于等于target的最短连续子数组长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param target 目标和</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param nums 输入数组</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param numsSize 数组长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 最短子数组长度，不存在则返回0</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">minSubArrayLen</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> target</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// left: 滑动窗口左指针</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// right: 滑动窗口右指针</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> left </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> right </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// sum: 当前窗口内元素的和</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> sum </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// minLen: 记录满足条件的最短子数组长度</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 初始化为最大整数值，便于后续比较</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> minLen </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> INT_MAX</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 滑动窗口主循环：右指针遍历整个数组</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">right </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 扩大窗口：将右指针指向的元素加入窗口</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        sum </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">right</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 收缩窗口：当窗口内元素和满足条件时，尝试缩小窗口</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">sum </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> target</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 更新最小长度：取当前窗口长度与已记录最小长度的较小值</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> currentLen </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> right </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> left </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            minLen </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">currentLen </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> minLen</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> currentLen </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> minLen</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 缩小窗口：从窗口中移除左指针指向的元素，左指针右移</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            sum </span><span class="token operator" style="color:#393A34">-=</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">left</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            left</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 右指针右移，继续扩大窗口</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        right</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 如果minLen仍为初始值，说明没有找到满足条件的子数组，返回0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 否则返回找到的最短子数组长度</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">minLen </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> INT_MAX</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> minLen</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-总结">📖 总结：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode209#-%E6%80%BB%E7%BB%93" class="hash-link" aria-label="📖 总结：的直接链接" title="📖 总结：的直接链接">​</a></h3>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>点击展开题目总结</summary><div><div class="collapsibleContent_i85q"><h1>🤔 长度最小的子数组</h1><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1️⃣-题目核心信息">1️⃣ 题目核心信息<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode209#1%EF%B8%8F%E2%83%A3-%E9%A2%98%E7%9B%AE%E6%A0%B8%E5%BF%83%E4%BF%A1%E6%81%AF" class="hash-link" aria-label="1️⃣ 题目核心信息的直接链接" title="1️⃣ 题目核心信息的直接链接">​</a></h2><p>🎯 <strong>功能描述</strong>：给定一个正整数数组和目标值，找到数组中元素和大于等于目标值的最短连续子数组长度</p><p>📥 <strong>输入输出</strong>：</p><ul>
<li><strong>输入</strong>：<!-- -->
<ul>
<li><code>target</code>: 目标和值（正整数）</li>
<li><code>nums</code>: 包含n个正整数的数组</li>
<li><code>numsSize</code>: 数组长度</li>
</ul>
</li>
<li><strong>输出</strong>：满足条件的最短连续子数组长度，不存在则返回0</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2️⃣-实现原理">2️⃣ 实现原理<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode209#2%EF%B8%8F%E2%83%A3-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86" class="hash-link" aria-label="2️⃣ 实现原理的直接链接" title="2️⃣ 实现原理的直接链接">​</a></h2><p>💡 <strong>核心思路</strong>：使用滑动窗口（双指针）技术，维护一个动态窗口来寻找满足条件的最短子数组</p><p>📋 <strong>实现步骤</strong>：</p><ol>
<li>初始化左右指针、窗口元素和、最小长度记录器</li>
<li>右指针遍历数组，不断扩大窗口并将元素加入窗口和</li>
<li>当窗口和满足条件（≥target）时，记录当前窗口长度并尝试缩小窗口</li>
<li>左指针右移缩小窗口，更新窗口和，直到不满足条件为止</li>
<li>继续扩大窗口直到遍历完整个数组，返回记录的最小长度</li>
</ol><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3️⃣-关键点解析">3️⃣ 关键点解析<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode209#3%EF%B8%8F%E2%83%A3-%E5%85%B3%E9%94%AE%E7%82%B9%E8%A7%A3%E6%9E%90" class="hash-link" aria-label="3️⃣ 关键点解析的直接链接" title="3️⃣ 关键点解析的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-代码技巧">🎯 代码技巧<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode209#-%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7" class="hash-link" aria-label="🎯 代码技巧的直接链接" title="🎯 代码技巧的直接链接">​</a></h3><ul>
<li><strong>滑动窗口优化</strong>：通过双指针技术避免重复计算，实现O(n)时间复杂度</li>
<li><strong>动态更新</strong>：实时维护窗口状态和最优解，避免存储所有可能的子数组</li>
<li><strong>边界处理</strong>：使用INT_MAX作为初始值，方便后续比较和不存在解的判断</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4️⃣-使用场景">4️⃣ 使用场景<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode209#4%EF%B8%8F%E2%83%A3-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="4️⃣ 使用场景的直接链接" title="4️⃣ 使用场景的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-适用情况">✅ 适用情况：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode209#-%E9%80%82%E7%94%A8%E6%83%85%E5%86%B5" class="hash-link" aria-label="✅ 适用情况：的直接链接" title="✅ 适用情况：的直接链接">​</a></h3><ul>
<li>寻找满足特定条件的连续子数组</li>
<li>需要优化时间复杂度的数组问题</li>
<li>可以通过扩大/缩小窗口来验证条件的问题</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-前提条件">⚠️ 前提条件：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode209#%EF%B8%8F-%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6" class="hash-link" aria-label="⚠️ 前提条件：的直接链接" title="⚠️ 前提条件：的直接链接">​</a></h3><ul>
<li>数组元素均为正整数（保证窗口缩小会使得和减小）</li>
<li>目标值为正整数</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5️⃣-复杂度分析">5️⃣ 复杂度分析<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode209#5%EF%B8%8F%E2%83%A3-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90" class="hash-link" aria-label="5️⃣ 复杂度分析的直接链接" title="5️⃣ 复杂度分析的直接链接">​</a></h2><ul>
<li>
<p>⏱️ 时间复杂度：O(n) - 每个元素最多被访问两次（right指针和left指针各一次）</p>
</li>
<li>
<p>💾 空间复杂度：O(1) - 只使用了常数级别的额外变量空间</p>
</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6️⃣-注意事项">6️⃣ 注意事项<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode209#6%EF%B8%8F%E2%83%A3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="6️⃣ 注意事项的直接链接" title="6️⃣ 注意事项的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-边界情况">🚩 边界情况：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode209#-%E8%BE%B9%E7%95%8C%E6%83%85%E5%86%B5" class="hash-link" aria-label="🚩 边界情况：的直接链接" title="🚩 边界情况：的直接链接">​</a></h3><ul>
<li>数组为空或长度为0</li>
<li>不存在满足条件的子数组</li>
<li>整个数组的和刚好等于目标值</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-易错点">💥 易错点：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode209#-%E6%98%93%E9%94%99%E7%82%B9" class="hash-link" aria-label="💥 易错点：的直接链接" title="💥 易错点：的直接链接">​</a></h3><ul>
<li>忘记处理不存在解的情况（应返回0）</li>
<li>滑动窗口的更新逻辑错误，可能导致无限循环</li>
<li>初始最小长度值设置不当，影响最终结果判断</li>
</ul></div></div></details><div class="blog-post-comments" style="margin-top:2rem;padding-top:1.5rem;border-top:1px solid var(--ifm-color-emphasis-300)"><div style="margin-top:2rem"><div style="min-height:200px">加载评论中...</div></div></div>]]></content:encoded>
            <category>数组</category>
            <category>二分查找</category>
            <category>前缀和</category>
        </item>
        <item>
            <title><![CDATA[将 Docusaurus 网站部署到 Vercel]]></title>
            <link>https://EurekaShadow.github.io/EurekaShadow.github.io/blog/VercelBlog</link>
            <guid>https://EurekaShadow.github.io/EurekaShadow.github.io/blog/VercelBlog</guid>
            <pubDate>Sat, 23 Aug 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[碎碎念🥱]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="碎碎念">碎碎念🥱<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/VercelBlog#%E7%A2%8E%E7%A2%8E%E5%BF%B5" class="hash-link" aria-label="碎碎念🥱的直接链接" title="碎碎念🥱的直接链接">​</a></h2>
<p>为了实现 <a href="https://eurekashadow.github.io/" target="_blank" rel="noopener noreferrer">git pages</a>网站的<strong>流畅访问</strong>，我曾尝试了各种方法：</p>
<ol>
<li>
<p>尝试用 <code>cloudflare</code>的 CDN 进行加速，一番折腾之后，加了一个寂寞，故放弃 <code>cloudflare</code> 方案；</p>
</li>
<li>
<p>尝试用 <code>阿里云 OSS + CDN</code>的方式进行加速，未遂。原因是 OSS 服务需要域名备案，而域名备案需要ESC(云服务器)，得花钱买，没钱且暂时没精力去折腾什么服务器；</p>
</li>
<li>
<p>尝试用 <code>七牛云</code> 的<strong>免费</strong> <code>OSS + CDN</code> 进行加速，依旧未遂，还是域名备案问题；</p>
</li>
<li>
<p>尝试将网站部署到 <code>Gitee</code> 的 <code>Gitee pages</code>上，以实现加速，但兴致冲冲将代码推送到 <code>Gitee</code> 之后发现，Gitee pages <strong>似乎下线了</strong>。😑</p>
</li>
</ol>
<p>以上问题对于有相关背景的程序员来说，也许根本不算什么，分分钟就解决了。但我只是个新手，完全小白，做这个网站完全是兴趣使然，就当图一乐吧。🤣</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="为什么选择-vercel">为什么选择 Vercel？<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/VercelBlog#%E4%B8%BA%E4%BB%80%E4%B9%88%E9%80%89%E6%8B%A9-vercel" class="hash-link" aria-label="为什么选择 Vercel？的直接链接" title="为什么选择 Vercel？的直接链接">​</a></h2>
<p>主要原因依旧是部署到 git pages 上的网站在国内访问<strong>实在是太慢了</strong>，想换成 Vercel 看看能不能快一点，结果网站的部署异常的顺利！虽然不见得有多快，但部署实在是省心省力，我开始有点喜欢Vercel了，想写个博客总结一下。在这篇文章中，我将记录将 Docusaurus 网站部署到 Vercel 的主要过程。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="准备工作">准备工作：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/VercelBlog#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C" class="hash-link" aria-label="准备工作：的直接链接" title="准备工作：的直接链接">​</a></h3>
<p>如果之前已经学会将 <code>Docusaurus</code> 网站部署到 <code>git pages</code> 上，那么 <code>Vercel部署</code> 自然就显得简单许多，可以说是易如反掌。反之，则起码需要满足下列三个要求：</p>
<ol>
<li>能够构建 <a href="https://www.docusaurus.cn/docs" target="_blank" rel="noopener noreferrer" title="官方参考文档">Docusaurus</a> 项目；</li>
<li>能够将与网站相关的代码<a href="https://blog.csdn.net/jiunian_2761/article/details/122907766" target="_blank" rel="noopener noreferrer" title="参考">推送</a>到 <a href="https://github.com/" target="_blank" rel="noopener noreferrer">github</a> ；</li>
<li>已购买域名；</li>
</ol>
<div class="theme-admonition theme-admonition-danger admonition_xJq3 alert alert--danger"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"></path></svg></span>特别提醒</div><div class="admonitionContent_BuS1"><p>如果没自己域名需要“梯子”才能访问部署成功的网站！自定义域名后方可解决该问题！</p></div></div>
<p>完成以上准备工作后，网站的文件内容大致是这样的：</p>
<p></p>
<p>如果使用的是 <code>SSH</code> 可以进行连接性测试：</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_OeMC">bash</div><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">ssh -T git@github.com</span><br></span></code></pre></div></div>
<p>预期结果大概是：</p>
<p></p>
<p>如果用的是https方式，就用不了上面的测试命令了，但只要 <code>git push</code>能够成功便可。另外，对于<strong>仓库的名称</strong>，可以<strong>不用</strong>是 <code>username.github.io</code>，普通名称的公开仓库应该也可以
（没试过，但我推断大概率可以）</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="vercel-部署步骤">Vercel 部署步骤<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/VercelBlog#vercel-%E9%83%A8%E7%BD%B2%E6%AD%A5%E9%AA%A4" class="hash-link" aria-label="Vercel 部署步骤的直接链接" title="Vercel 部署步骤的直接链接">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="第一步注册并连接-github">第一步：注册并连接 GitHub<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/VercelBlog#%E7%AC%AC%E4%B8%80%E6%AD%A5%E6%B3%A8%E5%86%8C%E5%B9%B6%E8%BF%9E%E6%8E%A5-github" class="hash-link" aria-label="第一步：注册并连接 GitHub的直接链接" title="第一步：注册并连接 GitHub的直接链接">​</a></h3>
<p>打开 <a href="https://vercel.com/" target="_blank" rel="noopener noreferrer">Vercel 官网</a>，注册账号（最好 continue with github）。</p>
<p>已安装的Vercel：</p>
<p></p>
<p>权限设置：</p>
<p></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="第二步导入项目">第二步：导入项目<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/VercelBlog#%E7%AC%AC%E4%BA%8C%E6%AD%A5%E5%AF%BC%E5%85%A5%E9%A1%B9%E7%9B%AE" class="hash-link" aria-label="第二步：导入项目的直接链接" title="第二步：导入项目的直接链接">​</a></h3>
<p>引入包含 Docusaurus 项目的仓库：</p>
<p></p>
<p>Vercel 会自动检测项目类型并配置构建设置，直接点击部署：</p>
<p></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="第三步访问部署结果">第三步：访问部署结果<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/VercelBlog#%E7%AC%AC%E4%B8%89%E6%AD%A5%E8%AE%BF%E9%97%AE%E9%83%A8%E7%BD%B2%E7%BB%93%E6%9E%9C" class="hash-link" aria-label="第三步：访问部署结果的直接链接" title="第三步：访问部署结果的直接链接">​</a></h3>
<p>部署成功后大致是这样的：</p>
<p></p>
<p>如果有梯子的话，点击 Vercel 给出的域名就可以访问已经成功部署的网站了。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="域名配置">域名配置<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/VercelBlog#%E5%9F%9F%E5%90%8D%E9%85%8D%E7%BD%AE" class="hash-link" aria-label="域名配置的直接链接" title="域名配置的直接链接">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="为什么需要自定义域名">为什么需要自定义域名<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/VercelBlog#%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D" class="hash-link" aria-label="为什么需要自定义域名的直接链接" title="为什么需要自定义域名的直接链接">​</a></h3>
<p>没梯子无法访问默认域名，需要配置自定义域名后方可正常访问。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="添加自定义域名">添加自定义域名<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/VercelBlog#%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D" class="hash-link" aria-label="添加自定义域名的直接链接" title="添加自定义域名的直接链接">​</a></h3>
<p>添加域名：</p>
<p></p>
<p>在此处添加域名后，需要返回域名的购买平台 <code>修改DNS</code> 以及 <code>添加记录</code> 。我用的是阿里云：</p>
<p>修改DNS：</p>
<p></p>
<p>添加记录：</p>
<p></p>
<p>上面关于域名验证这记录可能不够详尽，主要是因为我没截图，再回去弄一遍太麻烦。反正大概率是给自己看的，缺几步应该没问题。</p>
<p>配置完毕后是这样的：</p>
<p></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="自动化部署">自动化部署<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/VercelBlog#%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2" class="hash-link" aria-label="自动化部署的直接链接" title="自动化部署的直接链接">​</a></h2>
<p>大功告成！现在可以通过自己的域名访问部署到 Vercel 上的网站了，而且不需要梯子！之后对博客内容进行更新后，想要再进行部署时，git push 成功之后，Vercel会识别到仓库代码的变换然后自动进行部署了！没错，只需：</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_OeMC">bash</div><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">git add .</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git commit -m "commit message"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git push</span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="性能洞察与网站分析">性能洞察与网站分析<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/VercelBlog#%E6%80%A7%E8%83%BD%E6%B4%9E%E5%AF%9F%E4%B8%8E%E7%BD%91%E7%AB%99%E5%88%86%E6%9E%90" class="hash-link" aria-label="性能洞察与网站分析的直接链接" title="性能洞察与网站分析的直接链接">​</a></h2>
<p>此外，我还添加了 <code>Speed Insights</code> 和 <code>Web Analytics</code> 功能，按照 Vercel 提供的<a href="https://vercel.com/docs/speed-insights" target="_blank" rel="noopener noreferrer">教程</a> 进行操作即可，没啥难度。
唯一有点让人感到困惑的可能是第三步。以下是第三步的参考代码：</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_OeMC">src/theme/Root.js</div><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports maybe-class-name">React</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'react'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line code-block-add-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:#393A34">{</span><span class="token imports"> </span><span class="token imports maybe-class-name">SpeedInsights</span><span class="token imports"> </span><span class="token imports punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'@vercel/speed-insights/react'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line code-block-add-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:#393A34">{</span><span class="token imports"> </span><span class="token imports maybe-class-name">Analytics</span><span class="token imports"> </span><span class="token imports punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'@vercel/analytics/react'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function maybe-class-name" style="color:#d73a49">Root</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter punctuation" style="color:#393A34">{</span><span class="token parameter"> children </span><span class="token parameter punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">children</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line code-block-add-line" style="color:#393A34"><span class="token plain">      </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token maybe-class-name">SpeedInsights</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">/</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line code-block-add-line" style="color:#393A34"><span class="token plain">	  </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token maybe-class-name">Analytics</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">/</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token operator" style="color:#393A34">/</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword module" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">default</span><span class="token plain"> </span><span class="token maybe-class-name">Root</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre></div></div><div class="blog-post-comments" style="margin-top:2rem;padding-top:1.5rem;border-top:1px solid var(--ifm-color-emphasis-300)"><div style="margin-top:2rem"><div style="min-height:200px">加载评论中...</div></div></div>]]></content:encoded>
            <category>Vercel</category>
        </item>
        <item>
            <title><![CDATA[添加博客评论]]></title>
            <link>https://EurekaShadow.github.io/EurekaShadow.github.io/blog/AddBlogReview</link>
            <guid>https://EurekaShadow.github.io/EurekaShadow.github.io/blog/AddBlogReview</guid>
            <pubDate>Fri, 22 Aug 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[在 Docusaurus 的博客中添加 giscus 评论🤔]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="在-docusaurus-的博客中添加-giscus-评论"><span class="B2_JnYG">在 Docusaurus 的博客中添加 giscus 评论🤔</span><a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/AddBlogReview#%E5%9C%A8-docusaurus-%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%B7%BB%E5%8A%A0-giscus-%E8%AF%84%E8%AE%BA" class="hash-link" aria-label="在-docusaurus-的博客中添加-giscus-评论的直接链接" title="在-docusaurus-的博客中添加-giscus-评论的直接链接">​</a></h3>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="安装依赖">安装依赖<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/AddBlogReview#%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96" class="hash-link" aria-label="安装依赖的直接链接" title="安装依赖的直接链接">​</a></h2>
<div class="tabs-container tabList__CuJ"><ul role="tablist" aria-orientation="horizontal" class="tabs"><li role="tab" tabindex="0" aria-selected="true" class="tabs__item tabItem_LNqP tabs__item--active">npm</li><li role="tab" tabindex="-1" aria-selected="false" class="tabs__item tabItem_LNqP">yarn</li><li role="tab" tabindex="-1" aria-selected="false" class="tabs__item tabItem_LNqP">pnpm</li></ul><div class="margin-top--md"><div role="tabpanel" class="tabItem_Ymn6"><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">npm install --save @giscus/react</span><br></span></code></pre></div></div></div><div role="tabpanel" class="tabItem_Ymn6" hidden=""><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">yarn add @giscus/react</span><br></span></code></pre></div></div></div><div role="tabpanel" class="tabItem_Ymn6" hidden=""><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">pnpm add @giscus/react</span><br></span></code></pre></div></div></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="创建评论组件">创建评论组件<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/AddBlogReview#%E5%88%9B%E5%BB%BA%E8%AF%84%E8%AE%BA%E7%BB%84%E4%BB%B6" class="hash-link" aria-label="创建评论组件的直接链接" title="创建评论组件的直接链接">​</a></h2>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_OeMC">src/components/Comment.tsx</div><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports maybe-class-name">React</span><span class="token imports punctuation" style="color:#393A34">,</span><span class="token imports"> </span><span class="token imports punctuation" style="color:#393A34">{</span><span class="token imports"> useEffect</span><span class="token imports punctuation" style="color:#393A34">,</span><span class="token imports"> useState </span><span class="token imports punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'react'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports maybe-class-name">BrowserOnly</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'@docusaurus/BrowserOnly'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">default</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">Comment</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">JSX</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access maybe-class-name">Element</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">style</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:#393A34">=</span><span class="token tag script language-javascript punctuation" style="color:#393A34">{</span><span class="token tag script language-javascript punctuation" style="color:#393A34">{</span><span class="token tag script language-javascript" style="color:#00009f"> marginTop</span><span class="token tag script language-javascript operator" style="color:#393A34">:</span><span class="token tag script language-javascript" style="color:#00009f"> </span><span class="token tag script language-javascript string" style="color:#e3116c">'2rem'</span><span class="token tag script language-javascript" style="color:#00009f"> </span><span class="token tag script language-javascript punctuation" style="color:#393A34">}</span><span class="token tag script language-javascript punctuation" style="color:#393A34">}</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag class-name" style="color:#00009f">BrowserOnly</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">fallback</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:#393A34">=</span><span class="token tag script language-javascript punctuation" style="color:#393A34">{</span><span class="token tag script language-javascript tag punctuation" style="color:#393A34">&lt;</span><span class="token tag script language-javascript tag" style="color:#00009f">div</span><span class="token tag script language-javascript tag" style="color:#00009f"> </span><span class="token tag script language-javascript tag attr-name" style="color:#00a4db">style</span><span class="token tag script language-javascript tag script language-javascript script-punctuation punctuation" style="color:#393A34">=</span><span class="token tag script language-javascript tag script language-javascript punctuation" style="color:#393A34">{</span><span class="token tag script language-javascript tag script language-javascript punctuation" style="color:#393A34">{</span><span class="token tag script language-javascript tag script language-javascript" style="color:#00009f"> minHeight</span><span class="token tag script language-javascript tag script language-javascript operator" style="color:#393A34">:</span><span class="token tag script language-javascript tag script language-javascript" style="color:#00009f"> </span><span class="token tag script language-javascript tag script language-javascript string" style="color:#e3116c">'200px'</span><span class="token tag script language-javascript tag script language-javascript" style="color:#00009f"> </span><span class="token tag script language-javascript tag script language-javascript punctuation" style="color:#393A34">}</span><span class="token tag script language-javascript tag script language-javascript punctuation" style="color:#393A34">}</span><span class="token tag script language-javascript tag punctuation" style="color:#393A34">&gt;</span><span class="token tag script language-javascript plain-text" style="color:#00009f">加载评论中...</span><span class="token tag script language-javascript tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag script language-javascript tag" style="color:#00009f">div</span><span class="token tag script language-javascript tag punctuation" style="color:#393A34">&gt;</span><span class="token tag script language-javascript punctuation" style="color:#393A34">}</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">        </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> useThemeConfig </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">require</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'@docusaurus/theme-common'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> useLocation </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">require</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'@docusaurus/router'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token maybe-class-name">Giscus</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">require</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'@giscus/react'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">default</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> themeConfig </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">useThemeConfig</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token dom variable" style="color:#36acaa">location</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">useLocation</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// 修改页面类型检查，适配你的博客路径格式</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// 检查是否为博客文章页面：/blog/文章标题</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> isBlogPostPage </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token regex regex-delimiter" style="color:#36acaa">/</span><span class="token regex regex-source language-regex anchor function" style="color:#d73a49">^</span><span class="token regex regex-source language-regex escape" style="color:#36acaa">\/</span><span class="token regex regex-source language-regex" style="color:#36acaa">blog</span><span class="token regex regex-source language-regex escape" style="color:#36acaa">\/</span><span class="token regex regex-source language-regex char-class char-class-punctuation punctuation" style="color:#393A34">[</span><span class="token regex regex-source language-regex char-class char-class-negation operator" style="color:#393A34">^</span><span class="token regex regex-source language-regex char-class" style="color:#36acaa">/</span><span class="token regex regex-source language-regex char-class char-class-punctuation punctuation" style="color:#393A34">]</span><span class="token regex regex-source language-regex quantifier number" style="color:#36acaa">+</span><span class="token regex regex-source language-regex anchor function" style="color:#d73a49">$</span><span class="token regex regex-delimiter" style="color:#36acaa">/</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">test</span><span class="token punctuation" style="color:#393A34">(</span><span class="token dom variable" style="color:#36acaa">location</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">pathname</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                </span><span class="token punctuation" style="color:#393A34">(</span><span class="token regex regex-delimiter" style="color:#36acaa">/</span><span class="token regex regex-source language-regex anchor function" style="color:#d73a49">^</span><span class="token regex regex-source language-regex escape" style="color:#36acaa">\/</span><span class="token regex regex-source language-regex" style="color:#36acaa">blog</span><span class="token regex regex-source language-regex escape" style="color:#36acaa">\/</span><span class="token regex regex-delimiter" style="color:#36acaa">/</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">test</span><span class="token punctuation" style="color:#393A34">(</span><span class="token dom variable" style="color:#36acaa">location</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">pathname</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!</span><span class="token regex regex-delimiter" style="color:#36acaa">/</span><span class="token regex regex-source language-regex anchor function" style="color:#d73a49">^</span><span class="token regex regex-source language-regex escape" style="color:#36acaa">\/</span><span class="token regex regex-source language-regex" style="color:#36acaa">blog</span><span class="token regex regex-source language-regex escape" style="color:#36acaa">\/</span><span class="token regex regex-source language-regex quantifier number" style="color:#36acaa">?</span><span class="token regex regex-source language-regex anchor function" style="color:#d73a49">$</span><span class="token regex regex-delimiter" style="color:#36acaa">/</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">test</span><span class="token punctuation" style="color:#393A34">(</span><span class="token dom variable" style="color:#36acaa">location</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">pathname</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> </span><span class="token dom variable" style="color:#36acaa">location</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">pathname</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">split</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'/'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">length</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">===</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> isDocPage </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token dom variable" style="color:#36acaa">location</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">pathname</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">startsWith</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'/docs/'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// 调试信息，可以帮助你确认路径匹配</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'Current path:'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token dom variable" style="color:#36acaa">location</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">pathname</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'Is blog post page:'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> isBlogPostPage</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'Is doc page:'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> isDocPage</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// 如果不是博客文章页面或文档页面，不显示评论</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">isBlogPostPage </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!</span><span class="token plain">isDocPage</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">div</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 返回空内容，不显示评论</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> giscus</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">any</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token spread operator" style="color:#393A34">...</span><span class="token plain">themeConfig</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">giscus</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">giscus</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">repo</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!</span><span class="token plain">giscus</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">repoId</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!</span><span class="token plain">giscus</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">categoryId</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">style</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:#393A34">=</span><span class="token tag script language-javascript punctuation" style="color:#393A34">{</span><span class="token tag script language-javascript punctuation" style="color:#393A34">{</span><span class="token tag script language-javascript" style="color:#00009f"> padding</span><span class="token tag script language-javascript operator" style="color:#393A34">:</span><span class="token tag script language-javascript" style="color:#00009f"> </span><span class="token tag script language-javascript string" style="color:#e3116c">'1rem'</span><span class="token tag script language-javascript punctuation" style="color:#393A34">,</span><span class="token tag script language-javascript" style="color:#00009f"> textAlign</span><span class="token tag script language-javascript operator" style="color:#393A34">:</span><span class="token tag script language-javascript" style="color:#00009f"> </span><span class="token tag script language-javascript string" style="color:#e3116c">'center'</span><span class="token tag script language-javascript punctuation" style="color:#393A34">,</span><span class="token tag script language-javascript" style="color:#00009f"> color</span><span class="token tag script language-javascript operator" style="color:#393A34">:</span><span class="token tag script language-javascript" style="color:#00009f"> </span><span class="token tag script language-javascript string" style="color:#e3116c">'red'</span><span class="token tag script language-javascript" style="color:#00009f"> </span><span class="token tag script language-javascript punctuation" style="color:#393A34">}</span><span class="token tag script language-javascript punctuation" style="color:#393A34">}</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">                评论系统配置缺失</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">              </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">div</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// 处理路径</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> path </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token dom variable" style="color:#36acaa">location</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">pathname</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">replace</span><span class="token punctuation" style="color:#393A34">(</span><span class="token regex regex-delimiter" style="color:#36acaa">/</span><span class="token regex regex-source language-regex anchor function" style="color:#d73a49">^</span><span class="token regex regex-source language-regex escape" style="color:#36acaa">\/</span><span class="token regex regex-source language-regex alternation keyword" style="color:#00009f">|</span><span class="token regex regex-source language-regex escape" style="color:#36acaa">\/</span><span class="token regex regex-source language-regex anchor function" style="color:#d73a49">$</span><span class="token regex regex-delimiter" style="color:#36acaa">/</span><span class="token regex regex-flags" style="color:#36acaa">g</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">''</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> subPath </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> path </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"index"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          giscus</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">term</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> subPath</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// 主题监听组件</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:#d73a49">GiscusWithThemeListener</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">theme</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> setTheme</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">useState</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'light'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token function" style="color:#d73a49">useEffect</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:#d73a49">updateTheme</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> currentTheme </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token dom variable" style="color:#36acaa">document</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">documentElement</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">getAttribute</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'data-theme'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token function" style="color:#d73a49">setTheme</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">currentTheme </span><span class="token operator" style="color:#393A34">===</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'dark'</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'transparent_dark'</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'light'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              </span><span class="token comment" style="color:#999988;font-style:italic">// 初始化</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              </span><span class="token function" style="color:#d73a49">updateTheme</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              </span><span class="token comment" style="color:#999988;font-style:italic">// 监听主题变化</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> observer </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">MutationObserver</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token function" style="color:#d73a49">updateTheme</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              observer</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">observe</span><span class="token punctuation" style="color:#393A34">(</span><span class="token dom variable" style="color:#36acaa">document</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">documentElement</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                attributes</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                attributeFilter</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">'data-theme'</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> observer</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">disconnect</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag class-name" style="color:#00009f">Giscus</span><span class="token tag" style="color:#00009f"> </span><span class="token tag spread punctuation" style="color:#393A34">{</span><span class="token tag spread operator" style="color:#393A34">...</span><span class="token tag spread" style="color:#00009f">giscus</span><span class="token tag spread punctuation" style="color:#393A34">}</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">theme</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:#393A34">=</span><span class="token tag script language-javascript punctuation" style="color:#393A34">{</span><span class="token tag script language-javascript" style="color:#00009f">theme</span><span class="token tag script language-javascript punctuation" style="color:#393A34">}</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag class-name" style="color:#00009f">GiscusWithThemeListener</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag class-name" style="color:#00009f">BrowserOnly</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">div</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>特别说明</div><div class="admonitionContent_BuS1"><p>上面 Comment.tsx中的正则表达式匹配的是：</p><ul>
<li>✅ <code>/blog/FirstBlog</code></li>
<li>✅ <code>/blog/任何单个路径段</code></li>
<li>❌ <code>/blog/</code>(博客列表页)</li>
<li>❌ <code>/blog/category/subcategory</code>(多级路径)</li>
</ul></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="博客页面启用评论">博客页面启用评论<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/AddBlogReview#%E5%8D%9A%E5%AE%A2%E9%A1%B5%E9%9D%A2%E5%90%AF%E7%94%A8%E8%AF%84%E8%AE%BA" class="hash-link" aria-label="博客页面启用评论的直接链接" title="博客页面启用评论的直接链接">​</a></h2>
<p>博客页面由 <code>docusaurus</code> 的 <code>BlogPostItem</code> 组件渲染，下面是自定义方法。</p>
<ol>
<li>swizzle <code>BlogPostItem </code>：</li>
</ol>
<div class="tabs-container tabList__CuJ"><ul role="tablist" aria-orientation="horizontal" class="tabs"><li role="tab" tabindex="0" aria-selected="true" class="tabs__item tabItem_LNqP tabs__item--active">npm</li><li role="tab" tabindex="-1" aria-selected="false" class="tabs__item tabItem_LNqP">yarn</li><li role="tab" tabindex="-1" aria-selected="false" class="tabs__item tabItem_LNqP">pnpm</li></ul><div class="margin-top--md"><div role="tabpanel" class="tabItem_Ymn6"><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">npm run swizzle @docusaurus/theme-classic BlogPostItem -- --wrap --typescript</span><br></span></code></pre></div></div></div><div role="tabpanel" class="tabItem_Ymn6" hidden=""><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">yarn swizzle @docusaurus/theme-classic BlogPostItem --wrap --typescript</span><br></span></code></pre></div></div></div><div role="tabpanel" class="tabItem_Ymn6" hidden=""><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">pnpm run swizzle @docusaurus/theme-classic BlogPostItem -- --wrap --typescript</span><br></span></code></pre></div></div></div></div></div>
<p>出现警报说不安全什么的，直接</p>
<blockquote>
<p>YES: I know what I am doing!</p>
</blockquote>
<ol start="2">
<li>然后在 <code>BlogPostItem</code> 的 <code>index.tsx</code> 里面，将其<strong>全部替换</strong>为下列的代码：</li>
</ol>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_OeMC">src/theme/BlogPostItem/index.tsx</div><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports maybe-class-name">React</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'react'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports maybe-class-name">BlogPostItem</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'@theme-original/BlogPostItem'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token maybe-class-name">WrapperProps</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'@docusaurus/types'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports maybe-class-name">Comment</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'@site/src/components/Comment'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> </span><span class="token class-name">Props</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token maybe-class-name">WrapperProps</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token keyword" style="color:#00009f">typeof</span><span class="token plain"> </span><span class="token maybe-class-name">BlogPostItem</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">default</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">BlogPostItemWrapper</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">props</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">Props</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">JSX</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access maybe-class-name">Element</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> children</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token spread operator" style="color:#393A34">...</span><span class="token plain">otherProps </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> props</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag class-name" style="color:#00009f">BlogPostItem</span><span class="token tag" style="color:#00009f"> </span><span class="token tag spread punctuation" style="color:#393A34">{</span><span class="token tag spread operator" style="color:#393A34">...</span><span class="token tag spread" style="color:#00009f">otherProps</span><span class="token tag spread punctuation" style="color:#393A34">}</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">      </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">children</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">div</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">className</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">blog-post-comments</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">style</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:#393A34">=</span><span class="token tag script language-javascript punctuation" style="color:#393A34">{</span><span class="token tag script language-javascript punctuation" style="color:#393A34">{</span><span class="token tag script language-javascript" style="color:#00009f"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token tag script language-javascript" style="color:#00009f">        marginTop</span><span class="token tag script language-javascript operator" style="color:#393A34">:</span><span class="token tag script language-javascript" style="color:#00009f"> </span><span class="token tag script language-javascript string" style="color:#e3116c">'2rem'</span><span class="token tag script language-javascript punctuation" style="color:#393A34">,</span><span class="token tag script language-javascript" style="color:#00009f"></span><br></span><span class="token-line" style="color:#393A34"><span class="token tag script language-javascript" style="color:#00009f">        paddingTop</span><span class="token tag script language-javascript operator" style="color:#393A34">:</span><span class="token tag script language-javascript" style="color:#00009f"> </span><span class="token tag script language-javascript string" style="color:#e3116c">'1.5rem'</span><span class="token tag script language-javascript punctuation" style="color:#393A34">,</span><span class="token tag script language-javascript" style="color:#00009f"></span><br></span><span class="token-line" style="color:#393A34"><span class="token tag script language-javascript" style="color:#00009f">        borderTop</span><span class="token tag script language-javascript operator" style="color:#393A34">:</span><span class="token tag script language-javascript" style="color:#00009f"> </span><span class="token tag script language-javascript string" style="color:#e3116c">'1px solid var(--ifm-color-emphasis-300)'</span><span class="token tag script language-javascript" style="color:#00009f"></span><br></span><span class="token-line" style="color:#393A34"><span class="token tag script language-javascript" style="color:#00009f">      </span><span class="token tag script language-javascript punctuation" style="color:#393A34">}</span><span class="token tag script language-javascript punctuation" style="color:#393A34">}</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">        </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag class-name" style="color:#00009f">Comment</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">div</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag class-name" style="color:#00009f">BlogPostItem</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="配置giscus">配置giscus<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/AddBlogReview#%E9%85%8D%E7%BD%AEgiscus" class="hash-link" aria-label="配置giscus的直接链接" title="配置giscus的直接链接">​</a></h2>
<p><a href="https://giscus.app/zh-CN" target="_blank" rel="noopener noreferrer">giscus官网</a></p>
<p></p>
<p>所谓的 <code>Discussions</code> 功能是指这里：<code>Github-&gt;Settings-&gt;General</code></p>
<p></p>
<p>三个条件都满足时，输入：<code>用户名/仓库名</code>，giscus提示仓库满足条件时，可以正式开始配置</p>
<ol>
<li>分类选 <code>General</code>；特性第一个默认选，最后两个可选可不选（即使不选后续也可以继续配置）</li>
</ol>
<p></p>
<ol start="2">
<li>这四个信息：</li>
</ol>
<p></p>
<ol start="3">
<li>依次填入到： <code>docusaurus.config.js</code> 的这个位置</li>
</ol>
<p></p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockTitle_OeMC">docusaurus.config.js</div><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// 添加 giscus 评论功能</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token literal-property property" style="color:#36acaa">giscus</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token literal-property property" style="color:#36acaa">repo</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'username/username.github.io'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token literal-property property" style="color:#36acaa">repoId</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'********'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token literal-property property" style="color:#36acaa">category</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'General'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token literal-property property" style="color:#36acaa">categoryId</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'********'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token literal-property property" style="color:#36acaa">lang</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'zh-CN'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 中文评论模块</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token literal-property property" style="color:#36acaa">inputPosition</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'top'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token comment" style="color:#999988;font-style:italic">//表示输入框在评论区顶部</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><br></span></code></pre></div></div>
<ol start="4">
<li>最后，<code>yarn start</code></li>
</ol>
<p>大功告成！这时就会看到已经出现评论了：</p>
<p></p>
<p>想要给 <code>文档页面</code> 也添加这样的评论功能，可以参考这篇<a href="https://imroc.cc/note/docusaurus/giscus" target="_blank" rel="noopener noreferrer">文章</a>。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="-参考资料">📚 参考资料<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/AddBlogReview#-%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99" class="hash-link" aria-label="📚 参考资料的直接链接" title="📚 参考资料的直接链接">​</a></h2>
<p><a href="https://imroc.cc/note/docusaurus/giscus" target="_blank" rel="noopener noreferrer">添加 giscus 评论功能</a></p><div class="blog-post-comments" style="margin-top:2rem;padding-top:1.5rem;border-top:1px solid var(--ifm-color-emphasis-300)"><div style="margin-top:2rem"><div style="min-height:200px">加载评论中...</div></div></div>]]></content:encoded>
            <category>博客</category>
        </item>
        <item>
            <title><![CDATA[三数之和]]></title>
            <link>https://EurekaShadow.github.io/EurekaShadow.github.io/blog/LeetCode15</link>
            <guid>https://EurekaShadow.github.io/EurekaShadow.github.io/blog/LeetCode15</guid>
            <pubDate>Fri, 22 Aug 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[力扣面试经典——15题]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="力扣面试经典15题"><span class="B2_JnYG"><a href="https://leetcode.cn/problems/3sum/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer" title="力扣">力扣面试经典——15题</a></span><a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode15#%E5%8A%9B%E6%89%A3%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B815%E9%A2%98" class="hash-link" aria-label="力扣面试经典15题的直接链接" title="力扣面试经典15题的直接链接">​</a></h3>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-参考代码">💡 参考代码：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode15#-%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81" class="hash-link" aria-label="💡 参考代码：的直接链接" title="💡 参考代码：的直接链接">​</a></h3>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// 比较函数，用于qsort排序</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">compare</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> b</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">a </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">b</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * Return an array of arrays of size *returnSize.</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * The sizes of the arrays are returned as *returnColumnSizes array.</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">threeSum</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> returnSize</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> returnColumnSizes</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 初始化返回结果数量为0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">returnSize </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 如果数组长度小于3，无法构成三元组，直接返回</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">numsSize </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 对数组进行排序，时间复杂度O(nlogn)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">qsort</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">nums</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> compare</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 分配结果数组空间，最坏情况下所有组合都满足条件</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token function" style="color:#d73a49">malloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> numsSize </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">returnColumnSizes </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token function" style="color:#d73a49">malloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> numsSize </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 遍历数组，固定第一个数</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> numsSize </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 如果当前数字大于0，由于数组已排序，后面的数字都大于0，三数之和不可能为0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 跳过重复元素，避免重复的三元组</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">continue</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 使用双指针法查找另外两个数</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> left </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 左指针指向i之后的第一个元素</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> right </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> numsSize </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 右指针指向数组末尾</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 双指针向中间移动查找满足条件的组合</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">left </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> right</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> sum </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">left</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">right</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">sum </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token comment" style="color:#999988;font-style:italic">// 找到满足条件的三元组</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                result</span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">returnSize</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token function" style="color:#d73a49">malloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                result</span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">returnSize</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                result</span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">returnSize</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">left</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                result</span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">returnSize</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">right</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">returnColumnSizes</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">returnSize</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">returnSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token comment" style="color:#999988;font-style:italic">// 跳过重复元素</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">left </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> right </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">left</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">left </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    left</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">left </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> right </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">right</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">right </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    right</span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token comment" style="color:#999988;font-style:italic">// 移动指针继续查找</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                left</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                right</span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">sum </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token comment" style="color:#999988;font-style:italic">// 三数之和小于0，说明需要更大的数，左指针右移</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                left</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token comment" style="color:#999988;font-style:italic">// 三数之和大于0，说明需要更小的数，右指针左移</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                right</span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> result</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-总结">📖 总结：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode15#-%E6%80%BB%E7%BB%93" class="hash-link" aria-label="📖 总结：的直接链接" title="📖 总结：的直接链接">​</a></h3>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>点击展开题目总结</summary><div><div class="collapsibleContent_i85q"><h1>🤔 三数之和</h1><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1️⃣-题目核心信息">1️⃣ 题目核心信息<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode15#1%EF%B8%8F%E2%83%A3-%E9%A2%98%E7%9B%AE%E6%A0%B8%E5%BF%83%E4%BF%A1%E6%81%AF" class="hash-link" aria-label="1️⃣ 题目核心信息的直接链接" title="1️⃣ 题目核心信息的直接链接">​</a></h2><p>🎯 <strong>功能描述</strong>：在给定整数数组中找出所有不重复的三元组，使得三个数的和为0</p><p>📥 <strong>输入输出</strong>：</p><ul>
<li><strong>输入</strong>：整数数组<code>nums</code>及其长度<code>numsSize</code></li>
<li><strong>输出</strong>：所有和为0的不重复三元组组成的二维数组，通过<code>returnSize</code>返回结果数量，通过<code>returnColumnSizes</code>返回每行的列数</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2️⃣-实现原理">2️⃣ 实现原理<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode15#2%EF%B8%8F%E2%83%A3-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86" class="hash-link" aria-label="2️⃣ 实现原理的直接链接" title="2️⃣ 实现原理的直接链接">​</a></h2><p>💡 <strong>核心思路</strong>：先对数组排序，然后固定一个数，用双指针在剩余数组中查找另外两个数，使得三数之和为0</p><p>📋 <strong>实现步骤</strong>：</p><ol>
<li>对输入数组进行排序</li>
<li>遍历数组，固定第一个数<code>nums[i]</code></li>
<li>在<code>nums[i]</code>之后的子数组中使用双指针法查找另外两个数</li>
<li>左指针指向<code>i+1</code>，右指针指向数组末尾，根据三数之和调整指针位置</li>
<li>跳过重复元素避免重复三元组</li>
</ol><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3️⃣-关键点解析">3️⃣ 关键点解析<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode15#3%EF%B8%8F%E2%83%A3-%E5%85%B3%E9%94%AE%E7%82%B9%E8%A7%A3%E6%9E%90" class="hash-link" aria-label="3️⃣ 关键点解析的直接链接" title="3️⃣ 关键点解析的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-代码技巧">🎯 代码技巧<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode15#-%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7" class="hash-link" aria-label="🎯 代码技巧的直接链接" title="🎯 代码技巧的直接链接">​</a></h3><ul>
<li><strong>排序预处理</strong>：通过对数组排序，使双指针法成为可能，并便于去重</li>
<li><strong>双指针法</strong>：在有序数组中查找两数之和，时间复杂度从O(n²)降到O(n)</li>
<li><strong>去重策略</strong>：在遍历和查找过程中跳过重复元素，确保结果不重复</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4️⃣-使用场景">4️⃣ 使用场景<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode15#4%EF%B8%8F%E2%83%A3-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="4️⃣ 使用场景的直接链接" title="4️⃣ 使用场景的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-适用情况">✅ 适用情况：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode15#-%E9%80%82%E7%94%A8%E6%83%85%E5%86%B5" class="hash-link" aria-label="✅ 适用情况：的直接链接" title="✅ 适用情况：的直接链接">​</a></h3><ul>
<li>在数组中查找固定元素个数的组合问题</li>
<li>需要找出满足特定和值的数字组合</li>
<li>数据规模适中且对时间复杂度有要求的场景</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-前提条件">⚠️ 前提条件：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode15#%EF%B8%8F-%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6" class="hash-link" aria-label="⚠️ 前提条件：的直接链接" title="⚠️ 前提条件：的直接链接">​</a></h3><ul>
<li>输入数组至少包含3个元素</li>
<li>数组元素可以为负数、零或正数</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5️⃣-复杂度分析">5️⃣ 复杂度分析<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode15#5%EF%B8%8F%E2%83%A3-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90" class="hash-link" aria-label="5️⃣ 复杂度分析的直接链接" title="5️⃣ 复杂度分析的直接链接">​</a></h2><ul>
<li>
<p>⏱️ 时间复杂度：O(n²)，其中n为数组长度。排序需要O(n log n)，外层循环O(n)，内层双指针O(n)</p>
</li>
<li>
<p>💾 空间复杂度：O(1)，不考虑返回数组的空间，只使用常数级别的额外空间</p>
</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6️⃣-注意事项">6️⃣ 注意事项<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode15#6%EF%B8%8F%E2%83%A3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="6️⃣ 注意事项的直接链接" title="6️⃣ 注意事项的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-边界情况">🚩 边界情况：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode15#-%E8%BE%B9%E7%95%8C%E6%83%85%E5%86%B5" class="hash-link" aria-label="🚩 边界情况：的直接链接" title="🚩 边界情况：的直接链接">​</a></h3><ul>
<li>数组长度小于3的情况</li>
<li>数组全为正数或全为负数的情况</li>
<li>数组中有大量重复元素的情况</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-易错点">💥 易错点：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode15#-%E6%98%93%E9%94%99%E7%82%B9" class="hash-link" aria-label="💥 易错点：的直接链接" title="💥 易错点：的直接链接">​</a></h3><ul>
<li>忘记对结果去重，导致重复三元组</li>
<li>双指针移动条件判断错误</li>
<li>边界条件处理不当，可能导致数组越界</li>
<li>忽略排序的重要性，影响算法正确性</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="7⃣-补充说明">7⃣ 补充说明<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode15#7%E2%83%A3-%E8%A1%A5%E5%85%85%E8%AF%B4%E6%98%8E" class="hash-link" aria-label="7⃣ 补充说明的直接链接" title="7⃣ 补充说明的直接链接">​</a></h2><p>以 <code>nums = [-1, 0, 1, 2, -1, -4]</code> 为例：</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="第一步排序">第一步：排序<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode15#%E7%AC%AC%E4%B8%80%E6%AD%A5%E6%8E%92%E5%BA%8F" class="hash-link" aria-label="第一步：排序的直接链接" title="第一步：排序的直接链接">​</a></h3><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">qsort</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">nums</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> numsSize</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> compare</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre></div></div><p>排序后：<code>nums = [-4, -1, -1, 0, 1, 2]</code></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="第二步外层循环遍历">第二步：外层循环遍历<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode15#%E7%AC%AC%E4%BA%8C%E6%AD%A5%E5%A4%96%E5%B1%82%E5%BE%AA%E7%8E%AF%E9%81%8D%E5%8E%86" class="hash-link" aria-label="第二步：外层循环遍历的直接链接" title="第二步：外层循环遍历的直接链接">​</a></h3><p>开始遍历数组，固定第一个数：</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="i--0nums0---4">i = 0，<code>nums[0] = -4</code><a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode15#i--0nums0---4" class="hash-link" aria-label="i--0nums0---4的直接链接" title="i--0nums0---4的直接链接">​</a></h4><ul>
<li><code>nums[0] = -4 &lt;= 0</code>，继续处理</li>
<li><code>left = 1, right = 5</code></li>
<li>双指针查找过程：<!-- -->
<ul>
<li><code>nums[0] + nums[1] + nums[5] = -4 + (-1) + 2 = -3 &lt; 0</code>，<code>left++</code></li>
<li><code>nums[0] + nums[2] + nums[5] = -4 + (-1) + 2 = -3 &lt; 0</code>，<code>left++</code></li>
<li><code>nums[0] + nums[3] + nums[5] = -4 + 0 + 2 = -2 &lt; 0</code>，<code>left++</code></li>
<li><code>nums[0] + nums[4] + nums[5] = -4 + 1 + 2 = -1 &lt; 0</code>，<code>left++</code></li>
</ul>
</li>
<li><code>left = right</code>，结束本轮</li>
</ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="i--1nums1---1">i = 1，<code>nums[1] = -1</code><a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode15#i--1nums1---1" class="hash-link" aria-label="i--1nums1---1的直接链接" title="i--1nums1---1的直接链接">​</a></h4><ul>
<li><code>nums[1] = -1 &lt;= 0</code>，继续处理</li>
<li><code>left = 2, right = 5</code></li>
<li>双指针查找过程：<!-- -->
<ul>
<li><code>nums[1] + nums[2] + nums[5] = -1 + (-1) + 2 = 0 == 0</code>，找到三元组<code>[-1, -1, 2]</code>
<ul>
<li>记录结果</li>
<li>跳过重复：<code>nums[2] == nums[3]</code>，所以<code>left++</code>，<code>left = 3</code></li>
<li><code>right--</code>，<code>right = 4</code></li>
</ul>
</li>
<li><code>nums[1] + nums[3] + nums[4] = -1 + 0 + 1 = 0 == 0</code>，找到三元组<code>[-1, 0, 1]</code>
<ul>
<li>记录结果</li>
<li><code>left++</code>，<code>left = 4</code></li>
<li><code>right--</code>，<code>right = 3</code></li>
</ul>
</li>
</ul>
</li>
<li><code>left &gt; right</code>，结束本轮</li>
</ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="i--2nums2---1">i = 2，<code>nums[2] = -1</code><a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode15#i--2nums2---1" class="hash-link" aria-label="i--2nums2---1的直接链接" title="i--2nums2---1的直接链接">​</a></h4><ul>
<li><code>nums[2] = -1 &lt;= 0</code>，但是<code>nums[2] == nums[1]</code>，跳过避免重复</li>
</ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="i--3nums3--0">i = 3，<code>nums[3] = 0</code><a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode15#i--3nums3--0" class="hash-link" aria-label="i--3nums3--0的直接链接" title="i--3nums3--0的直接链接">​</a></h4><ul>
<li><code>nums[3] = 0 &lt;= 0</code>，继续处理</li>
<li><code>left = 4, right = 5</code></li>
<li>双指针查找过程：<!-- -->
<ul>
<li><code>nums[3] + nums[4] + nums[5] = 0 + 1 + 2 = 3 &gt; 0</code>，<code>right--</code></li>
</ul>
</li>
<li><code>left = right</code>，结束本轮</li>
</ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="i--4nums4--1">i = 4，<code>nums[4] = 1</code><a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode15#i--4nums4--1" class="hash-link" aria-label="i--4nums4--1的直接链接" title="i--4nums4--1的直接链接">​</a></h4><ul>
<li><code>nums[4] = 1 &gt; 0</code>，直接break，后续元素都大于0，不可能找到和为0的三元组</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="最终结果">最终结果<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode15#%E6%9C%80%E7%BB%88%E7%BB%93%E6%9E%9C" class="hash-link" aria-label="最终结果的直接链接" title="最终结果的直接链接">​</a></h3><p>得到两个不重复的三元组：</p><ol>
<li><code>[-1, -1, 2]</code></li>
<li><code>[-1, 0, 1]</code></li>
</ol><p>这个过程展示了算法如何通过排序和双指针技巧有效地找到所有满足条件的三元组，并通过跳过重复元素来避免重复结果。</p></div></div></details>
<p><strong>这道题我还不理解，明天我一定补上！</strong></p><div class="blog-post-comments" style="margin-top:2rem;padding-top:1.5rem;border-top:1px solid var(--ifm-color-emphasis-300)"><div style="margin-top:2rem"><div style="min-height:200px">加载评论中...</div></div></div>]]></content:encoded>
            <category>数组</category>
            <category>双指针</category>
            <category>排序</category>
        </item>
        <item>
            <title><![CDATA[盛最多水的容器]]></title>
            <link>https://EurekaShadow.github.io/EurekaShadow.github.io/blog/LeetCode11</link>
            <guid>https://EurekaShadow.github.io/EurekaShadow.github.io/blog/LeetCode11</guid>
            <pubDate>Thu, 21 Aug 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[力扣面试经典——11题]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="力扣面试经典11题"><span class="B2_JnYG"><a href="https://leetcode.cn/problems/container-with-most-water/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer" title="力扣">力扣面试经典——11题</a></span><a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode11#%E5%8A%9B%E6%89%A3%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B811%E9%A2%98" class="hash-link" aria-label="力扣面试经典11题的直接链接" title="力扣面试经典11题的直接链接">​</a></h3>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-参考代码">💡 参考代码：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode11#-%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81" class="hash-link" aria-label="💡 参考代码：的直接链接" title="💡 参考代码：的直接链接">​</a></h3>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 盛最多水的容器 - 双指针解法</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param height 整数数组，表示每条垂线的高度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param heightSize 数组长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 容器可以储存的最大水量</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">maxArea</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> height</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> heightSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 初始化左右指针</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> left </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">              </span><span class="token comment" style="color:#999988;font-style:italic">// 左指针指向数组开始</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> right </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> heightSize </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 右指针指向数组末尾</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> maxWater </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// 记录最大储水量</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 当左指针小于右指针时继续循环</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">left </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> right</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 计算当前容器的储水量</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 面积 = 两线中较短的高度 × 两线之间的距离</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> currentWater </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">right </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> left</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                          </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">height</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">left</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> height</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">right</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> height</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">left</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> height</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">right</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 更新最大储水量</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">currentWater </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> maxWater</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            maxWater </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> currentWater</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 移动较短的那根垂线的指针</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 因为只有这样才能可能找到更大的面积</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">height</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">left</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> height</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">right</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            left</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 移动左指针</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            right</span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 移动右指针</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> maxWater</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 返回最大储水量</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-总结">📖 总结：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode11#-%E6%80%BB%E7%BB%93" class="hash-link" aria-label="📖 总结：的直接链接" title="📖 总结：的直接链接">​</a></h3>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>点击展开题目总结</summary><div><div class="collapsibleContent_i85q"><h1>🤔 盛最多水的容器</h1><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1️⃣-题目核心信息">1️⃣ 题目核心信息<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode11#1%EF%B8%8F%E2%83%A3-%E9%A2%98%E7%9B%AE%E6%A0%B8%E5%BF%83%E4%BF%A1%E6%81%AF" class="hash-link" aria-label="1️⃣ 题目核心信息的直接链接" title="1️⃣ 题目核心信息的直接链接">​</a></h2><p>🎯 <strong>功能描述</strong>：给定n条垂线的高度数组，找出其中两条线使得它们与x轴构成的容器能容纳最多的水</p><p>📥 <strong>输入输出</strong>：</p><ul>
<li><strong>输入</strong>：<code>height</code>整数数组表示每条垂线高度，<code>heightSize</code>表示数组长度</li>
<li><strong>输出</strong>：返回容器可以储存的最大水量（面积）</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2️⃣-实现原理">2️⃣ 实现原理<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode11#2%EF%B8%8F%E2%83%A3-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86" class="hash-link" aria-label="2️⃣ 实现原理的直接链接" title="2️⃣ 实现原理的直接链接">​</a></h2><p>💡 <strong>核心思路</strong>：使用双指针法从数组两端向中间移动，每次移动较短边的指针以寻找可能的最大面积</p><p>📋 <strong>实现步骤</strong>：</p><ol>
<li>初始化左右指针分别指向数组首尾</li>
<li>计算当前两指针构成的容器面积</li>
<li>更新记录的最大面积值</li>
<li>移动较短边的指针，重复步骤2-3直到指针相遇</li>
</ol><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3️⃣-关键点解析">3️⃣ 关键点解析<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode11#3%EF%B8%8F%E2%83%A3-%E5%85%B3%E9%94%AE%E7%82%B9%E8%A7%A3%E6%9E%90" class="hash-link" aria-label="3️⃣ 关键点解析的直接链接" title="3️⃣ 关键点解析的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-代码技巧">🎯 代码技巧<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode11#-%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7" class="hash-link" aria-label="🎯 代码技巧的直接链接" title="🎯 代码技巧的直接链接">​</a></h3><ul>
<li>使用三元运算符简化高度比较：<code>height[left] &lt; height[right] ? height[left] : height[right]</code></li>
<li>贪心策略：总是移动较短边以寻找更大面积的可能性</li>
<li>面积计算公式：宽度×较短高度 = <code>(right-left) * min(height[left], height[right])</code></li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4️⃣-使用场景">4️⃣ 使用场景<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode11#4%EF%B8%8F%E2%83%A3-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="4️⃣ 使用场景的直接链接" title="4️⃣ 使用场景的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-适用情况">✅ 适用情况：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode11#-%E9%80%82%E7%94%A8%E6%83%85%E5%86%B5" class="hash-link" aria-label="✅ 适用情况：的直接链接" title="✅ 适用情况：的直接链接">​</a></h3><ul>
<li>需要在一个数组中找到两个元素使某种乘积最大化</li>
<li>可以用双指针优化暴力解法的问题</li>
<li>求解具有对称性质的最优化问题</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-前提条件">⚠️ 前提条件：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode11#%EF%B8%8F-%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6" class="hash-link" aria-label="⚠️ 前提条件：的直接链接" title="⚠️ 前提条件：的直接链接">​</a></h3><ul>
<li>输入数组至少包含两个元素</li>
<li>数组元素为非负整数</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5️⃣-复杂度分析">5️⃣ 复杂度分析<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode11#5%EF%B8%8F%E2%83%A3-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90" class="hash-link" aria-label="5️⃣ 复杂度分析的直接链接" title="5️⃣ 复杂度分析的直接链接">​</a></h2><ul>
<li>
<p>⏱️ 时间复杂度：O(n)，其中n是数组长度，每个元素最多访问一次</p>
</li>
<li>
<p>💾 空间复杂度：O(1)，只使用常数额外空间</p>
</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6️⃣-注意事项">6️⃣ 注意事项<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode11#6%EF%B8%8F%E2%83%A3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="6️⃣ 注意事项的直接链接" title="6️⃣ 注意事项的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-边界情况">🚩 边界情况：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode11#-%E8%BE%B9%E7%95%8C%E6%83%85%E5%86%B5" class="hash-link" aria-label="🚩 边界情况：的直接链接" title="🚩 边界情况：的直接链接">​</a></h3><ul>
<li>数组只有两个元素的情况</li>
<li>所有元素高度相同的情况</li>
<li>数组为空或只有一个元素的情况（题目保证不会出现）</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-易错点">💥 易错点：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode11#-%E6%98%93%E9%94%99%E7%82%B9" class="hash-link" aria-label="💥 易错点：的直接链接" title="💥 易错点：的直接链接">​</a></h3><ul>
<li>错误地移动较高边的指针，导致错过最优解</li>
<li>面积计算时忘记取两线中的较小值作为高度</li>
<li>循环条件判断错误，可能导致指针越界</li>
</ul></div></div></details><div class="blog-post-comments" style="margin-top:2rem;padding-top:1.5rem;border-top:1px solid var(--ifm-color-emphasis-300)"><div style="margin-top:2rem"><div style="min-height:200px">加载评论中...</div></div></div>]]></content:encoded>
            <category>数组</category>
            <category>双指针</category>
            <category>贪心</category>
        </item>
        <item>
            <title><![CDATA[两数之和Ⅱ-输入有序数组]]></title>
            <link>https://EurekaShadow.github.io/EurekaShadow.github.io/blog/LeetCode167</link>
            <guid>https://EurekaShadow.github.io/EurekaShadow.github.io/blog/LeetCode167</guid>
            <pubDate>Wed, 20 Aug 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[力扣面试经典——167题]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="力扣面试经典167题"><span class="B2_JnYG"><a href="https://leetcode.cn/problems/two-sum-ii-input-array-is-sorted/description/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer" title="力扣">力扣面试经典——167题</a></span><a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode167#%E5%8A%9B%E6%89%A3%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B8167%E9%A2%98" class="hash-link" aria-label="力扣面试经典167题的直接链接" title="力扣面试经典167题的直接链接">​</a></h3>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-参考代码">💡 参考代码：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode167#-%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81" class="hash-link" aria-label="💡 参考代码：的直接链接" title="💡 参考代码：的直接链接">​</a></h3>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 两数之和 II - 输入有序数组</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 给定一个按非递减顺序排列的整数数组，找出两个数使得它们的和等于目标值</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 返回这两个数的下标（下标从1开始）</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 解题思路：</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 使用双指针法，利用数组有序的特性</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 设置左指针指向数组开始，右指针指向数组结束</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 根据当前两数之和与目标值的比较，移动指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 时间复杂度：O(n) - 最多遍历一次数组</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 空间复杂度：O(1) - 只使用常量级额外空间</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param numbers 输入的有序整数数组</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param numbersSize 数组长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param target 目标和</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param returnSize 返回数组的长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 包含两个下标的数组</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">twoSum</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> numbers</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> numbersSize</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> target</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> returnSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 分配返回数组内存</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token function" style="color:#d73a49">malloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">2</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">returnSize </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 初始化双指针</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> left </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// 左指针，指向数组开始</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> right </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> numbersSize </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 右指针，指向数组结束</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 双指针向中间移动查找</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">left </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> right</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> sum </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> numbers</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">left</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> numbers</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">right</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">sum </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> target</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 找到目标和，注意题目要求下标从1开始</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            result</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> left </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            result</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> right </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> result</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">sum </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> target</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 当前和小于目标值，左指针右移增大和值</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            left</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 当前和大于目标值，右指针左移减小和值</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            right</span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 根据题目保证有唯一解，此处不会执行到</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> result</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-总结">📖 总结：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode167#-%E6%80%BB%E7%BB%93" class="hash-link" aria-label="📖 总结：的直接链接" title="📖 总结：的直接链接">​</a></h3>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>点击展开题目总结</summary><div><div class="collapsibleContent_i85q"><h1>🤔 两数之和Ⅱ-输入有序数组</h1><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1️⃣-题目核心信息">1️⃣ 题目核心信息<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode167#1%EF%B8%8F%E2%83%A3-%E9%A2%98%E7%9B%AE%E6%A0%B8%E5%BF%83%E4%BF%A1%E6%81%AF" class="hash-link" aria-label="1️⃣ 题目核心信息的直接链接" title="1️⃣ 题目核心信息的直接链接">​</a></h2><p>🎯 <strong>功能描述</strong>：在一个非递减有序整数数组中找到两个数，使其和等于目标值，并返回这两个数的下标（从1开始）</p><p>📥 <strong>输入输出</strong>：</p><ul>
<li><strong>输入</strong>：<!-- -->
<ul>
<li><code>numbers</code>: 按非递减顺序排列的整数数组</li>
<li><code>target</code>: 目标和值</li>
</ul>
</li>
<li><strong>输出</strong>：包含两个下标的数组 [index1, index2]，其中 <code>1 &lt;= index1 &lt; index2 &lt;= numbers.length</code></li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2️⃣-实现原理">2️⃣ 实现原理<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode167#2%EF%B8%8F%E2%83%A3-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86" class="hash-link" aria-label="2️⃣ 实现原理的直接链接" title="2️⃣ 实现原理的直接链接">​</a></h2><p>💡 <strong>核心思路</strong>：利用数组有序的特性，使用双指针技术从两端向中间搜索，根据当前和与目标值的比较来移动指针</p><p>📋 <strong>实现步骤</strong>：</p><ol>
<li>初始化左指针指向数组开始，右指针指向数组结束</li>
<li>计算左右指针所指向元素的和</li>
<li>比较当前和与目标值：<!-- -->
<ul>
<li>如果相等，则找到答案，返回下标（注意转换为从1开始）</li>
<li>如果小于目标值，左指针右移以增大和值</li>
<li>如果大于目标值，右指针左移以减小和值</li>
</ul>
</li>
<li>重复步骤2-3直到找到答案</li>
</ol><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3️⃣-关键点解析">3️⃣ 关键点解析<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode167#3%EF%B8%8F%E2%83%A3-%E5%85%B3%E9%94%AE%E7%82%B9%E8%A7%A3%E6%9E%90" class="hash-link" aria-label="3️⃣ 关键点解析的直接链接" title="3️⃣ 关键点解析的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-代码技巧">🎯 代码技巧<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode167#-%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7" class="hash-link" aria-label="🎯 代码技巧的直接链接" title="🎯 代码技巧的直接链接">​</a></h3><ul>
<li><strong>双指针法</strong>：利用有序数组的特性，避免了O(n²)的暴力搜索</li>
<li><strong>有序数组的单调性</strong>：根据和值与目标值的比较，可以确定移动哪个指针</li>
<li><strong>下标转换</strong>：题目要求下标从1开始，需要将数组索引+1</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4️⃣-使用场景">4️⃣ 使用场景<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode167#4%EF%B8%8F%E2%83%A3-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="4️⃣ 使用场景的直接链接" title="4️⃣ 使用场景的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-适用情况">✅ 适用情况：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode167#-%E9%80%82%E7%94%A8%E6%83%85%E5%86%B5" class="hash-link" aria-label="✅ 适用情况：的直接链接" title="✅ 适用情况：的直接链接">​</a></h3><ul>
<li>在有序数组中查找满足某种条件的两个元素</li>
<li>需要常量级空间复杂度的两数查找问题</li>
<li>已知数组有序且有唯一解的情况</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-前提条件">⚠️ 前提条件：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode167#%EF%B8%8F-%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6" class="hash-link" aria-label="⚠️ 前提条件：的直接链接" title="⚠️ 前提条件：的直接链接">​</a></h3><ul>
<li>数组必须是非递减有序排列</li>
<li>保证存在唯一解</li>
<li>不允许重复使用相同元素</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5️⃣-复杂度分析">5️⃣ 复杂度分析<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode167#5%EF%B8%8F%E2%83%A3-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90" class="hash-link" aria-label="5️⃣ 复杂度分析的直接链接" title="5️⃣ 复杂度分析的直接链接">​</a></h2><ul>
<li>⏱️ 时间复杂度：O(n)，其中n是数组长度，最多需要遍历一次数组</li>
<li>💾 空间复杂度：O(1)，只使用了常量级额外空间（不计算返回数组）</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6️⃣-注意事项">6️⃣ 注意事项<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode167#6%EF%B8%8F%E2%83%A3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="6️⃣ 注意事项的直接链接" title="6️⃣ 注意事项的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-边界情况">🚩 边界情况：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode167#-%E8%BE%B9%E7%95%8C%E6%83%85%E5%86%B5" class="hash-link" aria-label="🚩 边界情况：的直接链接" title="🚩 边界情况：的直接链接">​</a></h3><ul>
<li>数组只有两个元素且满足条件</li>
<li>目标值由数组首尾元素组成</li>
<li>负数参与计算的情况</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-易错点">💥 易错点：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode167#-%E6%98%93%E9%94%99%E7%82%B9" class="hash-link" aria-label="💥 易错点：的直接链接" title="💥 易错点：的直接链接">​</a></h3><ul>
<li>忘记将数组索引转换为从1开始的下标</li>
<li>指针移动条件判断错误</li>
<li>没有正确处理循环终止条件</li>
</ul></div></div></details><div class="blog-post-comments" style="margin-top:2rem;padding-top:1.5rem;border-top:1px solid var(--ifm-color-emphasis-300)"><div style="margin-top:2rem"><div style="min-height:200px">加载评论中...</div></div></div>]]></content:encoded>
            <category>数组</category>
            <category>双指针</category>
        </item>
        <item>
            <title><![CDATA[关于ffmpeg]]></title>
            <link>https://EurekaShadow.github.io/EurekaShadow.github.io/blog/ffmpeg</link>
            <guid>https://EurekaShadow.github.io/EurekaShadow.github.io/blog/ffmpeg</guid>
            <pubDate>Tue, 19 Aug 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[本文介绍使用 ffmpeg 的基本使用方法。]]></description>
            <content:encoded><![CDATA[<p>本文介绍使用 ffmpeg 的基本使用方法。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="-ffmpeg-安装教程"><span class="B2_JnYG">📦 <a href="https://blog.csdn.net/Natsuago/article/details/143231558" target="_blank" rel="noopener noreferrer" title="FFmpeg 安装详细步骤">FFmpeg 安装教程</a></span><a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/ffmpeg#-ffmpeg-%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B" class="hash-link" aria-label="-ffmpeg-安装教程的直接链接" title="-ffmpeg-安装教程的直接链接">​</a></h2>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="-m3u8-格式视频转-mp4"><span class="B2_JnYG">🔄 m3u8 格式视频转 mp4</span><a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/ffmpeg#-m3u8-%E6%A0%BC%E5%BC%8F%E8%A7%86%E9%A2%91%E8%BD%AC-mp4" class="hash-link" aria-label="-m3u8-格式视频转-mp4的直接链接" title="-m3u8-格式视频转-mp4的直接链接">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-密钥文件准备">🔑 密钥文件准备<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/ffmpeg#-%E5%AF%86%E9%92%A5%E6%96%87%E4%BB%B6%E5%87%86%E5%A4%87" class="hash-link" aria-label="🔑 密钥文件准备的直接链接" title="🔑 密钥文件准备的直接链接">​</a></h3>
<p>在 <code>index</code> 目录下有一个视频密钥文件 <code>0.key</code>：</p>
<p></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-转换命令">▶️ 转换命令<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/ffmpeg#%EF%B8%8F-%E8%BD%AC%E6%8D%A2%E5%91%BD%E4%BB%A4" class="hash-link" aria-label="▶️ 转换命令的直接链接" title="▶️ 转换命令的直接链接">​</a></h3>
<p>在 <code>m3u8</code> 文件所在目录下执行相应命令：</p>
<div class="tabs-container tabList__CuJ"><ul role="tablist" aria-orientation="horizontal" class="tabs"><li role="tab" tabindex="0" aria-selected="true" class="tabs__item tabItem_LNqP tabs__item--active">🔐 有密钥</li><li role="tab" tabindex="-1" aria-selected="false" class="tabs__item tabItem_LNqP">🔓 无密钥</li></ul><div class="margin-top--md"><div role="tabpanel" class="tabItem_Ymn6"><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">ffmpeg -allowed_extensions ALL -i "index.m3u8" -c copy -bsf:a aac_adtstoasc -hls_key_info_file "index/0.key" "output.mp4"</span><br></span></code></pre></div></div></div><div role="tabpanel" class="tabItem_Ymn6" hidden=""><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">ffmpeg -i "index.m3u8" -c copy -bsf:a aac_adtstoasc "output.mp4"</span><br></span></code></pre></div></div></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-转换结果">✅ 转换结果<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/ffmpeg#-%E8%BD%AC%E6%8D%A2%E7%BB%93%E6%9E%9C" class="hash-link" aria-label="✅ 转换结果的直接链接" title="✅ 转换结果的直接链接">​</a></h3>
<p></p>
<p></p>
<p>🎉 转换成功！！！</p><div class="blog-post-comments" style="margin-top:2rem;padding-top:1.5rem;border-top:1px solid var(--ifm-color-emphasis-300)"><div style="margin-top:2rem"><div style="min-height:200px">加载评论中...</div></div></div>]]></content:encoded>
            <category>ffmpeg</category>
        </item>
        <item>
            <title><![CDATA[判断子序列]]></title>
            <link>https://EurekaShadow.github.io/EurekaShadow.github.io/blog/LeetCode392</link>
            <guid>https://EurekaShadow.github.io/EurekaShadow.github.io/blog/LeetCode392</guid>
            <pubDate>Tue, 19 Aug 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[力扣面试经典——392题]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="力扣面试经典392题"><span class="B2_JnYG"><a href="https://leetcode.cn/problems/is-subsequence/description/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer" title="力扣">力扣面试经典——392题</a></span><a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode392#%E5%8A%9B%E6%89%A3%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B8392%E9%A2%98" class="hash-link" aria-label="力扣面试经典392题的直接链接" title="力扣面试经典392题的直接链接">​</a></h3>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-参考代码">💡 参考代码：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode392#-%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81" class="hash-link" aria-label="💡 参考代码：的直接链接" title="💡 参考代码：的直接链接">​</a></h3>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 判断字符串 s 是否为字符串 t 的子序列</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param s 待检查的子序列字符串</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param t 主字符串</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return bool 如果 s 是 t 的子序列返回 true，否则返回 false</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">bool </span><span class="token function" style="color:#d73a49">isSubsequence</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> t</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 使用双指针分别指向两个字符串的当前位置</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 指向字符串 s 的指针</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> j </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 指向字符串 t 的指针</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 遍历两个字符串</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token char">'\0'</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> t</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">j</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token char">'\0'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 如果当前字符匹配，则移动 s 的指针</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> t</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">j</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 总是移动 t 的指针</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        j</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 如果 s 的指针到达末尾，说明 s 是 t 的子序列</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token char">'\0'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-总结">📖 总结：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode392#-%E6%80%BB%E7%BB%93" class="hash-link" aria-label="📖 总结：的直接链接" title="📖 总结：的直接链接">​</a></h3>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>点击展开题目总结</summary><div><div class="collapsibleContent_i85q"><h1>🤔 判断子序列</h1><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1️⃣-题目核心信息">1️⃣ 题目核心信息<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode392#1%EF%B8%8F%E2%83%A3-%E9%A2%98%E7%9B%AE%E6%A0%B8%E5%BF%83%E4%BF%A1%E6%81%AF" class="hash-link" aria-label="1️⃣ 题目核心信息的直接链接" title="1️⃣ 题目核心信息的直接链接">​</a></h2><p>🎯 <strong>功能描述</strong>：判断字符串 s 是否为字符串 t 的子序列，即能否通过删除 t 中的一些字符（也可以不删除）得到 s，且不改变字符的相对位置</p><p>📥 <strong>输入输出</strong>：</p><ul>
<li><strong>输入</strong>：两个字符串 s（待检查的子序列）和 t（主字符串）</li>
<li><strong>输出</strong>：布尔值，如果 s 是 t 的子序列返回 true，否则返回 false</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2️⃣-实现原理">2️⃣ 实现原理<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode392#2%EF%B8%8F%E2%83%A3-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86" class="hash-link" aria-label="2️⃣ 实现原理的直接链接" title="2️⃣ 实现原理的直接链接">​</a></h2><p>💡 <strong>核心思路</strong>：使用双指针技术逐个匹配字符，或者预处理主字符串建立索引表以优化大量查询场景</p><p>📋 <strong>实现步骤</strong>：</p><ol>
<li>基础解法：使用两个指针分别遍历 s 和 t 字符串</li>
<li>当字符匹配时，同时移动两个指针；不匹配时只移动 t 的指针</li>
<li>进阶解法：预处理 t 字符串，为每个位置建立字符索引表</li>
<li>查询时直接利用索引表快速定位下一个匹配字符的位置</li>
</ol><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3️⃣-关键点解析">3️⃣ 关键点解析<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode392#3%EF%B8%8F%E2%83%A3-%E5%85%B3%E9%94%AE%E7%82%B9%E8%A7%A3%E6%9E%90" class="hash-link" aria-label="3️⃣ 关键点解析的直接链接" title="3️⃣ 关键点解析的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-代码技巧">🎯 代码技巧<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode392#-%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7" class="hash-link" aria-label="🎯 代码技巧的直接链接" title="🎯 代码技巧的直接链接">​</a></h3><ul>
<li>双指针技术：有效处理序列匹配问题</li>
<li>预处理优化：通过空间换时间，提高大量查询场景下的效率</li>
<li>边界处理：正确判断指针到达字符串末尾的情况</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4️⃣-使用场景">4️⃣ 使用场景<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode392#4%EF%B8%8F%E2%83%A3-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="4️⃣ 使用场景的直接链接" title="4️⃣ 使用场景的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-适用情况">✅ 适用情况：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode392#-%E9%80%82%E7%94%A8%E6%83%85%E5%86%B5" class="hash-link" aria-label="✅ 适用情况：的直接链接" title="✅ 适用情况：的直接链接">​</a></h3><ul>
<li>判断一个字符串是否为另一个字符串的子序列</li>
<li>文本处理中的模式匹配</li>
<li>大量重复查询同一主字符串的子序列判断</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-前提条件">⚠️ 前提条件：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode392#%EF%B8%8F-%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6" class="hash-link" aria-label="⚠️ 前提条件：的直接链接" title="⚠️ 前提条件：的直接链接">​</a></h3><ul>
<li>输入字符串只包含小写英文字母</li>
<li>主字符串相对固定，需要多次查询不同子序列</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5️⃣-复杂度分析">5️⃣ 复杂度分析<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode392#5%EF%B8%8F%E2%83%A3-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90" class="hash-link" aria-label="5️⃣ 复杂度分析的直接链接" title="5️⃣ 复杂度分析的直接链接">​</a></h2><ul>
<li>
<p>⏱️ 时间复杂度：</p>
<ul>
<li>基础解法：O(|t|)，其中 |t| 是主字符串长度</li>
<li>进阶解法：预处理 O(|t|)，单次查询 O(|s|)</li>
</ul>
</li>
<li>
<p>💾 空间复杂度：</p>
<ul>
<li>基础解法：O(1)</li>
<li>进阶解法：O(|t| × 26) = O(|t|)</li>
</ul>
</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6️⃣-注意事项">6️⃣ 注意事项<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode392#6%EF%B8%8F%E2%83%A3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="6️⃣ 注意事项的直接链接" title="6️⃣ 注意事项的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-边界情况">🚩 边界情况：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode392#-%E8%BE%B9%E7%95%8C%E6%83%85%E5%86%B5" class="hash-link" aria-label="🚩 边界情况：的直接链接" title="🚩 边界情况：的直接链接">​</a></h3><ul>
<li>空字符串 s 总是任何字符串 t 的子序列</li>
<li>非空字符串 s 永远不是空字符串 t 的子序列</li>
<li>s 长度大于 t 长度时，s 不可能是 t 的子序列</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-易错点">💥 易错点：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode392#-%E6%98%93%E9%94%99%E7%82%B9" class="hash-link" aria-label="💥 易错点：的直接链接" title="💥 易错点：的直接链接">​</a></h3><ul>
<li>忘记处理字符串结束符 '\0'</li>
<li>在进阶解法中索引映射错误（字符到数组下标转换）</li>
<li>查询时位置更新逻辑错误，导致重复匹配同一位置字符</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="7️⃣-进阶解法">7️⃣ 进阶解法<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode392#7%EF%B8%8F%E2%83%A3-%E8%BF%9B%E9%98%B6%E8%A7%A3%E6%B3%95" class="hash-link" aria-label="7️⃣ 进阶解法的直接链接" title="7️⃣ 进阶解法的直接链接">​</a></h2><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">include</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property string" style="color:#e3116c">&lt;stdio.h&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">include</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property string" style="color:#e3116c">&lt;stdlib.h&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">include</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property string" style="color:#e3116c">&lt;string.h&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">include</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property string" style="color:#e3116c">&lt;limits.h&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 预处理字符串 t，建立字符位置索引表</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param t 主字符串</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param tLen 主字符串长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param indexMap 字符索引表，indexMap[c][i] 表示字符 c 在位置 i 之后第一次出现的位置</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">preprocess</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">char</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> t</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> tLen</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> indexMap</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 为每个字符分配空间，存储下一个出现位置的信息</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">26</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        indexMap</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token function" style="color:#d73a49">malloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">tLen </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 初始化为 -1，表示未找到</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> j </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> j </span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token plain"> tLen</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> j</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            indexMap</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">j</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 从后往前填充索引表</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> tLen </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> c </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> t</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token char">'a'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 将字符转换为索引 0-25</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 复制上一个位置的所有字符的索引信息</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> j </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> j </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">26</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> j</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            indexMap</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">j</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> indexMap</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">j</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 更新当前字符在位置 i 的索引</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        indexMap</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">c</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 使用预处理的索引表快速判断 s 是否为 t 的子序列</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param s 待检查的子序列字符串</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param indexMap 预处理得到的字符索引表</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return bool 如果 s 是 t 的子序列返回 true，否则返回 false</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">bool </span><span class="token function" style="color:#d73a49">isSubsequenceAdvanced</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">char</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> indexMap</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> pos </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 当前在 t 中的位置</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token char">'\0'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> c </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token char">'a'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 将字符转换为索引 0-25</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 查找字符 c 在当前位置之后第一次出现的位置</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        pos </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> indexMap</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">c</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">pos</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 如果找不到，说明不是子序列</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">pos </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> false</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 移动到找到位置的下一个位置</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        pos</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> true</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 释放预处理索引表占用的内存</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param indexMap 字符索引表</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">freeIndexMap</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> indexMap</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">26</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">free</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">indexMap</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">free</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">indexMap</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// 示例用法</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">main</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 进阶解法测试</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">printf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"\n进阶解法测试:\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> t</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"ahbgdc"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> tLen </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">strlen</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">t</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 预处理</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> indexMap </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token function" style="color:#d73a49">malloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">26</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">preprocess</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">t</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> tLen</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> indexMap</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 查询</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">printf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"isSubsequenceAdvanced(\"abc\", indexMap): %s\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">           </span><span class="token function" style="color:#d73a49">isSubsequenceAdvanced</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"abc"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> indexMap</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"true"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"false"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">printf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"isSubsequenceAdvanced(\"axc\", indexMap): %s\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">           </span><span class="token function" style="color:#d73a49">isSubsequenceAdvanced</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"axc"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> indexMap</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"true"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"false"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 释放内存</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">freeIndexMap</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">indexMap</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="8⃣-补充说明">8⃣ 补充说明<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode392#8%E2%83%A3-%E8%A1%A5%E5%85%85%E8%AF%B4%E6%98%8E" class="hash-link" aria-label="8⃣ 补充说明的直接链接" title="8⃣ 补充说明的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-预处理阶段">1. 预处理阶段<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode392#1-%E9%A2%84%E5%A4%84%E7%90%86%E9%98%B6%E6%AE%B5" class="hash-link" aria-label="1. 预处理阶段的直接链接" title="1. 预处理阶段的直接链接">​</a></h3><p>—— <code>preprocess</code> 函数</p><p>这个函数的主要目的是为字符串 t 构建一个索引表，使得后续查询更高效。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="核心思想">核心思想<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode392#%E6%A0%B8%E5%BF%83%E6%80%9D%E6%83%B3" class="hash-link" aria-label="核心思想的直接链接" title="核心思想的直接链接">​</a></h4><p>构建一个二维数组 <code>indexMap[26][tLen+1]</code>，其中：</p><ul>
<li>第一维代表26个小写字母（a-z）</li>
<li>第二维代表在字符串 t 中的位置（0 到 tLen）</li>
<li><code>indexMap[c][i]</code> 的值表示字符 c 在位置 i 之后（包括位置 i）第一次出现的位置</li>
</ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="举例说明">举例说明<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode392#%E4%B8%BE%E4%BE%8B%E8%AF%B4%E6%98%8E" class="hash-link" aria-label="举例说明的直接链接" title="举例说明的直接链接">​</a></h4><p>假设 <code>t = "abcba"</code>，长度为5：</p><ol>
<li>
<p><strong>初始化</strong>：创建一个 26×6 的二维数组，所有值初始化为 -1</p>
</li>
<li>
<p><strong>从后往前填充</strong>：</p>
<ul>
<li>位置4（字符'a'）:<!-- -->
<ul>
<li>先复制位置5的所有信息（都是-1）</li>
<li>更新字符'a'在位置4的值为4</li>
</ul>
</li>
<li>位置3（字符'b'）:<!-- -->
<ul>
<li>先复制位置4的所有信息</li>
<li>更新字符'b'在位置3的值为3</li>
</ul>
</li>
<li>位置2（字符'c'）:<!-- -->
<ul>
<li>先复制位置3的所有信息</li>
<li>更新字符'c'在位置2的值为2</li>
</ul>
</li>
<li>位置1（字符'b'）:<!-- -->
<ul>
<li>先复制位置2的所有信息</li>
<li>更新字符'b'在位置1的值为1</li>
</ul>
</li>
<li>位置0（字符'a'）:<!-- -->
<ul>
<li>先复制位置1的所有信息</li>
<li>更新字符'a'在位置0的值为0</li>
</ul>
</li>
</ul>
</li>
</ol><p>最终得到的部分索引表（只显示相关字符）：</p><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">indexMap['a'-'a'][0]=0, indexMap['a'-'a'][1]=4, indexMap['a'-'a'][2]=4, indexMap['a'-'a'][3]=4, indexMap['a'-'a'][4]=4, indexMap['a'-'a'][5]=-1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">indexMap['b'-'a'][0]=1, indexMap['b'-'a'][1]=1, indexMap['b'-'a'][2]=3, indexMap['b'-'a'][3]=3, indexMap['b'-'a'][4]=-1, indexMap['b'-'a'][5]=-1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">indexMap['c'-'a'][0]=2, indexMap['c'-'a'][1]=2, indexMap['c'-'a'][2]=2, indexMap['c'-'a'][3]=-1, indexMap['c'-'a'][4]=-1, indexMap['c'-'a'][5]=-1</span><br></span></code></pre></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="2-查询阶段">2. 查询阶段<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode392#2-%E6%9F%A5%E8%AF%A2%E9%98%B6%E6%AE%B5" class="hash-link" aria-label="2. 查询阶段的直接链接" title="2. 查询阶段的直接链接">​</a></h3><p>—— <code>isSubsequenceAdvanced</code> 函数</p><p>使用预处理好的索引表快速判断子序列：</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="工作原理">工作原理<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode392#%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86" class="hash-link" aria-label="工作原理的直接链接" title="工作原理的直接链接">​</a></h4><p>维护一个当前位置 <code>pos</code>，对于要查找的字符串 <code>s</code> 中的每个字符：</p><ol>
<li>查找该字符在当前位置之后第一次出现的位置</li>
<li>如果找不到（返回-1），则说明不是子序列</li>
<li>如果找到，则将位置更新为找到位置的下一个位置</li>
</ol><h4 class="anchor anchorWithStickyNavbar_LWe7" id="举例说明-1">举例说明<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode392#%E4%B8%BE%E4%BE%8B%E8%AF%B4%E6%98%8E-1" class="hash-link" aria-label="举例说明的直接链接" title="举例说明的直接链接">​</a></h4><p>继续使用上面的例子，<code>t = "abcba"</code>，现在要检查 <code>s = "acb"</code> 是否为子序列：</p><ol>
<li>初始位置 <code>pos = 0</code></li>
<li>查找字符 'a'：<!-- -->
<ul>
<li><code>indexMap['a'-'a'][0] = 0</code></li>
<li>找到位置0，更新 <code>pos = 0 + 1 = 1</code></li>
</ul>
</li>
<li>查找字符 'c'：<!-- -->
<ul>
<li><code>indexMap['c'-'a'][1] = 2</code></li>
<li>找到位置2，更新 <code>pos = 2 + 1 = 3</code></li>
</ul>
</li>
<li>查找字符 'b'：<!-- -->
<ul>
<li><code>indexMap['b'-'a'][3] = 3</code></li>
<li>找到位置3，更新 <code>pos = 3 + 1 = 4</code></li>
</ul>
</li>
<li>字符串遍历完成，返回 <code>true</code></li>
</ol><p>如果检查 <code>s = "abc"</code>：</p><ol>
<li>初始位置 <code>pos = 0</code></li>
<li>查找字符 'a'：<code>indexMap['a'-'a'][0] = 0</code>，<code>pos = 1</code></li>
<li>查找字符 'b'：<code>indexMap['b'-'a'][1] = 1</code>，<code>pos = 2</code></li>
<li>查找字符 'c'：<code>indexMap['c'-'a'][2] = 2</code>，<code>pos = 3</code></li>
<li>返回 <code>true</code></li>
</ol><p>这种方法的优势在于，无论主字符串 <code>t</code> 有多长，每次查询的时间复杂度只与待查询字符串 <code>s</code> 的长度有关，而与 <code>t</code> 的长度无关。这对于需要大量查询的场景非常有用。</p><p>关于此进阶解法，我<strong>尚不理解</strong>！</p></div></div></details><div class="blog-post-comments" style="margin-top:2rem;padding-top:1.5rem;border-top:1px solid var(--ifm-color-emphasis-300)"><div style="margin-top:2rem"><div style="min-height:200px">加载评论中...</div></div></div>]]></content:encoded>
            <category>双指针</category>
            <category>字符串</category>
        </item>
        <item>
            <title><![CDATA[验证回文串]]></title>
            <link>https://EurekaShadow.github.io/EurekaShadow.github.io/blog/LeetCode125</link>
            <guid>https://EurekaShadow.github.io/EurekaShadow.github.io/blog/LeetCode125</guid>
            <pubDate>Mon, 18 Aug 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[力扣面试经典——125题]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="力扣面试经典125题"><span class="B2_JnYG"><a href="https://leetcode.cn/problems/valid-palindrome/description/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer" title="力扣">力扣面试经典——125题</a></span><a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode125#%E5%8A%9B%E6%89%A3%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B8125%E9%A2%98" class="hash-link" aria-label="力扣面试经典125题的直接链接" title="力扣面试经典125题的直接链接">​</a></h3>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-参考代码">💡 参考代码：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode125#-%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81" class="hash-link" aria-label="💡 参考代码：的直接链接" title="💡 参考代码：的直接链接">​</a></h3>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 判断字符串是否为回文串</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 解题思路：</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 1. 使用双指针法，从字符串两端向中间移动</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 2. 跳过所有非字母数字字符</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 3. 将大写字母转换为小写进行比较</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 4. 如果所有对应字符都相等，则为回文串</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param s 输入字符串</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return true 表示是回文串，false 表示不是回文串</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">bool </span><span class="token function" style="color:#d73a49">isPalindrome</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 检查输入是否为空指针</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> true</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 初始化双指针</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> left </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">                    </span><span class="token comment" style="color:#999988;font-style:italic">// 左指针指向字符串开头</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> right </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">strlen</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">       </span><span class="token comment" style="color:#999988;font-style:italic">// 右指针指向字符串末尾</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 当左指针小于右指针时继续循环</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">left </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> right</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 跳过左侧非字母数字字符</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">left </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> right </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!</span><span class="token function" style="color:#d73a49">isalnum</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">left</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            left</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 跳过右侧非字母数字字符</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">left </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> right </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!</span><span class="token function" style="color:#d73a49">isalnum</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">right</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            right</span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 比较左右字符（转换为小写后比较）</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">tolower</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">left</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">tolower</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">right</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> false</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 字符不相等，不是回文串</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 移动指针向中间靠拢</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        left</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        right</span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 所有对应字符都相等，是回文串</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> true</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-总结">📖 总结：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode125#-%E6%80%BB%E7%BB%93" class="hash-link" aria-label="📖 总结：的直接链接" title="📖 总结：的直接链接">​</a></h3>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>点击展开题目总结</summary><div><div class="collapsibleContent_i85q"><h1>🤔 验证回文串</h1><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1️⃣-题目核心信息">1️⃣ 题目核心信息<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode125#1%EF%B8%8F%E2%83%A3-%E9%A2%98%E7%9B%AE%E6%A0%B8%E5%BF%83%E4%BF%A1%E6%81%AF" class="hash-link" aria-label="1️⃣ 题目核心信息的直接链接" title="1️⃣ 题目核心信息的直接链接">​</a></h2><p>🎯 <strong>功能描述</strong>：判断一个字符串在去除所有非字母数字字符并转换为小写后，是否为回文串</p><p>📥 <strong>输入输出</strong>：</p><ul>
<li><strong>输入</strong>：char * s - 待判断的字符串</li>
<li><strong>输出</strong>：bool - true表示是回文串，false表示不是回文串</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2️⃣-实现原理">2️⃣ 实现原理<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode125#2%EF%B8%8F%E2%83%A3-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86" class="hash-link" aria-label="2️⃣ 实现原理的直接链接" title="2️⃣ 实现原理的直接链接">​</a></h2><p>💡 <strong>核心思路</strong>：使用双指针法从字符串两端向中间移动，跳过非字母数字字符并忽略大小写进行比较</p><p>📋 <strong>实现步骤</strong>：</p><ol>
<li>初始化左右两个指针分别指向字符串的开始和结束位置</li>
<li>移动左指针跳过所有非字母数字字符</li>
<li>移动右指针跳过所有非字母数字字符</li>
<li>比较左右指针指向字符的小写形式，如果不相等则返回false</li>
<li>继续向中间移动指针，重复步骤2-4直到指针相遇</li>
</ol><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3️⃣-关键点解析">3️⃣ 关键点解析<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode125#3%EF%B8%8F%E2%83%A3-%E5%85%B3%E9%94%AE%E7%82%B9%E8%A7%A3%E6%9E%90" class="hash-link" aria-label="3️⃣ 关键点解析的直接链接" title="3️⃣ 关键点解析的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-代码技巧">🎯 代码技巧<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode125#-%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7" class="hash-link" aria-label="🎯 代码技巧的直接链接" title="🎯 代码技巧的直接链接">​</a></h3><ul>
<li>使用双指针法避免创建新字符串，节省空间</li>
<li>利用 <code>isalnum()</code> 函数判断字符是否为字母或数字</li>
<li>使用 <code>tolower()</code> 函数统一字符大小写进行比较</li>
<li>在循环中同时处理字符过滤和比较逻辑</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4️⃣-使用场景">4️⃣ 使用场景<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode125#4%EF%B8%8F%E2%83%A3-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="4️⃣ 使用场景的直接链接" title="4️⃣ 使用场景的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-适用情况">✅ 适用情况：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode125#-%E9%80%82%E7%94%A8%E6%83%85%E5%86%B5" class="hash-link" aria-label="✅ 适用情况：的直接链接" title="✅ 适用情况：的直接链接">​</a></h3><ul>
<li>需要验证文本是否为回文格式</li>
<li>文本预处理后判断对称性</li>
<li>验证标识符或代码中的回文模式</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-前提条件">⚠️ 前提条件：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode125#%EF%B8%8F-%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6" class="hash-link" aria-label="⚠️ 前提条件：的直接链接" title="⚠️ 前提条件：的直接链接">​</a></h3><ul>
<li>输入字符串为ASCII字符</li>
<li>需要忽略大小写和非字母数字字符</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5️⃣-复杂度分析">5️⃣ 复杂度分析<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode125#5%EF%B8%8F%E2%83%A3-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90" class="hash-link" aria-label="5️⃣ 复杂度分析的直接链接" title="5️⃣ 复杂度分析的直接链接">​</a></h2><ul>
<li>
<p>⏱️ 时间复杂度：O(n)，其中n为字符串长度，每个字符最多被访问一次</p>
</li>
<li>
<p>💾 空间复杂度：O(1)，只使用了常数级别的额外空间</p>
</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6️⃣-注意事项">6️⃣ 注意事项<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode125#6%EF%B8%8F%E2%83%A3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="6️⃣ 注意事项的直接链接" title="6️⃣ 注意事项的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-边界情况">🚩 边界情况：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode125#-%E8%BE%B9%E7%95%8C%E6%83%85%E5%86%B5" class="hash-link" aria-label="🚩 边界情况：的直接链接" title="🚩 边界情况：的直接链接">​</a></h3><ul>
<li>空字符串或NULL指针</li>
<li>只包含非字母数字字符的字符串</li>
<li>单个字符的字符串</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-易错点">💥 易错点：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode125#-%E6%98%93%E9%94%99%E7%82%B9" class="hash-link" aria-label="💥 易错点：的直接链接" title="💥 易错点：的直接链接">​</a></h3><ul>
<li>忘记跳过非字母数字字符</li>
<li>忽略大小写转换导致判断错误</li>
<li>指针边界条件处理不当导致数组越界</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="7️⃣-补充说明">7️⃣ 补充说明<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode125#7%EF%B8%8F%E2%83%A3-%E8%A1%A5%E5%85%85%E8%AF%B4%E6%98%8E" class="hash-link" aria-label="7️⃣ 补充说明的直接链接" title="7️⃣ 补充说明的直接链接">​</a></h2><p>函数的工作原理：</p><p>1.输入检查：首先检查输入字符串是否为 <code>NULL</code>，如果是则返回 <code>true</code></p><p>2.双指针初始化：使用两个指针，<code>left</code> 指向字符串开始，<code>right</code> 指向字符串结束</p><p>3.双指针向中间移动：跳过非字母数字字符，只比较有效字符</p><p>4.字符比较：将字符转换为小写后进行比较</p><p>5.返回结果：如果所有对应字符都匹配，则返回 <code>true</code>，否则返回 <code>false</code></p><p>例：简单回文 "A man, a plan, a canal: Panama"</p><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">原始字符串: "A man, a plan, a canal: Panama"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">有效字符:   A m a n a p l a n a c a n a l P a n a m a</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">转换为小写: a m a n a p l a n a c a n a l p a n a m a</span><br></span></code></pre></div></div><p>执行过程：</p><p>1.<code>left=0</code> 指向 'A'，<code>right=32</code> 指向 'a'</p><p>2.比较 <code>tolower('A')</code>和 <code>tolower('a')</code>，都是<code>'a'</code>，相等</p><p>3.继续向中间移动指针，跳过逗号和空格等非字母数字字符</p><p>4.依次比较每一对字符：(m,m), (a,a), (n,n)...</p><p>5.所有对应字符都相等，返回 <code>true</code></p></div></div></details><div class="blog-post-comments" style="margin-top:2rem;padding-top:1.5rem;border-top:1px solid var(--ifm-color-emphasis-300)"><div style="margin-top:2rem"><div style="min-height:200px">加载评论中...</div></div></div>]]></content:encoded>
            <category>双指针</category>
            <category>字符串</category>
        </item>
        <item>
            <title><![CDATA[文本左右对齐]]></title>
            <link>https://EurekaShadow.github.io/EurekaShadow.github.io/blog/LeetCode68</link>
            <guid>https://EurekaShadow.github.io/EurekaShadow.github.io/blog/LeetCode68</guid>
            <pubDate>Sun, 17 Aug 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[力扣面试经典——68题]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="力扣面试经典68题"><span class="B2_JnYG"><a href="https://leetcode.cn/problems/text-justification/description/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer" title="力扣">力扣面试经典——68题</a></span><a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode68#%E5%8A%9B%E6%89%A3%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B868%E9%A2%98" class="hash-link" aria-label="力扣面试经典68题的直接链接" title="力扣面试经典68题的直接链接">​</a></h3>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-参考代码">💡 参考代码：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode68#-%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81" class="hash-link" aria-label="💡 参考代码：的直接链接" title="💡 参考代码：的直接链接">​</a></h3>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 根据给定的单词数组和最大宽度，生成左右对齐的文本行</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param words 单词数组</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param wordsSize 单词数量</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param maxWidth 每行的最大字符数</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param returnSize 返回结果数组的大小</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 对齐后的文本行数组</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">fullJustify</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> words</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> wordsSize</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> maxWidth</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> returnSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 分配结果数组内存</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token function" style="color:#d73a49">malloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> wordsSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">returnSize </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 遍历所有单词</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> wordsSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 确定当前行可以容纳的单词范围 [i, j)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> j </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> lineLength </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 当前行单词总长度（不包括空格）</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 贪心算法：尽可能多地放置单词</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 条件：还有单词未处理 且 当前行还能放下下一个单词（包括必要的空格）</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">j </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> wordsSize </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> lineLength </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">strlen</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">words</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">j</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">j </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token plain"> maxWidth</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            lineLength </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">strlen</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">words</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">j</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            j</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 分配当前行内存</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        result</span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">returnSize</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token function" style="color:#d73a49">malloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">char</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">maxWidth </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        result</span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">returnSize</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">maxWidth</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token char">'\0'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 字符串结束符</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 计算空格分配</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> wordCount </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> j </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 当前行的单词数</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> spaces </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> maxWidth </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> lineLength</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 需要填充的空格总数</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 处理不同情况</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">j </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> wordsSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 最后一行：左对齐</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> pos </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> k </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> k </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> j</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> k</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token comment" style="color:#999988;font-style:italic">// 复制单词</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> l </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> l </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">strlen</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">words</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">k</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> l</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    result</span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">returnSize</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">pos</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> words</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">k</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">l</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token comment" style="color:#999988;font-style:italic">// 单词间添加一个空格（除了最后一个单词）</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">k </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> j </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    result</span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">returnSize</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">pos</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token char">' '</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 在行尾填充剩余空格</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">pos </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> maxWidth</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                result</span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">returnSize</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">pos</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token char">' '</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">wordCount </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 只有一个单词：左对齐，右侧填充空格</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> pos </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 复制单词</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> k </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> k </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">strlen</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">words</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> k</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                result</span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">returnSize</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">pos</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> words</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">k</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 右侧填充空格</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> k </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> k </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> spaces</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> k</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                result</span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">returnSize</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">pos</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token char">' '</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 多个单词且非最后一行：左右对齐</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> avgSpaces </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> spaces </span><span class="token operator" style="color:#393A34">/</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">wordCount </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 平均每个间隔的空格数</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> extraSpaces </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> spaces </span><span class="token operator" style="color:#393A34">%</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">wordCount </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 需要额外分配的空格数</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> pos </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> k </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> k </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> j</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> k</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token comment" style="color:#999988;font-style:italic">// 复制单词</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> l </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> l </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">strlen</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">words</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">k</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> l</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    result</span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">returnSize</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">pos</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> words</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">k</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">l</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token comment" style="color:#999988;font-style:italic">// 添加空格（除了最后一个单词）</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">k </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> j </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token comment" style="color:#999988;font-style:italic">// 先添加平均分配的空格</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> l </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> l </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> avgSpaces</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> l</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        result</span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">returnSize</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">pos</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token char">' '</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token comment" style="color:#999988;font-style:italic">// 再分配额外的空格（左侧优先）</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">k </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> extraSpaces</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        result</span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">returnSize</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">pos</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token char">' '</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">returnSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> j</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 移动到下一行的第一个单词</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> result</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-总结">📖 总结：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode68#-%E6%80%BB%E7%BB%93" class="hash-link" aria-label="📖 总结：的直接链接" title="📖 总结：的直接链接">​</a></h3>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>点击展开题目总结</summary><div><div class="collapsibleContent_i85q"><h1>🤔 字符串左右对齐</h1><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1️⃣-题目核心信息">1️⃣ 题目核心信息<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode68#1%EF%B8%8F%E2%83%A3-%E9%A2%98%E7%9B%AE%E6%A0%B8%E5%BF%83%E4%BF%A1%E6%81%AF" class="hash-link" aria-label="1️⃣ 题目核心信息的直接链接" title="1️⃣ 题目核心信息的直接链接">​</a></h2><p>🎯 <strong>功能描述</strong>：给定一个单词数组和最大行宽，将单词重新排版成每行恰好有 maxWidth 个字符且左右两端对齐的文本，最后一行左对齐。</p><p>📥 <strong>输入输出</strong>：</p><ul>
<li><strong>输入</strong>：<!-- -->
<ul>
<li><code>words</code>: 单词数组，每个元素是一个非空字符串</li>
<li><code>wordsSize</code>: 单词数组长度</li>
<li><code>maxWidth</code>: 每行最大字符数</li>
</ul>
</li>
<li><strong>输出</strong>：<!-- -->
<ul>
<li>返回重新排版后的字符串数组</li>
<li><code>returnSize</code>: 返回数组的实际大小</li>
</ul>
</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2️⃣-实现原理">2️⃣ 实现原理<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode68#2%EF%B8%8F%E2%83%A3-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86" class="hash-link" aria-label="2️⃣ 实现原理的直接链接" title="2️⃣ 实现原理的直接链接">​</a></h2><p>💡 <strong>核心思路</strong>：使用贪心算法，每行尽可能多地放置单词，然后根据对齐规则分配空格。</p><p>📋 <strong>实现步骤</strong>：</p><ol>
<li>遍历单词数组，确定每一行可以放置的单词范围</li>
<li>根据行的类型（最后一行、单个单词行、普通行）采用不同的空格分配策略</li>
<li>对于普通行，计算平均空格数和额外空格数，左侧优先分配额外空格</li>
<li>构造每行字符串并添加到结果数组中</li>
</ol><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3️⃣-关键点解析">3️⃣ 关键点解析<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode68#3%EF%B8%8F%E2%83%A3-%E5%85%B3%E9%94%AE%E7%82%B9%E8%A7%A3%E6%9E%90" class="hash-link" aria-label="3️⃣ 关键点解析的直接链接" title="3️⃣ 关键点解析的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-代码技巧">🎯 代码技巧<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode68#-%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7" class="hash-link" aria-label="🎯 代码技巧的直接链接" title="🎯 代码技巧的直接链接">​</a></h3><ul>
<li><strong>贪心策略</strong>：每行尽可能多地放置单词，通过 <code>lineLength + strlen(words[j]) + (j - i) &lt;= maxWidth</code> 判断</li>
<li><strong>空格均匀分配</strong>：使用除法和取模运算分别计算平均空格数和额外空格数</li>
<li><strong>边界处理</strong>：针对最后一行、单个单词行等特殊情况采用不同的对齐策略</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4️⃣-使用场景">4️⃣ 使用场景<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode68#4%EF%B8%8F%E2%83%A3-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="4️⃣ 使用场景的直接链接" title="4️⃣ 使用场景的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-适用情况">✅ 适用情况：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode68#-%E9%80%82%E7%94%A8%E6%83%85%E5%86%B5" class="hash-link" aria-label="✅ 适用情况：的直接链接" title="✅ 适用情况：的直接链接">​</a></h3><ul>
<li>文本排版和格式化</li>
<li>打印预览和文档处理</li>
<li>控制台输出格式化</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-前提条件">⚠️ 前提条件：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode68#%EF%B8%8F-%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6" class="hash-link" aria-label="⚠️ 前提条件：的直接链接" title="⚠️ 前提条件：的直接链接">​</a></h3><ul>
<li>每个单词长度不超过 maxWidth</li>
<li>单词数组至少包含一个单词</li>
<li>maxWidth 大于等于1</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5️⃣-复杂度分析">5️⃣ 复杂度分析<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode68#5%EF%B8%8F%E2%83%A3-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90" class="hash-link" aria-label="5️⃣ 复杂度分析的直接链接" title="5️⃣ 复杂度分析的直接链接">​</a></h2><ul>
<li>
<p>⏱️ 时间复杂度：O(N × M)，其中 N 是单词总数，M 是最大宽度，需要遍历每个单词并构造每行字符串</p>
</li>
<li>
<p>💾 空间复杂度：O(M)，用于存储每行结果字符串</p>
</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6️⃣-注意事项">6️⃣ 注意事项<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode68#6%EF%B8%8F%E2%83%A3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="6️⃣ 注意事项的直接链接" title="6️⃣ 注意事项的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-边界情况">🚩 边界情况：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode68#-%E8%BE%B9%E7%95%8C%E6%83%85%E5%86%B5" class="hash-link" aria-label="🚩 边界情况：的直接链接" title="🚩 边界情况：的直接链接">​</a></h3><ul>
<li>最后一行需要特殊处理为左对齐</li>
<li>只包含一个单词的行需要左对齐</li>
<li>空格不能均匀分配时需要左侧优先</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-易错点">💥 易错点：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode68#-%E6%98%93%E9%94%99%E7%82%B9" class="hash-link" aria-label="💥 易错点：的直接链接" title="💥 易错点：的直接链接">​</a></h3><ul>
<li>忘记处理最后一行的左对齐特殊情况</li>
<li>空格分配不均匀，右侧空格多于左侧</li>
<li>单词间空格计算错误，没有考虑单词数量与间隔数的关系</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="7⃣-补充说明">7⃣ 补充说明<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode68#7%E2%83%A3-%E8%A1%A5%E5%85%85%E8%AF%B4%E6%98%8E" class="hash-link" aria-label="7⃣ 补充说明的直接链接" title="7⃣ 补充说明的直接链接">​</a></h2><p>以示例1为例：</p><ul>
<li><code>words = ["This", "is", "an", "example", "of", "text", "justification."]</code></li>
<li><code>maxWidth = 16</code></li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="执行步骤详解">执行步骤详解<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode68#%E6%89%A7%E8%A1%8C%E6%AD%A5%E9%AA%A4%E8%AF%A6%E8%A7%A3" class="hash-link" aria-label="执行步骤详解的直接链接" title="执行步骤详解的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="第一行处理">第一行处理<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode68#%E7%AC%AC%E4%B8%80%E8%A1%8C%E5%A4%84%E7%90%86" class="hash-link" aria-label="第一行处理的直接链接" title="第一行处理的直接链接">​</a></h3><h4 class="anchor anchorWithStickyNavbar_LWe7" id="确定单词范围">确定单词范围：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode68#%E7%A1%AE%E5%AE%9A%E5%8D%95%E8%AF%8D%E8%8C%83%E5%9B%B4" class="hash-link" aria-label="确定单词范围：的直接链接" title="确定单词范围：的直接链接">​</a></h4><ul>
<li>从索引0开始（"This"）</li>
<li>尝试添加单词："This"(4字符) + "is"(2字符) + "an"(2字符) + "example"(7字符)</li>
<li>计算总长度：4 + 2 + 2 + 7 = 15字符</li>
<li>计算空格：3个间隔（4个单词间需要3个空格）</li>
<li>总计：15 + 3 = 18 &gt; 16，超出限制</li>
<li>回退到："This"(4) + "is"(2) + "an"(2) = 8字符，2个间隔</li>
<li>总计：8 + 2 = 10 ≤ 16，符合要求</li>
<li>所以第一行单词为：["This", "is", "an"]</li>
</ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="空格分配">空格分配：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode68#%E7%A9%BA%E6%A0%BC%E5%88%86%E9%85%8D" class="hash-link" aria-label="空格分配：的直接链接" title="空格分配：的直接链接">​</a></h4><ul>
<li>单词总长度：4 + 2 + 2 = 8</li>
<li>需要空格数：16 - 8 = 8个空格</li>
<li>单词间隔数：3 - 1 = 2个间隔</li>
<li>平均每个间隔：8 / 2 = 4个空格</li>
<li>额外空格：8 % 2 = 0个</li>
<li>每个间隔都放4个空格</li>
</ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="构造结果">构造结果：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode68#%E6%9E%84%E9%80%A0%E7%BB%93%E6%9E%9C" class="hash-link" aria-label="构造结果：的直接链接" title="构造结果：的直接链接">​</a></h4><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">"This" + "    " + "is" + "    " + "an" = "This    is    an"</span><br></span></code></pre></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="第二行处理">第二行处理<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode68#%E7%AC%AC%E4%BA%8C%E8%A1%8C%E5%A4%84%E7%90%86" class="hash-link" aria-label="第二行处理的直接链接" title="第二行处理的直接链接">​</a></h3><h4 class="anchor anchorWithStickyNavbar_LWe7" id="确定单词范围-1">确定单词范围：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode68#%E7%A1%AE%E5%AE%9A%E5%8D%95%E8%AF%8D%E8%8C%83%E5%9B%B4-1" class="hash-link" aria-label="确定单词范围：的直接链接" title="确定单词范围：的直接链接">​</a></h4><ul>
<li>从索引3开始（"example"）</li>
<li>尝试添加："example"(7) + "of"(2) + "text"(4) = 13字符</li>
<li>空格间隔：2个</li>
<li>总计：13 + 2 = 15 ≤ 16，符合要求</li>
<li>所以第二行单词为：["example", "of", "text"]</li>
</ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="空格分配-1">空格分配：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode68#%E7%A9%BA%E6%A0%BC%E5%88%86%E9%85%8D-1" class="hash-link" aria-label="空格分配：的直接链接" title="空格分配：的直接链接">​</a></h4><ul>
<li>单词总长度：7 + 2 + 4 = 13</li>
<li>需要空格数：16 - 13 = 3个空格</li>
<li>单词间隔数：3 - 1 = 2个间隔</li>
<li>平均每个间隔：3 / 2 = 1个空格</li>
<li>额外空格：3 % 2 = 1个</li>
<li>第一个间隔放：1 + 1 = 2个空格</li>
<li>第二个间隔放：1个空格</li>
</ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="构造结果-1">构造结果：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode68#%E6%9E%84%E9%80%A0%E7%BB%93%E6%9E%9C-1" class="hash-link" aria-label="构造结果：的直接链接" title="构造结果：的直接链接">​</a></h4><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">"example" + "  " + "of" + " " + "text" = "example  of text"</span><br></span></code></pre></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="第三行处理最后一行">第三行处理（最后一行）<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode68#%E7%AC%AC%E4%B8%89%E8%A1%8C%E5%A4%84%E7%90%86%E6%9C%80%E5%90%8E%E4%B8%80%E8%A1%8C" class="hash-link" aria-label="第三行处理（最后一行）的直接链接" title="第三行处理（最后一行）的直接链接">​</a></h3><h4 class="anchor anchorWithStickyNavbar_LWe7" id="确定单词范围-2">确定单词范围：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode68#%E7%A1%AE%E5%AE%9A%E5%8D%95%E8%AF%8D%E8%8C%83%E5%9B%B4-2" class="hash-link" aria-label="确定单词范围：的直接链接" title="确定单词范围：的直接链接">​</a></h4><ul>
<li>从索引6开始（"justification."）</li>
<li>只剩这一个单词，长度为15 ≤ 16</li>
<li>所以第三行为：["justification."]</li>
</ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="特殊处理">特殊处理：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode68#%E7%89%B9%E6%AE%8A%E5%A4%84%E7%90%86" class="hash-link" aria-label="特殊处理：的直接链接" title="特殊处理：的直接链接">​</a></h4><ul>
<li>由于是最后一行，采用左对齐</li>
<li>单词后不添加额外空格（只有一个单词）</li>
<li>行尾填充剩余空格：16 - 15 = 1个空格</li>
</ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="构造结果-2">构造结果：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode68#%E6%9E%84%E9%80%A0%E7%BB%93%E6%9E%9C-2" class="hash-link" aria-label="构造结果：的直接链接" title="构造结果：的直接链接">​</a></h4><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">"justification." + " " = "justification.  "</span><br></span></code></pre></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="最终输出">最终输出<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode68#%E6%9C%80%E7%BB%88%E8%BE%93%E5%87%BA" class="hash-link" aria-label="最终输出的直接链接" title="最终输出的直接链接">​</a></h2><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   "This    is    an",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   "example  of text",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   "justification.  "</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">]</span><br></span></code></pre></div></div><p>通过这个例子可以看出，算法的核心在于：</p><p>1.贪心地确定每行单词数量</p><p>2.根据行的类型采用不同的空格分配策略</p><p>3.特别处理最后一行的左对齐要求</p></div></div></details><div class="blog-post-comments" style="margin-top:2rem;padding-top:1.5rem;border-top:1px solid var(--ifm-color-emphasis-300)"><div style="margin-top:2rem"><div style="min-height:200px">加载评论中...</div></div></div>]]></content:encoded>
            <category>字符串</category>
        </item>
        <item>
            <title><![CDATA[找出字符串中第一个匹配项的下标]]></title>
            <link>https://EurekaShadow.github.io/EurekaShadow.github.io/blog/LeetCode28</link>
            <guid>https://EurekaShadow.github.io/EurekaShadow.github.io/blog/LeetCode28</guid>
            <pubDate>Sat, 16 Aug 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[力扣面试经典——28题]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="力扣面试经典28题"><span class="B2_JnYG"><a href="https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/description/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer" title="力扣">力扣面试经典——28题</a></span><a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode28#%E5%8A%9B%E6%89%A3%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B828%E9%A2%98" class="hash-link" aria-label="力扣面试经典28题的直接链接" title="力扣面试经典28题的直接链接">​</a></h3>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-参考代码">💡 参考代码：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode28#-%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81" class="hash-link" aria-label="💡 参考代码：的直接链接" title="💡 参考代码：的直接链接">​</a></h3>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 在haystack字符串中查找needle字符串的第一个匹配位置</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param haystack 主字符串</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param needle 要查找的子字符串</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 返回第一次匹配的索引，如果未找到则返回-1</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">strStr</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">char</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> haystack</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">char</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> needle</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 边界条件处理</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">needle </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">needle </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token char">'\0'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 空字符串在任何字符串的索引0处匹配</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">haystack </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">haystack </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token char">'\0'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 主字符串为空但要查找的字符串非空，返回-1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> hLen </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">strlen</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">haystack</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 主字符串长度</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> nLen </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">strlen</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">needle</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 子字符串长度</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 如果子字符串比主字符串长，不可能匹配</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">nLen </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> hLen</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 构建next数组（KMP算法的核心）</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> next </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token function" style="color:#d73a49">malloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> nLen</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    next</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 第一个字符的最长相等前后缀长度为0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> j </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 前缀末尾索引</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 构造next数组</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> nLen</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 当前后缀不匹配时，回退到前一个位置的next值</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">j </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> needle</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> needle</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">j</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            j </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> next</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">j </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 如果当前字符匹配，前缀长度加1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">needle</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> needle</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">j</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            j</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        next</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> j</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 记录当前位置的最长相等前后缀长度</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// KMP匹配过程</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    j </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// needle的索引</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> hLen</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 当字符不匹配时，根据next数组回退</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">j </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> haystack</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> needle</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">j</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            j </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> next</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">j </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 如果字符匹配，移动needle的指针</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">haystack</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> needle</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">j</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            j</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 如果needle已经完全匹配，返回匹配起始位置</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">j </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> nLen</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token function" style="color:#d73a49">free</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">next</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 释放内存</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> nLen </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">free</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">next</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 释放内存</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">   </span><span class="token comment" style="color:#999988;font-style:italic">// 未找到匹配</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-总结">📖 总结：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode28#-%E6%80%BB%E7%BB%93" class="hash-link" aria-label="📖 总结：的直接链接" title="📖 总结：的直接链接">​</a></h3>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>点击展开题目总结</summary><div><div class="collapsibleContent_i85q"><h1>🤔 找出字符串中第一个匹配项的下标</h1><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1️⃣-题目核心信息">1️⃣ 题目核心信息<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode28#1%EF%B8%8F%E2%83%A3-%E9%A2%98%E7%9B%AE%E6%A0%B8%E5%BF%83%E4%BF%A1%E6%81%AF" class="hash-link" aria-label="1️⃣ 题目核心信息的直接链接" title="1️⃣ 题目核心信息的直接链接">​</a></h2><p>🎯 <strong>功能描述</strong>：在主字符串(haystack)中查找子字符串(needle)第一次出现的位置，若不存在则返回-1</p><p>📥 <strong>输入输出</strong>：</p><ul>
<li><strong>输入</strong>：<!-- -->
<ul>
<li><code>haystack</code>：主字符串，被搜索的字符串</li>
<li><code>needle</code>：模式字符串，需要查找的子字符串</li>
</ul>
</li>
<li><strong>输出</strong>：返回<code>needle</code>在<code>haystack</code>中第一次出现的索引位置，如果不存在则返回-1</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2️⃣-实现原理">2️⃣ 实现原理<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode28#2%EF%B8%8F%E2%83%A3-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86" class="hash-link" aria-label="2️⃣ 实现原理的直接链接" title="2️⃣ 实现原理的直接链接">​</a></h2><p>💡 <strong>核心思路</strong>：使用KMP(Knuth-Morris-Pratt)字符串匹配算法，通过预处理模式串构建next数组来避免不必要的字符比较</p><p>📋 <strong>实现步骤</strong>：</p><ol>
<li>处理边界情况：空字符串、主串为空等情况</li>
<li>构建next数组：记录模式串中每个位置的最长相等前后缀长度</li>
<li>使用KMP算法进行匹配：利用next数组避免主串指针回溯</li>
<li>返回匹配结果：找到匹配则返回起始位置，否则返回-1</li>
</ol><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3️⃣-关键点解析">3️⃣ 关键点解析<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode28#3%EF%B8%8F%E2%83%A3-%E5%85%B3%E9%94%AE%E7%82%B9%E8%A7%A3%E6%9E%90" class="hash-link" aria-label="3️⃣ 关键点解析的直接链接" title="3️⃣ 关键点解析的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-代码技巧">🎯 代码技巧<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode28#-%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7" class="hash-link" aria-label="🎯 代码技巧的直接链接" title="🎯 代码技巧的直接链接">​</a></h3><ul>
<li><strong>KMP算法应用</strong>：通过构建next数组实现高效的字符串匹配</li>
<li><strong>双指针技术</strong>：使用两个指针分别遍历主串和模式串</li>
<li><strong>状态回退优化</strong>：利用next数组实现匹配失败时的智能回退，避免重复比较</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4️⃣-使用场景">4️⃣ 使用场景<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode28#4%EF%B8%8F%E2%83%A3-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="4️⃣ 使用场景的直接链接" title="4️⃣ 使用场景的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-适用情况">✅ 适用情况：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode28#-%E9%80%82%E7%94%A8%E6%83%85%E5%86%B5" class="hash-link" aria-label="✅ 适用情况：的直接链接" title="✅ 适用情况：的直接链接">​</a></h3><ul>
<li>在大文本中查找特定子串的位置</li>
<li>需要高效字符串匹配的场景</li>
<li>文本编辑器的查找功能实现</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-前提条件">⚠️ 前提条件：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode28#%EF%B8%8F-%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6" class="hash-link" aria-label="⚠️ 前提条件：的直接链接" title="⚠️ 前提条件：的直接链接">​</a></h3><ul>
<li>输入参数为有效的C风格字符串</li>
<li>字符串以'\0'结尾</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5️⃣-复杂度分析">5️⃣ 复杂度分析<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode28#5%EF%B8%8F%E2%83%A3-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90" class="hash-link" aria-label="5️⃣ 复杂度分析的直接链接" title="5️⃣ 复杂度分析的直接链接">​</a></h2><ul>
<li>
<p>⏱️ 时间复杂度：O(n + m)，其中n是主串长度，m是模式串长度，避免了暴力算法的O(n*m)复杂度</p>
</li>
<li>
<p>💾 空间复杂度：O(m)，主要用于存储next数组</p>
</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6️⃣-注意事项">6️⃣ 注意事项<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode28#6%EF%B8%8F%E2%83%A3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="6️⃣ 注意事项的直接链接" title="6️⃣ 注意事项的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-边界情况">🚩 边界情况：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode28#-%E8%BE%B9%E7%95%8C%E6%83%85%E5%86%B5" class="hash-link" aria-label="🚩 边界情况：的直接链接" title="🚩 边界情况：的直接链接">​</a></h3><ul>
<li>needle为空字符串时应返回0</li>
<li>haystack为空字符串但needle非空时应返回-1</li>
<li>needle长度大于haystack时直接返回-1</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-易错点">💥 易错点：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode28#-%E6%98%93%E9%94%99%E7%82%B9" class="hash-link" aria-label="💥 易错点：的直接链接" title="💥 易错点：的直接链接">​</a></h3><ul>
<li>next数组的构建逻辑容易出错，特别是回退条件的判断</li>
<li>匹配成功后的返回索引计算容易错误，应返回i - nLen + 1</li>
<li>内存管理需要注意，使用完next数组后需要释放内存</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="7️⃣-注意事项">7️⃣ 注意事项<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode28#7%EF%B8%8F%E2%83%A3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="7️⃣ 注意事项的直接链接" title="7️⃣ 注意事项的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="kmp算法原理简述">KMP算法原理简述<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode28#kmp%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86%E7%AE%80%E8%BF%B0" class="hash-link" aria-label="KMP算法原理简述的直接链接" title="KMP算法原理简述的直接链接">​</a></h3><p><code>KMP算法</code>是一种改进的字符串匹配算法，它的核心思想是当字符匹配失败时，利用已经匹配的部分信息，尽可能地跳过一些不必要的比较。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="第一步边界条件处理">第一步：边界条件处理<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode28#%E7%AC%AC%E4%B8%80%E6%AD%A5%E8%BE%B9%E7%95%8C%E6%9D%A1%E4%BB%B6%E5%A4%84%E7%90%86" class="hash-link" aria-label="第一步：边界条件处理的直接链接" title="第一步：边界条件处理的直接链接">​</a></h3><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">if (needle == NULL || *needle == '\0') {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return 0;  // 空字符串在任何字符串的索引0处匹配</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">if (haystack == NULL || *haystack == '\0') {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return -1; // 主字符串为空但要查找的字符串非空，返回-1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre></div></div><p>这部分处理特殊情况：</p><ul>
<li>如果要查找的字符串为空，则在任何字符串的第0个位置都能找到它</li>
<li>如果主字符串为空但要查找的字符串不为空，则肯定找不到</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="第二步获取字符串长度并比较">第二步：获取字符串长度并比较<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode28#%E7%AC%AC%E4%BA%8C%E6%AD%A5%E8%8E%B7%E5%8F%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%95%BF%E5%BA%A6%E5%B9%B6%E6%AF%94%E8%BE%83" class="hash-link" aria-label="第二步：获取字符串长度并比较的直接链接" title="第二步：获取字符串长度并比较的直接链接">​</a></h3><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">int hLen = strlen(haystack);  // 主字符串长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">int nLen = strlen(needle);    // 子字符串长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">if (nLen &gt; hLen) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return -1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre></div></div><p>如果要查找的字符串比主字符串还长，那肯定找不到。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="第三步构建next数组kmp算法的核心">第三步：构建next数组（KMP算法的核心）<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode28#%E7%AC%AC%E4%B8%89%E6%AD%A5%E6%9E%84%E5%BB%BAnext%E6%95%B0%E7%BB%84kmp%E7%AE%97%E6%B3%95%E7%9A%84%E6%A0%B8%E5%BF%83" class="hash-link" aria-label="第三步：构建next数组（KMP算法的核心）的直接链接" title="第三步：构建next数组（KMP算法的核心）的直接链接">​</a></h3><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">int* next = (int*)malloc(sizeof(int) * nLen);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">next[0] = 0;  // 第一个字符的最长相等前后缀长度为0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">int j = 0;    // 前缀末尾索引</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// 构造next数组</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">for (int i = 1; i &lt; nLen; i++) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 当前后缀不匹配时，回退到前一个位置的next值</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    while (j &gt; 0 &amp;&amp; needle[i] != needle[j]) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        j = next[j - 1];</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 如果当前字符匹配，前缀长度加1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if (needle[i] == needle[j]) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        j++;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    next[i] = j;  // 记录当前位置的最长相等前后缀长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre></div></div><p>我们通过一个具体例子来理解next数组的构建过程。假设<code>needle = "ababa"</code>：</p><table><thead><tr><th>i</th><th>needle[i]</th><th>j</th><th>next[i]</th><th>说明</th></tr></thead><tbody><tr><td>0</td><td>a</td><td>0</td><td>0</td><td>初始值</td></tr><tr><td>1</td><td>b</td><td>0</td><td>0</td><td>'a' != 'b'，j保持0</td></tr><tr><td>2</td><td>a</td><td>1</td><td>1</td><td>'b' != 'a'，j回退到next[0]=0，然后'a' == 'a'，j=1</td></tr><tr><td>3</td><td>b</td><td>2</td><td>2</td><td>'a' != 'b'，j回退到next[1]=0，然后'b' == 'b'，j=1，再'a' == 'a'，j=2</td></tr><tr><td>4</td><td>a</td><td>3</td><td>3</td><td>同上逻辑，j=3</td></tr></tbody></table><p>所以<code>next = [0, 0, 1, 2, 3]</code></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="第四步kmp匹配过程">第四步：KMP匹配过程<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode28#%E7%AC%AC%E5%9B%9B%E6%AD%A5kmp%E5%8C%B9%E9%85%8D%E8%BF%87%E7%A8%8B" class="hash-link" aria-label="第四步：KMP匹配过程的直接链接" title="第四步：KMP匹配过程的直接链接">​</a></h3><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">j = 0;  // needle的索引</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">for (int i = 0; i &lt; hLen; i++) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 当字符不匹配时，根据next数组回退</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    while (j &gt; 0 &amp;&amp; haystack[i] != needle[j]) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        j = next[j - 1];</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 如果字符匹配，移动needle的指针</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if (haystack[i] == needle[j]) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        j++;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // 如果needle已经完全匹配，返回匹配起始位置</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if (j == nLen) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        free(next);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return i - nLen + 1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre></div></div><p>示例1：<code>haystack = "sadbutsad", needle = "sad"</code></p><p>首先构建的next数组为[0, 0, 0]（因为"sad"中没有重复的前后缀）</p><table><thead><tr><th>i</th><th>haystack[i]</th><th>j</th><th>needle[j]</th><th>匹配情况</th><th>说明</th></tr></thead><tbody><tr><td>0</td><td>s</td><td>0</td><td>s</td><td>匹配</td><td>j++ → 1</td></tr><tr><td>1</td><td>a</td><td>1</td><td>a</td><td>匹配</td><td>j++ → 2</td></tr><tr><td>2</td><td>d</td><td>2</td><td>d</td><td>匹配</td><td>j++ → 3</td></tr><tr><td>-</td><td>-</td><td>3</td><td>-</td><td>-</td><td>j==nLen，匹配成功，返回 2-3+1=0</td></tr></tbody></table><p>所以返回索引0。</p><p>示例2：<code>haystack = "leetcode", needle = "leeto"</code></p><p>构建的next数组为[0, 0, 0, 0, 0]（因为"leeto"中没有重复前后缀）</p><table><thead><tr><th>i</th><th>haystack[i]</th><th>j</th><th>needle[j]</th><th>匹配情况</th><th>说明</th></tr></thead><tbody><tr><td>0</td><td>l</td><td>0</td><td>l</td><td>匹配</td><td>j++ → 1</td></tr><tr><td>1</td><td>e</td><td>1</td><td>e</td><td>匹配</td><td>j++ → 2</td></tr><tr><td>2</td><td>e</td><td>2</td><td>e</td><td>匹配</td><td>j++ → 3</td></tr><tr><td>3</td><td>t</td><td>3</td><td>t</td><td>匹配</td><td>j++ → 4</td></tr><tr><td>4</td><td>c</td><td>4</td><td>o</td><td>不匹配</td><td>j回退到next[3]=0，仍不匹配，j保持0</td></tr><tr><td>5</td><td>o</td><td>0</td><td>l</td><td>不匹配</td><td>j保持0</td></tr><tr><td>6</td><td>d</td><td>0</td><td>l</td><td>不匹配</td><td>j保持0</td></tr><tr><td>7</td><td>e</td><td>0</td><td>l</td><td>不匹配</td><td>j保持0</td></tr></tbody></table><p>整个过程j从未达到nLen=5，所以返回-1。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="kmp算法的优势">KMP算法的优势<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode28#kmp%E7%AE%97%E6%B3%95%E7%9A%84%E4%BC%98%E5%8A%BF" class="hash-link" aria-label="KMP算法的优势的直接链接" title="KMP算法的优势的直接链接">​</a></h3><p>相比暴力匹配算法，KMP算法的优势在于：</p><p>1.时间复杂度从O(n*m)降低到O(n+m)</p><p>2.当发生不匹配时，主串的指针不会回溯，避免了重复比较</p><p>3.利用已匹配的信息，通过next数组决定模式串应该移动多少位</p><p>这就是KMP算法解决字符串匹配问题的完整过程。</p><p>这个 <code>KMP算法</code> 我至今不理解！（20250816）</p></div></div></details><div class="blog-post-comments" style="margin-top:2rem;padding-top:1.5rem;border-top:1px solid var(--ifm-color-emphasis-300)"><div style="margin-top:2rem"><div style="min-height:200px">加载评论中...</div></div></div>]]></content:encoded>
            <category>字符串</category>
        </item>
        <item>
            <title><![CDATA[Z 字形变换]]></title>
            <link>https://EurekaShadow.github.io/EurekaShadow.github.io/blog/LeetCode6</link>
            <guid>https://EurekaShadow.github.io/EurekaShadow.github.io/blog/LeetCode6</guid>
            <pubDate>Fri, 15 Aug 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[力扣面试经典——6题]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="力扣面试经典6题"><span class="B2_JnYG"><a href="https://leetcode.cn/problems/zigzag-conversion/description/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer" title="力扣">力扣面试经典——6题</a></span><a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode6#%E5%8A%9B%E6%89%A3%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B86%E9%A2%98" class="hash-link" aria-label="力扣面试经典6题的直接链接" title="力扣面试经典6题的直接链接">​</a></h3>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-参考代码">💡 参考代码：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode6#-%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81" class="hash-link" aria-label="💡 参考代码：的直接链接" title="💡 参考代码：的直接链接">​</a></h3>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * Z字形变换函数</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param s 输入字符串</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param numRows 指定行数</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 变换后的字符串</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 解题思路:</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 1. 对于第0行和第numRows-1行，字符间隔固定为2*(numRows-1)</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 2. 对于中间行，字符交替出现在两个等差数列中</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 3. 特殊情况：numRows=1时直接返回原字符串</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">char</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">convert</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">char</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> numRows</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> len </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">strlen</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 特殊情况：行数为1或字符串长度小于行数时，直接返回原字符串</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">numRows </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"> numRows </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> len</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 分配结果字符串空间</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">char</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">char</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token function" style="color:#d73a49">malloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">len </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">char</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> index </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 计算周期长度</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> cycleLen </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> numRows </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 按行遍历</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> numRows</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 遍历每个周期</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> j </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> j </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> len</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> j </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> cycleLen</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 每行的第一个字符（垂直列上的字符）</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            result</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">index</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">j </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 中间行的第二个字符（斜线上的字符）</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 条件：不是第一行和最后一行，且索引不越界</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> numRows </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> j </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> cycleLen </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> len</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                result</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">index</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">j </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> cycleLen </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    result</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">index</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token char">'\0'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 字符串结束符</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> result</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-总结">📖 总结：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode6#-%E6%80%BB%E7%BB%93" class="hash-link" aria-label="📖 总结：的直接链接" title="📖 总结：的直接链接">​</a></h3>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>点击展开题目总结</summary><div><div class="collapsibleContent_i85q"><h1>🤔 Z字形变换</h1><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1️⃣-题目核心信息">1️⃣ 题目核心信息<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode6#1%EF%B8%8F%E2%83%A3-%E9%A2%98%E7%9B%AE%E6%A0%B8%E5%BF%83%E4%BF%A1%E6%81%AF" class="hash-link" aria-label="1️⃣ 题目核心信息的直接链接" title="1️⃣ 题目核心信息的直接链接">​</a></h2><p>🎯 <strong>功能描述</strong>：将字符串按照Z字形方式排列后，按行读取生成新字符串</p><p>📥 <strong>输入输出</strong>：</p><ul>
<li><strong>输入</strong>：<code>s</code>（输入字符串），<code>numRows</code>（指定行数）</li>
<li><strong>输出</strong>：按Z字形排列后逐行读取的新字符串</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2️⃣-实现原理">2️⃣ 实现原理<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode6#2%EF%B8%8F%E2%83%A3-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86" class="hash-link" aria-label="2️⃣ 实现原理的直接链接" title="2️⃣ 实现原理的直接链接">​</a></h2><p>💡 <strong>核心思路</strong>：通过数学方法直接计算每行字符的位置，避免构造二维矩阵</p><p>📋 <strong>实现步骤</strong>：</p><ol>
<li>处理特殊情况：当<code>numRows</code>为1或大于等于字符串长度时直接返回原字符串</li>
<li>计算Z字形周期长度：<code>2*numRows-2</code></li>
<li>按行遍历，对每行计算对应字符位置</li>
<li>对于首尾行，字符间隔固定；对于中间行，每个周期有两个字符位置</li>
</ol><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3️⃣-关键点解析">3️⃣ 关键点解析<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode6#3%EF%B8%8F%E2%83%A3-%E5%85%B3%E9%94%AE%E7%82%B9%E8%A7%A3%E6%9E%90" class="hash-link" aria-label="3️⃣ 关键点解析的直接链接" title="3️⃣ 关键点解析的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-代码技巧">🎯 代码技巧<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode6#-%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7" class="hash-link" aria-label="🎯 代码技巧的直接链接" title="🎯 代码技巧的直接链接">​</a></h3><ul>
<li>利用周期性规律避免实际构造Z字形矩阵</li>
<li>通过索引计算直接定位字符位置</li>
<li>分别处理首尾行和中间行的不同字符分布规律</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4️⃣-使用场景">4️⃣ 使用场景<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode6#4%EF%B8%8F%E2%83%A3-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="4️⃣ 使用场景的直接链接" title="4️⃣ 使用场景的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-适用情况">✅ 适用情况：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode6#-%E9%80%82%E7%94%A8%E6%83%85%E5%86%B5" class="hash-link" aria-label="✅ 适用情况：的直接链接" title="✅ 适用情况：的直接链接">​</a></h3><ul>
<li>需要按特定规律重新排列字符串</li>
<li>字符串变换类问题</li>
<li>需要优化空间复杂度的场景</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-前提条件">⚠️ 前提条件：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode6#%EF%B8%8F-%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6" class="hash-link" aria-label="⚠️ 前提条件：的直接链接" title="⚠️ 前提条件：的直接链接">​</a></h3><ul>
<li>输入字符串非空</li>
<li>行数大于0</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5️⃣-复杂度分析">5️⃣ 复杂度分析<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode6#5%EF%B8%8F%E2%83%A3-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90" class="hash-link" aria-label="5️⃣ 复杂度分析的直接链接" title="5️⃣ 复杂度分析的直接链接">​</a></h2><ul>
<li>
<p>⏱️ 时间复杂度：O(n)，其中n为字符串长度，每个字符访问一次</p>
</li>
<li>
<p>💾 空间复杂度：O(1)，不考虑结果字符串的话只使用常数额外空间</p>
</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6️⃣-注意事项">6️⃣ 注意事项<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode6#6%EF%B8%8F%E2%83%A3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="6️⃣ 注意事项的直接链接" title="6️⃣ 注意事项的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-边界情况">🚩 边界情况：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode6#-%E8%BE%B9%E7%95%8C%E6%83%85%E5%86%B5" class="hash-link" aria-label="🚩 边界情况：的直接链接" title="🚩 边界情况：的直接链接">​</a></h3><ul>
<li><code>numRows = 1</code>时，直接返回原字符串</li>
<li>字符串长度为1的情况</li>
<li><code>numRows</code>大于字符串长度的情况</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-易错点">💥 易错点：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode6#-%E6%98%93%E9%94%99%E7%82%B9" class="hash-link" aria-label="💥 易错点：的直接链接" title="💥 易错点：的直接链接">​</a></h3><ul>
<li>忘记处理<code>numRows = 1</code>的特殊情况导致除零错误</li>
<li>中间行字符位置计算错误</li>
<li>字符串结束符<code>\0</code>忘记添加</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="7⃣-补充说明">7⃣ 补充说明<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode6#7%E2%83%A3-%E8%A1%A5%E5%85%85%E8%AF%B4%E6%98%8E" class="hash-link" aria-label="7⃣ 补充说明的直接链接" title="7⃣ 补充说明的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="整体思路">整体思路<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode6#%E6%95%B4%E4%BD%93%E6%80%9D%E8%B7%AF" class="hash-link" aria-label="整体思路的直接链接" title="整体思路的直接链接">​</a></h3><p>这个算法采用<strong>按行读取</strong>的方式，直接从原字符串中按Z字形顺序提取字符。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="代码详解">代码详解<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode6#%E4%BB%A3%E7%A0%81%E8%AF%A6%E8%A7%A3" class="hash-link" aria-label="代码详解的直接链接" title="代码详解的直接链接">​</a></h3><ol>
<li>初始化和特殊情况处理</li>
</ol><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">int len = strlen(s);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// 特殊情况：行数为1或字符串长度小于行数时，直接返回原字符串</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">if (numRows == 1 || numRows &gt;= len) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return s;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre></div></div><p>解释：</p><ul>
<li>当 <code>numRows = 1</code> 时，Z字形排列就是原字符串本身</li>
<li>当 <code>numRows &gt;= len</code> 时，每行最多一个字符，结果也是原字符串</li>
</ul><ol start="2">
<li>关键参数计算</li>
</ol><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">int cycleLen = 2 * numRows - 2;</span><br></span></code></pre></div></div><p>解释：计算Z字形的周期长度</p><ul>
<li>例如 <code>numRows = 3</code> 时，<code>cycleLen = 2*3-2 = 4</code></li>
<li>这意味着每<code>4</code>个字符为一个完整的<code>V</code>字形周期</li>
</ul><ol start="3">
<li>按行遍历核心逻辑</li>
</ol><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">for (int i = 0; i &lt; numRows; i++) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    for (int j = 0; j + i &lt; len; j += cycleLen) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        result[index++] = s[j + i];</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (i != 0 &amp;&amp; i != numRows - 1 &amp;&amp; j + cycleLen - i &lt; len) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            result[index++] = s[j + cycleLen - i];</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="详细例子演示">详细例子演示<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode6#%E8%AF%A6%E7%BB%86%E4%BE%8B%E5%AD%90%E6%BC%94%E7%A4%BA" class="hash-link" aria-label="详细例子演示的直接链接" title="详细例子演示的直接链接">​</a></h3><p>以 <code>s = "PAYPALISHIRING"</code>, <code>numRows = 3</code> 为例：</p><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">原字符串索引: 0 1 2 3 4 5 6 7 8 9 10 11 12 13</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">原字符串:     P A Y P A L I S H I R  I  N  G</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cycleLen = 2*3-2 = 4</span><br></span></code></pre></div></div><p>第0行 (i=0)：</p><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">j=0:  j+i=0, 取s[0]='P'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">j=4:  j+i=4, 取s[4]='A'  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">j=8:  j+i=8, 取s[8]='H'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">j=12: j+i=12,取s[12]='N'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">第0行结果: PAHN</span><br></span></code></pre></div></div><p>第1行 (i=1)：</p><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">j=0: j+i=1, 取s[1]='A'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     j+cycleLen-i = 0+4-1=3, 取s[3]='P'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">j=4: j+i=5, 取s[5]='L'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     j+cycleLen-i = 4+4-1=7, 取s[7]='S'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">j=8: j+i=9, 取s[9]='I'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     j+cycleLen-i = 8+4-1=11,取s[11]='I'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">j=12:j+i=13,取s[13]='G'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">第1行结果: APLSIIG</span><br></span></code></pre></div></div><p>第2行 (i=2)：</p><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">j=0: j+i=2, 取s[2]='Y'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">j=4: j+i=6, 取s[6]='I'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">j=8: j+i=10,取s[10]='R'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">第2行结果: YIR</span><br></span></code></pre></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="z字形图形化理解">Z字形图形化理解<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode6#z%E5%AD%97%E5%BD%A2%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%90%86%E8%A7%A3" class="hash-link" aria-label="Z字形图形化理解的直接链接" title="Z字形图形化理解的直接链接">​</a></h3><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">P     A     H     N        // i=0, 索引: 0,4,8,12</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> A   P L   S I   I G       // i=1, 索引: 1,3,5,7,9,11,13</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Y     I     R            // i=2, 索引: 2,6,10</span><br></span></code></pre></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="核心规律">核心规律<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode6#%E6%A0%B8%E5%BF%83%E8%A7%84%E5%BE%8B" class="hash-link" aria-label="核心规律的直接链接" title="核心规律的直接链接">​</a></h3><p>1.垂直列字符：位于索引 <code>j + i</code> 处</p><p>2.斜线字符：位于索引 <code>j + cycleLen - i</code> 处（仅中间行）</p><p>3.周期跳跃：每次跳跃 <code>cycleLen</code> 个位置</p><p><strong>时间复杂度</strong></p><ul>
<li>时间复杂度：O(n)，每个字符只访问一次</li>
<li>空间复杂度：O(n)，用于存储结果字符串</li>
</ul><p>这种方法避免了构造二维数组的额外空间，直接通过数学计算定位字符位置，效率很高。</p><p>这道题我至今<strong>尚未完全理解</strong>（20250815）</p></div></div></details><div class="blog-post-comments" style="margin-top:2rem;padding-top:1.5rem;border-top:1px solid var(--ifm-color-emphasis-300)"><div style="margin-top:2rem"><div style="min-height:200px">加载评论中...</div></div></div>]]></content:encoded>
            <category>数组</category>
        </item>
        <item>
            <title><![CDATA[反转字符串中的单词]]></title>
            <link>https://EurekaShadow.github.io/EurekaShadow.github.io/blog/LeetCode151</link>
            <guid>https://EurekaShadow.github.io/EurekaShadow.github.io/blog/LeetCode151</guid>
            <pubDate>Thu, 14 Aug 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[力扣面试经典——151题]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="力扣面试经典151题"><span class="B2_JnYG"><a href="https://leetcode.cn/problems/reverse-words-in-a-string/description/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer" title="力扣">力扣面试经典——151题</a></span><a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode151#%E5%8A%9B%E6%89%A3%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B8151%E9%A2%98" class="hash-link" aria-label="力扣面试经典151题的直接链接" title="力扣面试经典151题的直接链接">​</a></h3>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-参考代码">💡 参考代码：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode151#-%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81" class="hash-link" aria-label="💡 参考代码：的直接链接" title="💡 参考代码：的直接链接">​</a></h3>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 移除字符串中的多余空格</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param s 输入字符串</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 处理后的字符串长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">removeExtraSpaces</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">char</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> slow </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> fast </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 跳过前导空格</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">fast</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token char">' '</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        fast</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 处理中间部分：移除单词间多余的空格</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">fast </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">strlen</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 如果当前字符不是空格，或者是第一个空格，则保留</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">fast</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token char">' '</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">fast </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">fast </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token char">' '</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            s</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">slow</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">fast</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        fast</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 处理结尾可能的空格</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">slow </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">slow </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token char">' '</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        slow</span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    s</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">slow</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token char">'\0'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 添加字符串结束符</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> slow</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 反转字符串指定范围内的字符</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param s 字符串</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param start 起始位置（包含）</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param end 结束位置（包含）</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">reverseString</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">char</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> start</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> end</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">start </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> end</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> temp </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">start</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        s</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">start</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">end</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        s</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">end</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> temp</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        start</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        end</span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 反转字符串中单词的顺序</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param s 输入字符串</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 反转后的字符串</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">char</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">reverseWords</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">char</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 第一步：移除多余空格</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> len </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">removeExtraSpaces</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 第二步：反转整个字符串</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">reverseString</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> len </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 第三步：反转每个单词</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> start </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token plain"> len</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 遇到空格或字符串结尾时，反转当前单词</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token char">' '</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token char">'\0'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token function" style="color:#d73a49">reverseString</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> start</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            start </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-总结">📖 总结：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode151#-%E6%80%BB%E7%BB%93" class="hash-link" aria-label="📖 总结：的直接链接" title="📖 总结：的直接链接">​</a></h3>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>点击展开题目总结</summary><div><div class="collapsibleContent_i85q"><h1>🤔 反转字符串中的单词</h1><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1️⃣-题目核心信息">1️⃣ 题目核心信息<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode151#1%EF%B8%8F%E2%83%A3-%E9%A2%98%E7%9B%AE%E6%A0%B8%E5%BF%83%E4%BF%A1%E6%81%AF" class="hash-link" aria-label="1️⃣ 题目核心信息的直接链接" title="1️⃣ 题目核心信息的直接链接">​</a></h2><p>🎯 <strong>功能描述</strong>：给定一个字符串，反转其中单词的顺序，同时处理多余的空格问题</p><p>📥 <strong>输入输出</strong>：</p><ul>
<li><strong>输入</strong>：<code>char* s</code> - 输入的字符串，可能包含前导空格、尾随空格或单词间多个空格</li>
<li><strong>输出</strong>：<code>char*</code> - 返回单词顺序颠倒且单词间仅用单个空格分隔的字符串</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2️⃣-实现原理">2️⃣ 实现原理<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode151#2%EF%B8%8F%E2%83%A3-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86" class="hash-link" aria-label="2️⃣ 实现原理的直接链接" title="2️⃣ 实现原理的直接链接">​</a></h2><p>💡 <strong>核心思路</strong>：使用双指针技术移除多余空格，然后通过整体反转加局部反转的方式实现单词顺序调换</p><p>📋 <strong>实现步骤</strong>：</p><ol>
<li>使用双指针移除字符串中的前导空格、尾随空格和单词间的多余空格</li>
<li>反转整个字符串</li>
<li>遍历字符串，识别每个单词的边界并单独反转每个单词</li>
<li>返回处理后的字符串</li>
</ol><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3️⃣-关键点解析">3️⃣ 关键点解析<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode151#3%EF%B8%8F%E2%83%A3-%E5%85%B3%E9%94%AE%E7%82%B9%E8%A7%A3%E6%9E%90" class="hash-link" aria-label="3️⃣ 关键点解析的直接链接" title="3️⃣ 关键点解析的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-代码技巧">🎯 代码技巧<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode151#-%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7" class="hash-link" aria-label="🎯 代码技巧的直接链接" title="🎯 代码技巧的直接链接">​</a></h3><ul>
<li><strong>双指针技术</strong>：用于高效地移除多余空格，避免使用额外空间</li>
<li><strong>两次反转法</strong>：先整体反转再局部反转，巧妙实现单词顺序调换</li>
<li><strong>原地操作</strong>：所有操作都在原字符串上进行，满足O(1)空间复杂度要求</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4️⃣-使用场景">4️⃣ 使用场景<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode151#4%EF%B8%8F%E2%83%A3-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="4️⃣ 使用场景的直接链接" title="4️⃣ 使用场景的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-适用情况">✅ 适用情况：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode151#-%E9%80%82%E7%94%A8%E6%83%85%E5%86%B5" class="hash-link" aria-label="✅ 适用情况：的直接链接" title="✅ 适用情况：的直接链接">​</a></h3><ul>
<li>需要反转句子中单词顺序的文本处理</li>
<li>内存受限环境下处理字符串</li>
<li>需要规范化空格的字符串处理场景</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-前提条件">⚠️ 前提条件：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode151#%EF%B8%8F-%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6" class="hash-link" aria-label="⚠️ 前提条件：的直接链接" title="⚠️ 前提条件：的直接链接">​</a></h3><ul>
<li>字符串必须是可变的（C语言中为字符数组）</li>
<li>字符串至少包含一个单词</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5️⃣-复杂度分析">5️⃣ 复杂度分析<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode151#5%EF%B8%8F%E2%83%A3-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90" class="hash-link" aria-label="5️⃣ 复杂度分析的直接链接" title="5️⃣ 复杂度分析的直接链接">​</a></h2><ul>
<li>
<p>⏱️ 时间复杂度：O(n)，其中n是字符串长度，需要遍历字符串常数次</p>
</li>
<li>
<p>💾 空间复杂度：O(1)，只使用常数级别的额外空间，原地修改字符串</p>
</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6️⃣-注意事项">6️⃣ 注意事项<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode151#6%EF%B8%8F%E2%83%A3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="6️⃣ 注意事项的直接链接" title="6️⃣ 注意事项的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-边界情况">🚩 边界情况：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode151#-%E8%BE%B9%E7%95%8C%E6%83%85%E5%86%B5" class="hash-link" aria-label="🚩 边界情况：的直接链接" title="🚩 边界情况：的直接链接">​</a></h3><ul>
<li>空字符串或只包含空格的字符串</li>
<li>只有一个单词的字符串</li>
<li>字符串中包含大量多余空格的情况</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-易错点">💥 易错点：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode151#-%E6%98%93%E9%94%99%E7%82%B9" class="hash-link" aria-label="💥 易错点：的直接链接" title="💥 易错点：的直接链接">​</a></h3><ul>
<li>忘记处理前导空格和尾随空格</li>
<li>单词间空格处理不正确，可能保留多个空格</li>
<li>反转区间边界处理错误，导致数组越界</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="7️⃣-补充说明">7️⃣ 补充说明<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode151#7%EF%B8%8F%E2%83%A3-%E8%A1%A5%E5%85%85%E8%AF%B4%E6%98%8E" class="hash-link" aria-label="7️⃣ 补充说明的直接链接" title="7️⃣ 补充说明的直接链接">​</a></h2><p>以字符串 " the sky is blue " 为例来演示整个算法过程：</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="初始状态">初始状态<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode151#%E5%88%9D%E5%A7%8B%E7%8A%B6%E6%80%81" class="hash-link" aria-label="初始状态的直接链接" title="初始状态的直接链接">​</a></h3><p>输入字符串：<code>" the sky is blue "</code></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="第一步移除多余空格">第一步：移除多余空格<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode151#%E7%AC%AC%E4%B8%80%E6%AD%A5%E7%A7%BB%E9%99%A4%E5%A4%9A%E4%BD%99%E7%A9%BA%E6%A0%BC" class="hash-link" aria-label="第一步：移除多余空格的直接链接" title="第一步：移除多余空格的直接链接">​</a></h3><p>执行 <code>removeExtraSpaces</code> 函数：</p><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">原字符串: "  the sky is blue  "</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          ↑</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        fast=0, slow=0</span><br></span></code></pre></div></div><p>过程：</p><ul>
<li>fast=0,1: 空格，跳过</li>
<li>fast=2: 't' -&gt; s[0]='t', slow=1</li>
<li>fast=3: 'h' -&gt; s[1]='h', slow=2</li>
<li>fast=4: 'e' -&gt; s[2]='e', slow=3</li>
<li>fast=5: 空格 -&gt; s[3]=' ', slow=4</li>
<li>fast=6: 空格 -&gt; 与前一字符都是空格，跳过</li>
<li>fast=7: 's' -&gt; s[4]='s', slow=5</li>
<li>fast=8: 'k' -&gt; s[5]='k', slow=6</li>
<li>fast=9: 'y' -&gt; s[6]='y', slow=7</li>
<li>fast=10: 空格 -&gt; s[7]=' ', slow=8</li>
<li>fast=11: 'i' -&gt; s[8]='i', slow=9</li>
<li>fast=12: 's' -&gt; s[9]='s', slow=10</li>
<li>fast=13: 空格 -&gt; s[10]=' ', slow=11</li>
<li>fast=14: 'b' -&gt; s[11]='b', slow=12</li>
<li>fast=15: 'l' -&gt; s[12]='l', slow=13</li>
<li>fast=16: 'u' -&gt; s[13]='u', slow=14</li>
<li>fast=17: 'e' -&gt; s[14]='e', slow=15</li>
<li>fast=18,19: 空格 -&gt; 检查到结尾空格，不做处理</li>
</ul><p>最终结果: "the sky is blue"
索引:      0123456789ABCDEF
长度: 15</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="第二步反转整个字符串">第二步：反转整个字符串<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode151#%E7%AC%AC%E4%BA%8C%E6%AD%A5%E5%8F%8D%E8%BD%AC%E6%95%B4%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2" class="hash-link" aria-label="第二步：反转整个字符串的直接链接" title="第二步：反转整个字符串的直接链接">​</a></h3><p>执行 <code>reverseString(s, 0, 14)</code>：</p><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">原字符串: "the sky is blue"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">反转后:   "eulb si yks eht"</span><br></span></code></pre></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="第三步逐个反转单词">第三步：逐个反转单词<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode151#%E7%AC%AC%E4%B8%89%E6%AD%A5%E9%80%90%E4%B8%AA%E5%8F%8D%E8%BD%AC%E5%8D%95%E8%AF%8D" class="hash-link" aria-label="第三步：逐个反转单词的直接链接" title="第三步：逐个反转单词的直接链接">​</a></h3><p>遍历字符串，对每个单词进行反转：</p><p>1.处理第一个单词 "eulb"（索引0-3）：</p><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">反转前: "eulb si yks eht"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">反转后: "blue si yks eht"</span><br></span></code></pre></div></div><p>2.处理第二个单词 "si"（索引5-6）：</p><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">反转前: "blue si yks eht"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">反转后: "blue is yks eht"</span><br></span></code></pre></div></div><p>3.处理第三个单词 "yks"（索引8-10）：</p><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">反转前: "blue is yks eht"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">反转后: "blue is sky eht"</span><br></span></code></pre></div></div><p>4.处理第四个单词 "eht"（索引12-14）：</p><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">反转前: "blue is sky eht"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">反转后: "blue is sky the"  </span><br></span></code></pre></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="最终结果">最终结果<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode151#%E6%9C%80%E7%BB%88%E7%BB%93%E6%9E%9C" class="hash-link" aria-label="最终结果的直接链接" title="最终结果的直接链接">​</a></h3><p>输出字符串：<code>"blue is sky the"</code></p><p>这个过程通过三步操作完成了单词顺序的反转：</p><p>1.首先清理输入字符串，移除多余空格</p><p>2.然后整体反转字符串</p><p>3.最后将每个单词再次反转以恢复其正确顺序</p><p>这种方法的优势在于只需要常数级别的额外空间，完全在原字符串上进行操作。</p></div></div></details><div class="blog-post-comments" style="margin-top:2rem;padding-top:1.5rem;border-top:1px solid var(--ifm-color-emphasis-300)"><div style="margin-top:2rem"><div style="min-height:200px">加载评论中...</div></div></div>]]></content:encoded>
            <category>字符串</category>
        </item>
        <item>
            <title><![CDATA[最长公共前缀]]></title>
            <link>https://EurekaShadow.github.io/EurekaShadow.github.io/blog/LeetCode14</link>
            <guid>https://EurekaShadow.github.io/EurekaShadow.github.io/blog/LeetCode14</guid>
            <pubDate>Wed, 13 Aug 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[力扣面试经典——14题]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="力扣面试经典14题"><span class="B2_JnYG"><a href="https://leetcode.cn/problems/longest-common-prefix/description/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer" title="力扣">力扣面试经典——14题</a></span><a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode14#%E5%8A%9B%E6%89%A3%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B814%E9%A2%98" class="hash-link" aria-label="力扣面试经典14题的直接链接" title="力扣面试经典14题的直接链接">​</a></h3>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-参考代码">💡 参考代码：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode14#-%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81" class="hash-link" aria-label="💡 参考代码：的直接链接" title="💡 参考代码：的直接链接">​</a></h3>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 查找字符串数组中的最长公共前缀</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param strs 字符串数组</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param strsSize 数组长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 返回最长公共前缀字符串</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">longestCommonPrefix</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> strs</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> strsSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 边界条件：如果数组为空，返回空字符串</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">strsSize </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">char</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">malloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        result</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token char">'\0'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> result</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 边界条件：如果只有一个字符串，返回该字符串</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">strsSize </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">char</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">malloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">strlen</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">strs</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">strcpy</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">result</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> strs</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> result</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 获取第一个字符串的长度作为比较基准</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> firstStrLen </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">strlen</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">strs</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 逐个字符比较</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> firstStrLen</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> currentChar </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> strs</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 当前比较的字符</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 检查其他所有字符串在位置i处是否都有相同的字符</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> j </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> j </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> strsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> j</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 如果当前字符串在位置i处没有字符或者字符不匹配</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">strlen</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">strs</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">j</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"> strs</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">j</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> currentChar</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token comment" style="color:#999988;font-style:italic">// 找到公共前缀的结束位置，分配内存并复制前缀</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">char</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">malloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token function" style="color:#d73a49">strncpy</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">result</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> strs</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                result</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token char">'\0'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 添加字符串结束符</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> result</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 如果第一个字符串的所有字符都是公共前缀</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">char</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">malloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">firstStrLen </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">strcpy</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">result</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> strs</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> result</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-总结">📖 总结：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode14#-%E6%80%BB%E7%BB%93" class="hash-link" aria-label="📖 总结：的直接链接" title="📖 总结：的直接链接">​</a></h3>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>点击展开题目总结</summary><div><div class="collapsibleContent_i85q"><h1>🤔 最长公共前缀</h1><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1️⃣-题目核心信息">1️⃣ 题目核心信息<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode14#1%EF%B8%8F%E2%83%A3-%E9%A2%98%E7%9B%AE%E6%A0%B8%E5%BF%83%E4%BF%A1%E6%81%AF" class="hash-link" aria-label="1️⃣ 题目核心信息的直接链接" title="1️⃣ 题目核心信息的直接链接">​</a></h2><p>🎯 <strong>功能描述</strong>：查找字符串数组中所有字符串的最长公共前缀，如果不存在公共前缀则返回空字符串</p><p>📥 <strong>输入输出</strong>：</p><ul>
<li><strong>输入</strong>：<code>strs</code> - 字符串数组，<code>strsSize</code> - 数组长度</li>
<li><strong>输出</strong>：返回最长公共前缀字符串（需要手动释放内存）</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2️⃣-实现原理">2️⃣ 实现原理<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode14#2%EF%B8%8F%E2%83%A3-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86" class="hash-link" aria-label="2️⃣ 实现原理的直接链接" title="2️⃣ 实现原理的直接链接">​</a></h2><p>💡 <strong>核心思路</strong>：采用垂直扫描法，从左到右逐个字符比较所有字符串在相同位置的字符是否一致</p><p>📋 <strong>实现步骤</strong>：</p><ol>
<li>处理边界情况：空数组和单字符串数组</li>
<li>以第一个字符串为基准，从第0个字符开始逐个检查</li>
<li>对每个字符位置，遍历所有字符串验证该位置字符是否相同</li>
<li>一旦发现不匹配或某个字符串长度不足，立即返回当前找到的公共前缀</li>
</ol><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3️⃣-关键点解析">3️⃣ 关键点解析<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode14#3%EF%B8%8F%E2%83%A3-%E5%85%B3%E9%94%AE%E7%82%B9%E8%A7%A3%E6%9E%90" class="hash-link" aria-label="3️⃣ 关键点解析的直接链接" title="3️⃣ 关键点解析的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-代码技巧">🎯 代码技巧<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode14#-%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7" class="hash-link" aria-label="🎯 代码技巧的直接链接" title="🎯 代码技巧的直接链接">​</a></h3><ul>
<li>垂直扫描：按列比较而非按行比较，提高比较效率</li>
<li>提前终止：发现不匹配时立即停止，避免无效计算</li>
<li>动态内存分配：根据实际需要的前缀长度分配内存空间</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4️⃣-使用场景">4️⃣ 使用场景<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode14#4%EF%B8%8F%E2%83%A3-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="4️⃣ 使用场景的直接链接" title="4️⃣ 使用场景的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-适用情况">✅ 适用情况：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode14#-%E9%80%82%E7%94%A8%E6%83%85%E5%86%B5" class="hash-link" aria-label="✅ 适用情况：的直接链接" title="✅ 适用情况：的直接链接">​</a></h3><ul>
<li>查找多个字符串的公共前缀</li>
<li>文件路径匹配</li>
<li>自动补全功能中的前缀匹配</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-前提条件">⚠️ 前提条件：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode14#%EF%B8%8F-%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6" class="hash-link" aria-label="⚠️ 前提条件：的直接链接" title="⚠️ 前提条件：的直接链接">​</a></h3><ul>
<li>输入字符串数组不为NULL</li>
<li>所有字符串只包含小写英文字母</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5️⃣-复杂度分析">5️⃣ 复杂度分析<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode14#5%EF%B8%8F%E2%83%A3-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90" class="hash-link" aria-label="5️⃣ 复杂度分析的直接链接" title="5️⃣ 复杂度分析的直接链接">​</a></h2><ul>
<li>
<p>⏱️ 时间复杂度：O(S)，其中S是所有字符串的字符总数，最坏情况下需要遍历所有字符</p>
</li>
<li>
<p>💾 空间复杂度：O(1)，不考虑返回值的情况下只使用常数额外空间</p>
</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6️⃣-注意事项">6️⃣ 注意事项<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode14#6%EF%B8%8F%E2%83%A3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="6️⃣ 注意事项的直接链接" title="6️⃣ 注意事项的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-边界情况">🚩 边界情况：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode14#-%E8%BE%B9%E7%95%8C%E6%83%85%E5%86%B5" class="hash-link" aria-label="🚩 边界情况：的直接链接" title="🚩 边界情况：的直接链接">​</a></h3><ul>
<li>空数组（strsSize = 0）</li>
<li>单个字符串数组（strsSize = 1）</li>
<li>包含空字符串的数组</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-易错点">💥 易错点：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode14#-%E6%98%93%E9%94%99%E7%82%B9" class="hash-link" aria-label="💥 易错点：的直接链接" title="💥 易错点：的直接链接">​</a></h3><ul>
<li>忘记手动释放返回的字符串内存导致内存泄漏</li>
<li>没有正确处理字符串长度不足的情况导致数组越界</li>
<li>字符串结束符'\0'处理不当</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="7️⃣-补充说明">7️⃣ 补充说明<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode14#7%EF%B8%8F%E2%83%A3-%E8%A1%A5%E5%85%85%E8%AF%B4%E6%98%8E" class="hash-link" aria-label="7️⃣ 补充说明的直接链接" title="7️⃣ 补充说明的直接链接">​</a></h2><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> * 查找字符串数组中的最长公共前缀</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> * @param strs 字符串数组</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> * @param strsSize 数组长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> * @return 返回最长公共前缀字符串</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">char * longestCommonPrefix(char ** strs, int strsSize){</span><br></span></code></pre></div></div><p>这个函数接收一个字符串数组 <code>strs</code> 和数组长度 <code>strsSize</code>，返回一个新分配内存的字符串，包含最长公共前缀。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="第一步处理边界条件">第一步：处理边界条件<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode14#%E7%AC%AC%E4%B8%80%E6%AD%A5%E5%A4%84%E7%90%86%E8%BE%B9%E7%95%8C%E6%9D%A1%E4%BB%B6" class="hash-link" aria-label="第一步：处理边界条件的直接链接" title="第一步：处理边界条件的直接链接">​</a></h3><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    // 边界条件：如果数组为空，返回空字符串</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if (strsSize == 0) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        char* result = malloc(1);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        result[0] = '\0';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return result;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span></code></pre></div></div><p>如果数组为空，直接返回一个空字符串。这里 <code>malloc(1)</code> 分配一个字节用于存储字符串结束符 <code>'\0'</code>。</p><p>例子：<code>strs = []</code>，<code>strsSize = 0</code></p><ul>
<li>直接返回 <code>""	</code></li>
</ul><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    // 边界条件：如果只有一个字符串，返回该字符串</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if (strsSize == 1) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        char* result = malloc(strlen(strs[0]) + 1);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        strcpy(result, strs[0]);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return result;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span></code></pre></div></div><p>如果只有一个字符串，那么它本身就是公共前缀，复制该字符串并返回。</p><p>例子：<code>strs = ["hello"]</code>，<code>strsSize = 1</code></p><ul>
<li>直接返回 <code>"hello"</code></li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="第二步获取比较基准">第二步：获取比较基准<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode14#%E7%AC%AC%E4%BA%8C%E6%AD%A5%E8%8E%B7%E5%8F%96%E6%AF%94%E8%BE%83%E5%9F%BA%E5%87%86" class="hash-link" aria-label="第二步：获取比较基准的直接链接" title="第二步：获取比较基准的直接链接">​</a></h3><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    // 获取第一个字符串的长度作为比较基准</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    int firstStrLen = strlen(strs[0]);</span><br></span></code></pre></div></div><p>以第一个字符串的长度作为比较的上限，因为公共前缀不可能比任何一个字符串更长。</p><p>例子：<code>strs = ["flower", "flow", "flight"]</code></p><ul>
<li><code>firstStrLen = 6</code>（"flower"的长度）</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="第三步逐字符垂直比较">第三步：逐字符垂直比较<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode14#%E7%AC%AC%E4%B8%89%E6%AD%A5%E9%80%90%E5%AD%97%E7%AC%A6%E5%9E%82%E7%9B%B4%E6%AF%94%E8%BE%83" class="hash-link" aria-label="第三步：逐字符垂直比较的直接链接" title="第三步：逐字符垂直比较的直接链接">​</a></h3><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    // 逐个字符比较</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    for (int i = 0; i &lt; firstStrLen; i++) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        char currentChar = strs[0][i];  // 当前比较的字符</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 检查其他所有字符串在位置i处是否都有相同的字符</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        for (int j = 1; j &lt; strsSize; j++) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            // 如果当前字符串在位置i处没有字符或者字符不匹配</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            if (i &gt;= strlen(strs[j]) || strs[j][i] != currentChar) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                // 找到公共前缀的结束位置，分配内存并复制前缀</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                char* result = malloc(i + 1);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                strncpy(result, strs[0], i);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                result[i] = '\0';  // 添加字符串结束符</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                return result;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span></code></pre></div></div><p><strong>算法核心：垂直扫描法</strong></p><p>这是算法的核心部分，采用垂直扫描的方式：</p><ol>
<li>外层循环遍历第一个字符串的每个字符位置（索引 <code>i</code>）</li>
<li>内层循环检查其他所有字符串在相同位置 <code>i</code> 的字符是否与第一个字符串相同</li>
<li>如果发现不匹配或某个字符串在位置 <code>i</code> 没有字符，则找到了公共前缀的结束位置</li>
</ol><p><strong>详细例子分析</strong></p><p><strong>示例 1:</strong> <code>strs = ["flower", "flow", "flight"]</code></p><table><thead><tr><th>字符位置</th><th>比较内容</th><th>结果</th></tr></thead><tbody><tr><td>i=0</td><td>'f' vs 'f' vs 'f'</td><td>✓ 匹配</td></tr><tr><td>i=1</td><td>'l' vs 'l' vs 'l'</td><td>✓ 匹配</td></tr><tr><td>i=2</td><td>'o' vs 'o' vs 'i'</td><td>✗ 不匹配，返回 "fl"</td></tr></tbody></table><p><strong>示例 2:</strong> <code>strs = ["dog", "racecar", "car"]</code></p><table><thead><tr><th>字符位置</th><th>比较内容</th><th>结果</th></tr></thead><tbody><tr><td>i=0</td><td>'d' vs 'r' vs 'c'</td><td>✗ 不匹配，返回 ""</td></tr></tbody></table><h3 class="anchor anchorWithStickyNavbar_LWe7" id="第四步处理完全匹配的情况">第四步：处理完全匹配的情况<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode14#%E7%AC%AC%E5%9B%9B%E6%AD%A5%E5%A4%84%E7%90%86%E5%AE%8C%E5%85%A8%E5%8C%B9%E9%85%8D%E7%9A%84%E6%83%85%E5%86%B5" class="hash-link" aria-label="第四步：处理完全匹配的情况的直接链接" title="第四步：处理完全匹配的情况的直接链接">​</a></h3><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    // 如果第一个字符串的所有字符都是公共前缀</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    char* result = malloc(firstStrLen + 1);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    strcpy(result, strs[0]);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return result;</span><br></span></code></pre></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="特殊情况处理与完整执行示例">特殊情况处理与完整执行示例<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode14#%E7%89%B9%E6%AE%8A%E6%83%85%E5%86%B5%E5%A4%84%E7%90%86%E4%B8%8E%E5%AE%8C%E6%95%B4%E6%89%A7%E8%A1%8C%E7%A4%BA%E4%BE%8B" class="hash-link" aria-label="特殊情况处理与完整执行示例的直接链接" title="特殊情况处理与完整执行示例的直接链接">​</a></h3><p><strong>全匹配情况处理</strong></p><p>如果第一个字符串的所有字符都是公共前缀（即所有字符串完全相同或都是第一个字符串的前缀），则返回第一个字符串的完整拷贝。</p><p><strong>例子分析：</strong></p><p><strong>示例 1</strong>: <code>strs = ["flow", "flow", "flow"]</code></p><ul>
<li>所有字符都匹配，返回 <code>"flow"</code></li>
</ul><p><strong>示例 2</strong>: <code>strs = ["flow", "flower", "flight"]</code></p><ul>
<li>在比较过程中就会发现不匹配，不会执行到全匹配处理部分</li>
</ul><p><strong>完整执行示例</strong></p><p>以 <code>strs = ["flower", "flow", "flight"]</code> 为例完整执行过程：</p><ol>
<li>
<p><code>strsSize = 3</code>，不满足边界条件</p>
</li>
<li>
<p><code>firstStrLen = 6</code></p>
</li>
<li>
<p>开始循环：</p>
<ul>
<li><code>i=0</code>: <code>currentChar = 'f'</code>
<ul>
<li><code>j=1</code>: <code>strs[1][0] = 'f'</code> ✓ 匹配</li>
<li><code>j=2</code>: <code>strs[2][0] = 'f'</code> ✓ 匹配</li>
</ul>
</li>
<li><code>i=1</code>: <code>currentChar = 'l'</code>
<ul>
<li><code>j=1</code>: <code>strs[1][1] = 'l'</code> ✓ 匹配</li>
<li><code>j=2</code>: <code>strs[2][1] = 'l'</code> ✓ 匹配</li>
</ul>
</li>
<li><code>i=2</code>: <code>currentChar = 'o'</code>
<ul>
<li><code>j=1</code>: <code>strs[1][2] = 'o'</code> ✓ 匹配</li>
<li><code>j=2</code>: <code>strs[2][2] = 'i'</code> ✗ 不匹配！</li>
</ul>
</li>
</ul>
</li>
<li>
<p>分配内存，复制前2个字符 <code>"fl"</code> 并返回</p>
</li>
</ol></div></div></details><div class="blog-post-comments" style="margin-top:2rem;padding-top:1.5rem;border-top:1px solid var(--ifm-color-emphasis-300)"><div style="margin-top:2rem"><div style="min-height:200px">加载评论中...</div></div></div>]]></content:encoded>
            <category>字符串</category>
        </item>
        <item>
            <title><![CDATA[最后一个单词的长度]]></title>
            <link>https://EurekaShadow.github.io/EurekaShadow.github.io/blog/LeetCode58</link>
            <guid>https://EurekaShadow.github.io/EurekaShadow.github.io/blog/LeetCode58</guid>
            <pubDate>Tue, 12 Aug 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[力扣面试经典——58题]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="力扣面试经典58题"><span class="B2_JnYG"><a href="https://leetcode.cn/problems/length-of-last-word/description/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer" title="力扣">力扣面试经典——58题</a></span><a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode58#%E5%8A%9B%E6%89%A3%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B858%E9%A2%98" class="hash-link" aria-label="力扣面试经典58题的直接链接" title="力扣面试经典58题的直接链接">​</a></h3>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-参考代码">💡 参考代码：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode58#-%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81" class="hash-link" aria-label="💡 参考代码：的直接链接" title="💡 参考代码：的直接链接">​</a></h3>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 返回字符串中最后一个单词的长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param s 输入字符串，由若干单词组成，单词前后用空格隔开</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 最后一个单词的长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">lengthOfLastWord</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">char</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 从字符串末尾开始向前遍历，跳过尾部空格</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> end </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">strlen</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">end </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">end</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token char">' '</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        end</span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 从最后一个非空格字符开始，向前计算单词长度</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> length </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">end </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">end</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token char">' '</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        length</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        end</span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 返回最后一个单词的长度</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> length</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-总结">📖 总结：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode58#-%E6%80%BB%E7%BB%93" class="hash-link" aria-label="📖 总结：的直接链接" title="📖 总结：的直接链接">​</a></h3>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>点击展开题目总结</summary><div><div class="collapsibleContent_i85q"><h1>🤔 Length of Last Word</h1><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1️⃣-题目核心信息">1️⃣ 题目核心信息<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode58#1%EF%B8%8F%E2%83%A3-%E9%A2%98%E7%9B%AE%E6%A0%B8%E5%BF%83%E4%BF%A1%E6%81%AF" class="hash-link" aria-label="1️⃣ 题目核心信息的直接链接" title="1️⃣ 题目核心信息的直接链接">​</a></h2><p>🎯 <strong>功能描述</strong>：给定一个由若干单词组成的字符串，单词之间用空格分隔，返回最后一个单词的长度。</p><p>📥 <strong>输入输出</strong>：</p><ul>
<li><strong>输入</strong>：char* s - 一个由英文字母和空格组成的字符串</li>
<li><strong>输出</strong>：int - 字符串中最后一个单词的长度</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2️⃣-实现原理">2️⃣ 实现原理<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode58#2%EF%B8%8F%E2%83%A3-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86" class="hash-link" aria-label="2️⃣ 实现原理的直接链接" title="2️⃣ 实现原理的直接链接">​</a></h2><p>💡 <strong>核心思路</strong>：采用反向遍历的方法，从字符串末尾开始查找，跳过尾部空格后统计最后一个单词的字符个数。</p><p>📋 <strong>实现步骤</strong>：</p><ol>
<li>获取字符串长度，从末尾开始遍历</li>
<li>跳过字符串尾部的所有空格字符</li>
<li>从最后一个非空格字符开始向前统计，直到遇到空格或到达字符串开头</li>
<li>返回统计的字符个数作为最后一个单词的长度</li>
</ol><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3️⃣-关键点解析">3️⃣ 关键点解析<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode58#3%EF%B8%8F%E2%83%A3-%E5%85%B3%E9%94%AE%E7%82%B9%E8%A7%A3%E6%9E%90" class="hash-link" aria-label="3️⃣ 关键点解析的直接链接" title="3️⃣ 关键点解析的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-代码技巧">🎯 代码技巧<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode58#-%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7" class="hash-link" aria-label="🎯 代码技巧的直接链接" title="🎯 代码技巧的直接链接">​</a></h3><ul>
<li>反向遍历：避免处理前导空格，直接定位到最后一个单词</li>
<li>双指针思想：一个指针用于跳过空格，另一个用于统计单词长度</li>
<li>边界处理：正确处理字符串末尾的空格和字符串边界</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4️⃣-使用场景">4️⃣ 使用场景<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode58#4%EF%B8%8F%E2%83%A3-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="4️⃣ 使用场景的直接链接" title="4️⃣ 使用场景的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-适用情况">✅ 适用情况：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode58#-%E9%80%82%E7%94%A8%E6%83%85%E5%86%B5" class="hash-link" aria-label="✅ 适用情况：的直接链接" title="✅ 适用情况：的直接链接">​</a></h3><ul>
<li>需要获取文本中最后一个单词的相关信息</li>
<li>文本处理中需要分析单词结构</li>
<li>字符串解析操作</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-前提条件">⚠️ 前提条件：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode58#%EF%B8%8F-%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6" class="hash-link" aria-label="⚠️ 前提条件：的直接链接" title="⚠️ 前提条件：的直接链接">​</a></h3><ul>
<li>输入字符串至少包含一个单词</li>
<li>单词仅由英文字母组成，单词之间用空格分隔</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5️⃣-复杂度分析">5️⃣ 复杂度分析<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode58#5%EF%B8%8F%E2%83%A3-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90" class="hash-link" aria-label="5️⃣ 复杂度分析的直接链接" title="5️⃣ 复杂度分析的直接链接">​</a></h2><ul>
<li>
<p>⏱️ 时间复杂度：O(n)，其中n是字符串的长度，最坏情况下需要遍历整个字符串</p>
</li>
<li>
<p>💾 空间复杂度：O(1)，只使用了常数级别的额外空间</p>
</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6️⃣-注意事项">6️⃣ 注意事项<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode58#6%EF%B8%8F%E2%83%A3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="6️⃣ 注意事项的直接链接" title="6️⃣ 注意事项的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-边界情况">🚩 边界情况：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode58#-%E8%BE%B9%E7%95%8C%E6%83%85%E5%86%B5" class="hash-link" aria-label="🚩 边界情况：的直接链接" title="🚩 边界情况：的直接链接">​</a></h3><ul>
<li>字符串末尾有多个空格</li>
<li>字符串只有一个单词</li>
<li>字符串开头有多个空格</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-易错点">💥 易错点：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode58#-%E6%98%93%E9%94%99%E7%82%B9" class="hash-link" aria-label="💥 易错点：的直接链接" title="💥 易错点：的直接链接">​</a></h3><ul>
<li>忘记处理字符串末尾的空格</li>
<li>边界条件判断错误，可能导致数组越界</li>
<li>混淆单词长度计算的起止位置</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="7⃣-补充说明">7⃣ 补充说明<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode58#7%E2%83%A3-%E8%A1%A5%E5%85%85%E8%AF%B4%E6%98%8E" class="hash-link" aria-label="7⃣ 补充说明的直接链接" title="7⃣ 补充说明的直接链接">​</a></h2><p>示例: "Hello World"</p><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">字符串: "Hello World"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">索引:    01234567890</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">步骤:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1. end = 10 (指向 '\0' 前的字符 'd')</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">2. 跳过空格: 无尾部空格，end 保持为 10</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">3. 计算单词长度:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   - 'd'(10) -&gt; length=1, end=9</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   - 'l'(9)  -&gt; length=2, end=8</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   - 'r'(8)  -&gt; length=3, end=7</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   - 'o'(7)  -&gt; length=4, end=6</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   - 'W'(6)  -&gt; length=5, end=5</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   - ' '(5)  -&gt; 遇到空格，停止</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">4. 返回 length = 5</span><br></span></code></pre></div></div></div></div></details><div class="blog-post-comments" style="margin-top:2rem;padding-top:1.5rem;border-top:1px solid var(--ifm-color-emphasis-300)"><div style="margin-top:2rem"><div style="min-height:200px">加载评论中...</div></div></div>]]></content:encoded>
            <category>字符串</category>
        </item>
        <item>
            <title><![CDATA[整数转罗马数字]]></title>
            <link>https://EurekaShadow.github.io/EurekaShadow.github.io/blog/LeetCode12</link>
            <guid>https://EurekaShadow.github.io/EurekaShadow.github.io/blog/LeetCode12</guid>
            <pubDate>Mon, 11 Aug 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[力扣面试经典——12题]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="力扣面试经典12题"><span class="B2_JnYG"><a href="https://leetcode.cn/problems/integer-to-roman/description/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer" title="力扣">力扣面试经典——12题</a></span><a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode12#%E5%8A%9B%E6%89%A3%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B812%E9%A2%98" class="hash-link" aria-label="力扣面试经典12题的直接链接" title="力扣面试经典12题的直接链接">​</a></h3>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-参考代码">💡 参考代码：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode12#-%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81" class="hash-link" aria-label="💡 参考代码：的直接链接" title="💡 参考代码：的直接链接">​</a></h3>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 将整数转换为罗马数字</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param num 输入的整数 (范围: 1 &lt;= num &lt;= 3999)</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 返回对应的罗马数字字符串，调用者负责释放返回的字符串内存</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">char</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">intToRoman</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> num</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 定义数值数组，包含所有可能的数值（包括特殊的减法形式）</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 按从大到小的顺序排列，便于贪心算法处理</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> values</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token number" style="color:#36acaa">1000</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">900</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">500</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">400</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">100</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">90</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">50</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">40</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">9</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">5</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 定义与数值数组对应的罗马数字字符串数组</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">char</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> symbols</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token string" style="color:#e3116c">"M"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"CM"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"D"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"CD"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"C"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"XC"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"L"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"XL"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"X"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"IX"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"V"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"IV"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"I"</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 计算数组长度</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">values</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">/</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">values</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 分配结果字符串内存，最大情况下3999对应"MMMDCCCCLXXXXVIIII"，长度不会超过20</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 但为了安全起见，分配足够大的空间</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">char</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">char</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token function" style="color:#d73a49">malloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">20</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">char</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 初始化结果字符串为空字符串</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token comment" style="color:#999988;font-style:italic">//strcat 函数要求目标字符串必须是以 \0 结尾的有效C字符串，否则行为未定义</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    result</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token char">'\0'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 使用贪心算法，从最大的数值开始处理</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> size</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 当前数字大于等于当前数值时，重复处理</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">num </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> values</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 将对应的罗马数字符号追加到结果字符串</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token function" style="color:#d73a49">strcat</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">result</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> symbols</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 从原数字中减去已处理的数值</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            num </span><span class="token operator" style="color:#393A34">-=</span><span class="token plain"> values</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> result</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-总结">📖 总结：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode12#-%E6%80%BB%E7%BB%93" class="hash-link" aria-label="📖 总结：的直接链接" title="📖 总结：的直接链接">​</a></h3>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>点击展开题目总结</summary><div><div class="collapsibleContent_i85q"><h1>🤔 整数转罗马数字</h1><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1️⃣-题目核心信息">1️⃣ 题目核心信息<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode12#1%EF%B8%8F%E2%83%A3-%E9%A2%98%E7%9B%AE%E6%A0%B8%E5%BF%83%E4%BF%A1%E6%81%AF" class="hash-link" aria-label="1️⃣ 题目核心信息的直接链接" title="1️⃣ 题目核心信息的直接链接">​</a></h2><p>🎯 <strong>功能描述</strong>：将给定的整数按照罗马数字规则转换为对应的罗马数字字符串表示</p><p>📥 <strong>输入输出</strong>：</p><ul>
<li><strong>输入</strong>：int num - 需要转换的整数，范围为1-3999</li>
<li><strong>输出</strong>：char* - 返回表示该整数的罗马数字字符串</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2️⃣-实现原理">2️⃣ 实现原理<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode12#2%EF%B8%8F%E2%83%A3-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86" class="hash-link" aria-label="2️⃣ 实现原理的直接链接" title="2️⃣ 实现原理的直接链接">​</a></h2><p>💡 <strong>核心思路</strong>：采用贪心算法，从最大的罗马数字值开始匹配，逐步减去已匹配的值，直到数值为0</p><p>📋 <strong>实现步骤</strong>：</p><ol>
<li>预先定义所有可能的数值和对应的罗马数字符号（包括特殊减法形式）</li>
<li>创建结果字符串并初始化为空</li>
<li>从最大值开始遍历数值数组</li>
<li>对于每个数值，只要原数字大于等于它，就将对应符号添加到结果中并减去该数值</li>
<li>重复步骤4直到原数字变为0，返回结果字符串</li>
</ol><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3️⃣-关键点解析">3️⃣ 关键点解析<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode12#3%EF%B8%8F%E2%83%A3-%E5%85%B3%E9%94%AE%E7%82%B9%E8%A7%A3%E6%9E%90" class="hash-link" aria-label="3️⃣ 关键点解析的直接链接" title="3️⃣ 关键点解析的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-代码技巧">🎯 代码技巧<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode12#-%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7" class="hash-link" aria-label="🎯 代码技巧的直接链接" title="🎯 代码技巧的直接链接">​</a></h3><ul>
<li>使用并行数组存储数值和符号，便于同步处理</li>
<li>采用贪心策略，每次都选择能匹配的最大数值</li>
<li>预先处理特殊减法形式（如4=IV, 9=IX等），简化主逻辑</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4️⃣-使用场景">4️⃣ 使用场景<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode12#4%EF%B8%8F%E2%83%A3-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="4️⃣ 使用场景的直接链接" title="4️⃣ 使用场景的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-适用情况">✅ 适用情况：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode12#-%E9%80%82%E7%94%A8%E6%83%85%E5%86%B5" class="hash-link" aria-label="✅ 适用情况：的直接链接" title="✅ 适用情况：的直接链接">​</a></h3><ul>
<li>数字转换系统中的罗马数字表示</li>
<li>教学或演示数字系统转换</li>
<li>历史文献或特殊格式的数字显示</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-前提条件">⚠️ 前提条件：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode12#%EF%B8%8F-%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6" class="hash-link" aria-label="⚠️ 前提条件：的直接链接" title="⚠️ 前提条件：的直接链接">​</a></h3><ul>
<li>输入必须是1到3999之间的整数</li>
<li>只能处理正整数，不支持0或负数</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5️⃣-复杂度分析">5️⃣ 复杂度分析<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode12#5%EF%B8%8F%E2%83%A3-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90" class="hash-link" aria-label="5️⃣ 复杂度分析的直接链接" title="5️⃣ 复杂度分析的直接链接">​</a></h2><ul>
<li>
<p>⏱️ 时间复杂度：O(1) - 虽然是循环结构，但处理的数值范围有限，最多处理13种不同的数值</p>
</li>
<li>
<p>💾 空间复杂度：O(1) - 使用固定大小的数组和有限长度的结果字符串</p>
</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6️⃣-注意事项">6️⃣ 注意事项<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode12#6%EF%B8%8F%E2%83%A3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="6️⃣ 注意事项的直接链接" title="6️⃣ 注意事项的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-边界情况">🚩 边界情况：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode12#-%E8%BE%B9%E7%95%8C%E6%83%85%E5%86%B5" class="hash-link" aria-label="🚩 边界情况：的直接链接" title="🚩 边界情况：的直接链接">​</a></h3><ul>
<li>输入为1时，应返回"I"</li>
<li>输入为3999时，应返回"MMMCMXCIX"</li>
<li>输入为特殊减法形式如4、9、40等</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-易错点">💥 易错点：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode12#-%E6%98%93%E9%94%99%E7%82%B9" class="hash-link" aria-label="💥 易错点：的直接链接" title="💥 易错点：的直接链接">​</a></h3><ul>
<li>忘记处理特殊减法形式（4、9、40、90、400、900）</li>
<li>数值数组和符号数组不同步或顺序错误</li>
<li>内存管理问题，忘记释放动态分配的内存</li>
<li>没有考虑输入范围限制</li>
</ul></div></div></details><div class="blog-post-comments" style="margin-top:2rem;padding-top:1.5rem;border-top:1px solid var(--ifm-color-emphasis-300)"><div style="margin-top:2rem"><div style="min-height:200px">加载评论中...</div></div></div>]]></content:encoded>
            <category>字符串</category>
        </item>
        <item>
            <title><![CDATA[罗马数字转整数]]></title>
            <link>https://EurekaShadow.github.io/EurekaShadow.github.io/blog/LeetCode13</link>
            <guid>https://EurekaShadow.github.io/EurekaShadow.github.io/blog/LeetCode13</guid>
            <pubDate>Sun, 10 Aug 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[力扣面试经典——13题]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="力扣面试经典13题"><span class="B2_JnYG"><a href="https://leetcode.cn/problems/roman-to-integer/description/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer" title="力扣">力扣面试经典——13题</a></span><a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode13#%E5%8A%9B%E6%89%A3%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B813%E9%A2%98" class="hash-link" aria-label="力扣面试经典13题的直接链接" title="力扣面试经典13题的直接链接">​</a></h3>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-参考代码">💡 参考代码：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode13#-%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81" class="hash-link" aria-label="💡 参考代码：的直接链接" title="💡 参考代码：的直接链接">​</a></h3>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 将罗马字符转换为对应的整数值</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param c - 输入的罗马数字字符，应为 I, V, X, L, C, D, M 中的一个</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 对应的整数值，如果输入无效则返回 0</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *   'I' -&gt; 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *   'V' -&gt; 5</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *   'X' -&gt; 10</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *   'L' -&gt; 50</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *   'C' -&gt; 100</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *   'D' -&gt; 500</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *   'M' -&gt; 1000</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *   其他 -&gt; 0</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">romanCharToInt</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> c</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">switch</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">c</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> </span><span class="token char">'I'</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> </span><span class="token char">'V'</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">5</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> </span><span class="token char">'X'</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> </span><span class="token char">'L'</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">50</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> </span><span class="token char">'C'</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">100</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> </span><span class="token char">'D'</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">500</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> </span><span class="token char">'M'</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1000</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">default</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 将罗马数字字符串转换为对应的整数</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 罗马数字的规则：</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 1. 通常情况下，较小的数字在较大数字的右边，表示相加</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 2. 特殊情况下，较小的数字在较大数字的左边，表示相减</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *    六种减法情况：IV(4), IX(9), XL(40), XC(90), CD(400), CM(900)</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param s - 输入的罗马数字字符串，应为有效的罗马数字格式</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return 对应的整数值</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 算法思路：</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 从左到右遍历字符串，比较当前字符与下一个字符的数值大小：</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * - 如果当前字符数值小于下一个字符数值，则执行减法操作</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * - 否则执行加法操作</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 时间复杂度：O(n)，其中 n 是字符串长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 空间复杂度：O(1)</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">romanToInt</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">char</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> len </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">strlen</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> len</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 获取当前字符和下一个字符对应的数值</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 如果是最后一个字符，则下一个字符值为0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> current </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">romanCharToInt</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> next </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> len </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">romanCharToInt</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 如果当前字符数值小于下一个字符数值，说明是减法情况（如 IV, IX 等）</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 需要从结果中减去当前字符的值</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">current </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> next</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            result </span><span class="token operator" style="color:#393A34">-=</span><span class="token plain"> current</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 正常情况，将当前字符的值加到结果中</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            result </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> current</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> result</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-总结">📖 总结：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode13#-%E6%80%BB%E7%BB%93" class="hash-link" aria-label="📖 总结：的直接链接" title="📖 总结：的直接链接">​</a></h3>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>点击展开题目总结</summary><div><div class="collapsibleContent_i85q"><h1>🤔 罗马数字转整数</h1><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1️⃣-题目核心信息">1️⃣ 题目核心信息<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode13#1%EF%B8%8F%E2%83%A3-%E9%A2%98%E7%9B%AE%E6%A0%B8%E5%BF%83%E4%BF%A1%E6%81%AF" class="hash-link" aria-label="1️⃣ 题目核心信息的直接链接" title="1️⃣ 题目核心信息的直接链接">​</a></h2><p>🎯 <strong>功能描述</strong>：将给定的罗马数字字符串转换为对应的整数值，处理罗马数字的特殊减法规则</p><p>📥 <strong>输入输出</strong>：</p><ul>
<li><strong>输入</strong>：char* s - 有效的罗马数字字符串，包含字符 I, V, X, L, C, D, M</li>
<li><strong>输出</strong>：int - 对应的整数值</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2️⃣-实现原理">2️⃣ 实现原理<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode13#2%EF%B8%8F%E2%83%A3-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86" class="hash-link" aria-label="2️⃣ 实现原理的直接链接" title="2️⃣ 实现原理的直接链接">​</a></h2><p>💡 <strong>核心思路</strong>：通过比较相邻字符的数值大小来判断是加法还是减法规则，从左到右遍历字符串进行累加计算</p><p>📋 <strong>实现步骤</strong>：</p><ol>
<li>建立罗马字符到整数值的映射关系</li>
<li>从左到右遍历罗马数字字符串</li>
<li>比较当前字符与下一个字符的数值大小</li>
<li>如果当前字符值小于下一个字符值，则执行减法；否则执行加法</li>
</ol><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3️⃣-关键点解析">3️⃣ 关键点解析<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode13#3%EF%B8%8F%E2%83%A3-%E5%85%B3%E9%94%AE%E7%82%B9%E8%A7%A3%E6%9E%90" class="hash-link" aria-label="3️⃣ 关键点解析的直接链接" title="3️⃣ 关键点解析的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-代码技巧">🎯 代码技巧<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode13#-%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7" class="hash-link" aria-label="🎯 代码技巧的直接链接" title="🎯 代码技巧的直接链接">​</a></h3><ul>
<li>使用三元运算符处理边界情况：当访问到最后一个字符时，下一个字符值设为0</li>
<li>通过比较相邻元素大小来统一处理加法和减法规则</li>
<li>使用switch语句快速映射字符到数值</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4️⃣-使用场景">4️⃣ 使用场景<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode13#4%EF%B8%8F%E2%83%A3-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="4️⃣ 使用场景的直接链接" title="4️⃣ 使用场景的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-适用情况">✅ 适用情况：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode13#-%E9%80%82%E7%94%A8%E6%83%85%E5%86%B5" class="hash-link" aria-label="✅ 适用情况：的直接链接" title="✅ 适用情况：的直接链接">​</a></h3><ul>
<li>罗马数字转换程序</li>
<li>历史文献中的数字解析</li>
<li>教学演示罗马数字规则</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-前提条件">⚠️ 前提条件：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode13#%EF%B8%8F-%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6" class="hash-link" aria-label="⚠️ 前提条件：的直接链接" title="⚠️ 前提条件：的直接链接">​</a></h3><ul>
<li>输入字符串必须是有效的罗马数字格式</li>
<li>字符串只包含合法的罗马数字字符 I, V, X, L, C, D, M</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5️⃣-复杂度分析">5️⃣ 复杂度分析<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode13#5%EF%B8%8F%E2%83%A3-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90" class="hash-link" aria-label="5️⃣ 复杂度分析的直接链接" title="5️⃣ 复杂度分析的直接链接">​</a></h2><ul>
<li>
<p>⏱️ 时间复杂度：O(n)，其中 n 是字符串长度，需要遍历一次字符串</p>
</li>
<li>
<p>💾 空间复杂度：O(1)，只使用了常数级别的额外空间</p>
</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6️⃣-注意事项">6️⃣ 注意事项<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode13#6%EF%B8%8F%E2%83%A3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="6️⃣ 注意事项的直接链接" title="6️⃣ 注意事项的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-边界情况">🚩 边界情况：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode13#-%E8%BE%B9%E7%95%8C%E6%83%85%E5%86%B5" class="hash-link" aria-label="🚩 边界情况：的直接链接" title="🚩 边界情况：的直接链接">​</a></h3><ul>
<li>空字符串或NULL指针</li>
<li>只有一个字符的罗马数字</li>
<li>最后一个字符的处理</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-易错点">💥 易错点：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode13#-%E6%98%93%E9%94%99%E7%82%B9" class="hash-link" aria-label="💥 易错点：的直接链接" title="💥 易错点：的直接链接">​</a></h3><ul>
<li>忘记处理减法规则的特殊情况</li>
<li>数组越界访问下一个字符</li>
<li>没有正确处理字符串边界条件</li>
</ul></div></div></details><div class="blog-post-comments" style="margin-top:2rem;padding-top:1.5rem;border-top:1px solid var(--ifm-color-emphasis-300)"><div style="margin-top:2rem"><div style="min-height:200px">加载评论中...</div></div></div>]]></content:encoded>
            <category>字符串</category>
        </item>
        <item>
            <title><![CDATA[接雨水]]></title>
            <link>https://EurekaShadow.github.io/EurekaShadow.github.io/blog/LeetCode42</link>
            <guid>https://EurekaShadow.github.io/EurekaShadow.github.io/blog/LeetCode42</guid>
            <pubDate>Sat, 09 Aug 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[力扣面试经典——42题]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="力扣面试经典42题"><span class="B2_JnYG"><a href="https://leetcode.cn/problems/trapping-rain-water/description/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer" title="力扣">力扣面试经典——42题</a></span><a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode42#%E5%8A%9B%E6%89%A3%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B842%E9%A2%98" class="hash-link" aria-label="力扣面试经典42题的直接链接" title="力扣面试经典42题的直接链接">​</a></h3>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-参考代码">💡 参考代码：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode42#-%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81" class="hash-link" aria-label="💡 参考代码：的直接链接" title="💡 参考代码：的直接链接">​</a></h3>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @brief 计算柱状图中能够接住的雨水总量</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 使用双指针法解决接雨水问题。对于每个位置，能接住的雨水量取决于其左侧和右侧的最大高度中的较小值。</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 通过维护两个指针和对应的左右侧最大高度，从两端向中间遍历，累计可接雨水量。</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param height 柱子高度数组，每个元素代表一个宽度为1的柱子的高度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param heightSize 数组长度，表示柱子的数量</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return int 返回能够接住的雨水总量</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @example</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 输入: height = [0,1,0,2,1,0,1,3,2,1,2,1], heightSize = 12</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 输出: 6</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @example</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 输入: height = [4,2,0,3,2,5], heightSize = 6</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 输出: 9</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @complexity</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 时间复杂度: O(n) - 只需要遍历一次数组</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 空间复杂度: O(1) - 只使用了常数级别的额外空间</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">trap</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> height</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> heightSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 柱子数量少于3个时无法接住雨水</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">heightSize </span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> left </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">           </span><span class="token comment" style="color:#999988;font-style:italic">// 左指针，从数组起始位置开始</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> right </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> heightSize </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 右指针，从数组末尾位置开始</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> leftMax </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 记录左侧遍历过程中的最大高度</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> rightMax </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">       </span><span class="token comment" style="color:#999988;font-style:italic">// 记录右侧遍历过程中的最大高度</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">         </span><span class="token comment" style="color:#999988;font-style:italic">// 累计接住的雨水总量</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 双指针向中间移动，直到相遇</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">left </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> right</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 当左侧柱子高度小于右侧柱子高度时，处理左侧</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">height</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">left</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> height</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">right</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 如果当前柱子高度大于等于左侧最大高度，说明此位置接不到雨水</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">height</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">left</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> leftMax</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                leftMax </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> height</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">left</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token comment" style="color:#999988;font-style:italic">//更新左侧最大高度</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token comment" style="color:#999988;font-style:italic">// 否则可以接住雨水，累加到结果中</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                result </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> leftMax </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> height</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">left</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            left</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 左指针右移</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 当右侧柱子高度小于等于左侧柱子高度时，处理右侧</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 如果当前柱子高度大于等于右侧最大高度，说明此位置接不到雨水</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">height</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">right</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> rightMax</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                rightMax </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> height</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">right</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token comment" style="color:#999988;font-style:italic">//更新右侧最大高度</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token comment" style="color:#999988;font-style:italic">// 否则可以接住雨水，累加到结果中</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                result </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> rightMax </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> height</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">right</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            right</span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 右指针左移</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> result</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 返回接住的雨水总量</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-总结">📖 总结：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode42#-%E6%80%BB%E7%BB%93" class="hash-link" aria-label="📖 总结：的直接链接" title="📖 总结：的直接链接">​</a></h3>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>点击展开题目总结</summary><div><div class="collapsibleContent_i85q"><h1>🤔 接雨水</h1><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1️⃣-题目核心信息">1️⃣ 题目核心信息<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode42#1%EF%B8%8F%E2%83%A3-%E9%A2%98%E7%9B%AE%E6%A0%B8%E5%BF%83%E4%BF%A1%E6%81%AF" class="hash-link" aria-label="1️⃣ 题目核心信息的直接链接" title="1️⃣ 题目核心信息的直接链接">​</a></h2><p>🎯 <strong>功能描述</strong>：给定n个非负整数表示每个宽度为1的柱子的高度图，计算按此排列的柱子下雨之后能接多少雨水。</p><p>📥 <strong>输入输出</strong>：</p><ul>
<li><strong>输入</strong>：<code>height</code> - 柱子高度数组，每个元素代表一个宽度为1的柱子的高度；<code>heightSize</code> - 数组长度</li>
<li><strong>输出</strong>：返回能够接住的雨水总量（整数）</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2️⃣-实现原理">2️⃣ 实现原理<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode42#2%EF%B8%8F%E2%83%A3-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86" class="hash-link" aria-label="2️⃣ 实现原理的直接链接" title="2️⃣ 实现原理的直接链接">​</a></h2><p>💡 <strong>核心思路</strong>：使用双指针法，从数组两端向中间遍历，通过维护左右两侧的最大高度来计算每个位置能够接住的雨水量。</p><p>📋 <strong>实现步骤</strong>：</p><ol>
<li>初始化左右指针分别指向数组首尾，同时维护左侧最大高度和右侧最大高度</li>
<li>比较左右指针所指元素的大小，选择较小的一侧进行处理</li>
<li>如果当前元素大于等于该侧最大高度，则更新最大高度</li>
<li>如果当前元素小于该侧最大高度，则累加可接雨水量（最大高度减去当前高度）</li>
<li>移动处理过的指针，重复步骤2-4直到左右指针相遇</li>
</ol><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3️⃣-关键点解析">3️⃣ 关键点解析<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode42#3%EF%B8%8F%E2%83%A3-%E5%85%B3%E9%94%AE%E7%82%B9%E8%A7%A3%E6%9E%90" class="hash-link" aria-label="3️⃣ 关键点解析的直接链接" title="3️⃣ 关键点解析的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-代码技巧">🎯 代码技巧<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode42#-%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7" class="hash-link" aria-label="🎯 代码技巧的直接链接" title="🎯 代码技巧的直接链接">​</a></h3><ul>
<li>使用双指针从两端向中间逼近，减少空间复杂度</li>
<li>利用"短板效应"思想，总是处理较矮一侧的柱子</li>
<li>通过维护单侧最大值避免了预处理整个数组的需要</li>
<li>巧妙利用高度比较结果决定处理方向</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4️⃣-使用场景">4️⃣ 使用场景<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode42#4%EF%B8%8F%E2%83%A3-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="4️⃣ 使用场景的直接链接" title="4️⃣ 使用场景的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-适用情况">✅ 适用情况：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode42#-%E9%80%82%E7%94%A8%E6%83%85%E5%86%B5" class="hash-link" aria-label="✅ 适用情况：的直接链接" title="✅ 适用情况：的直接链接">​</a></h3><ul>
<li>需要计算地形中能够存储的水量</li>
<li>处理类似"容器盛水"的几何问题</li>
<li>需要在数组中寻找"凹陷"区域的累积值</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-前提条件">⚠️ 前提条件：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode42#%EF%B8%8F-%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6" class="hash-link" aria-label="⚠️ 前提条件：的直接链接" title="⚠️ 前提条件：的直接链接">​</a></h3><ul>
<li>输入数组元素为非负整数</li>
<li>数组长度至少为3才能接住雨水</li>
<li>每个柱子宽度固定为1</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5️⃣-复杂度分析">5️⃣ 复杂度分析<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode42#5%EF%B8%8F%E2%83%A3-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90" class="hash-link" aria-label="5️⃣ 复杂度分析的直接链接" title="5️⃣ 复杂度分析的直接链接">​</a></h2><ul>
<li>
<p>⏱️ 时间复杂度：O(n) - 只需要遍历一次数组，每个元素最多被访问一次</p>
</li>
<li>
<p>💾 空间复杂度：O(1) - 只使用了常数级别的额外空间，不依赖数组大小</p>
</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6️⃣-注意事项">6️⃣ 注意事项<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode42#6%EF%B8%8F%E2%83%A3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="6️⃣ 注意事项的直接链接" title="6️⃣ 注意事项的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-边界情况">🚩 边界情况：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode42#-%E8%BE%B9%E7%95%8C%E6%83%85%E5%86%B5" class="hash-link" aria-label="🚩 边界情况：的直接链接" title="🚩 边界情况：的直接链接">​</a></h3><ul>
<li>数组长度小于3时无法接住雨水，直接返回0</li>
<li>数组为空或为NULL的情况</li>
<li>所有柱子高度相同的情况</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-易错点">💥 易错点：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode42#-%E6%98%93%E9%94%99%E7%82%B9" class="hash-link" aria-label="💥 易错点：的直接链接" title="💥 易错点：的直接链接">​</a></h3><ul>
<li>混淆左右最大高度的更新条件，应该是大于等于时更新</li>
<li>忘记在处理完一个位置后移动指针</li>
<li>错误地在两侧高度相等时的处理逻辑</li>
<li>没有正确理解雨水量计算公式：min(leftMax, rightMax) - currentHeight</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="7️⃣-补充解释">7️⃣ 补充解释<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode42#7%EF%B8%8F%E2%83%A3-%E8%A1%A5%E5%85%85%E8%A7%A3%E9%87%8A" class="hash-link" aria-label="7️⃣ 补充解释的直接链接" title="7️⃣ 补充解释的直接链接">​</a></h2><p>正确的理解方式
让我用一个简单的例子来说明：</p><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">索引:     0   1   2   3   4   5   6</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">高度:     2   0   1   0   0   1   3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          L           *           R</span><br></span></code></pre></div></div><p>对于位置 * (索引3)，它的"两侧"是指：</p><ul>
<li>左侧：<code>height[0]</code>, <code>height[1]</code>, <code>height[2]</code> 中的最大值 = max(2,0,1) = 2</li>
<li>右侧：<code>height[4]</code>, <code>height[5]</code>, <code>height[6]</code> 中的最大值 = max(0,1,3) = 3
所以位置3能接的雨水 = min(2,3) - 0 = 2</li>
</ul><p>为什么比较<code>height[0]</code>和<code>height[11]</code>？</p><p>在双指针法中，我们比较 <code>height[left]</code> 和 <code>height[right]</code> 并不是为了计算这两个位置的雨水，而是为了确定处理方向。</p><p>这背后的逻辑是：</p><ul>
<li>
<p>如果 <code>height[left]</code> &lt; <code>height[right]</code>，那么我们可以确定左侧指针指向的位置的雨水量只由左侧最大值决定</p>
</li>
<li>
<p>这是因为右边有一个更高的墙，水面高度至少能达到左边的最大值</p>
</li>
</ul><p>举个更直观的例子</p><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">索引:  0  1  2  3  4  5  6  7</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">高度:  3  0  0  0  0  0  0  5</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       L                    R</span><br></span></code></pre></div></div><p>当我们比较 height[0]=3 和 height[7]=5 时：</p><ul>
<li>
<p>因为 3 &lt; 5，所以我们处理左侧位置(索引0)</p>
</li>
<li>
<p>但索引0是边界，不能接雨水</p>
</li>
<li>
<p>然后 left++，继续处理索引1的位置
对于索引1的位置：</p>
</li>
<li>
<p>它左边的最大值是3</p>
</li>
<li>
<p>它右边的最大值是5(注意：是整个右边的最大值，不只是相邻的)</p>
</li>
<li>
<p>所以它能接的雨水 = min(3,5) - 0 = 3</p>
</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="总结">总结<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode42#%E6%80%BB%E7%BB%93" class="hash-link" aria-label="总结的直接链接" title="总结的直接链接">​</a></h3><ul>
<li>
<p>"两侧"指的是当前位置左边所有柱子中的最大值和右边所有柱子中的最大值</p>
</li>
<li>
<p>比较 height[left] 和 height[right] 是为了决定处理策略，而不是计算这两个位置的雨水</p>
</li>
<li>
<p>这是一个巧妙的优化，避免了需要预计算每个位置左右两侧最大值的步骤</p>
</li>
</ul><p><strong>有点懂了，但没完全懂⬇️</strong></p><p></p><p>我理解的 <code>左侧</code>、<code>右侧</code> 这里的左右侧并不是指某个位置的左右侧，而是左右侧的指针（即上面定义的 left 和 right），比如刚开始时 <code>height[left] &lt; height[right]</code> 的
话，表明此刻应该处理左侧指针指向的位置（而并非该位置的左侧）。如果该位置的值 height[left] = 2 ,leftMax = 1 ,即此刻该位置无法接到雨水，像下面这样：</p><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">      |⬅️//右侧这里相当有无形的“墙”，高度至少是 height[right]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    █ | //真正决定能够接多少雨水的是 leftMax</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  █ █ | //此处 leftMax 过小，可见无法接到雨水，于是要更新 leftMax = height[left]</span><br></span></code></pre></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="8️⃣-更多解法">8️⃣ 更多解法<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode42#8%EF%B8%8F%E2%83%A3-%E6%9B%B4%E5%A4%9A%E8%A7%A3%E6%B3%95" class="hash-link" aria-label="8️⃣ 更多解法的直接链接" title="8️⃣ 更多解法的直接链接">​</a></h2><p>以下两种解法，我<strong>尚不理解</strong>，但也补充上，供日后参考、研究。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="动态规划">动态规划<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode42#%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92" class="hash-link" aria-label="动态规划的直接链接" title="动态规划的直接链接">​</a></h3><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @brief 计算柱状图中能够接住的雨水总量</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 使用动态规划方法解决接雨水问题。通过预计算每个位置左侧和右侧的最大高度，</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 然后根据"短板效应"计算每个位置能够接住的雨水量。</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 核心公式：每个位置能接住的雨水量 = min(左侧最大高度, 右侧最大高度) - 当前位置高度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param height 柱子高度数组，每个元素代表一个宽度为1的柱子的高度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param heightSize 数组长度，表示柱子的数量</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return int 返回能够接住的雨水总量</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @example</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 输入: height = [0,1,0,2,1,0,1,3,2,1,2,1], heightSize = 12</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 输出: 6</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @example</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 输入: height = [4,2,0,3,2,5], heightSize = 6</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 输出: 9</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @complexity</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 时间复杂度: O(n) - 需要遍历数组三次</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 空间复杂度: O(n) - 需要额外的两个数组存储左侧和右侧最大高度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">trap</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> height</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> heightSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 边界条件：柱子数量少于3个时无法接住雨水</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">heightSize </span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 分配内存存储每个位置左侧的最大高度</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> leftMax </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token function" style="color:#d73a49">malloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> heightSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 初始化第一个位置的左侧最大高度为自身</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    leftMax</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> height</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 从左到右遍历，计算每个位置左侧的最大高度</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// leftMax[i] 表示 height[0..i] 中的最大值</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> heightSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        leftMax</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">leftMax</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> height</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> leftMax</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> height</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 分配内存存储每个位置右侧的最大高度</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> rightMax </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token function" style="color:#d73a49">malloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> heightSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 初始化最后一个位置的右侧最大高度为自身</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    rightMax</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">heightSize </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> height</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">heightSize </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 从右到左遍历，计算每个位置右侧的最大高度</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// rightMax[i] 表示 height[i..heightSize-1] 中的最大值</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> heightSize </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        rightMax</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">rightMax</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> height</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> rightMax</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> height</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 计算总的雨水量</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 遍历每个位置，计算该位置能接住的雨水量</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> heightSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 根据"短板效应"，水面高度由两侧最大高度的较小值决定</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> minHeight </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">leftMax</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> rightMax</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> leftMax</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> rightMax</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 只有当水面高度大于当前位置高度时才能接住雨水</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">minHeight </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> height</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 累加该位置的雨水量</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            result </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> minHeight </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> height</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 释放动态分配的内存</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">free</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">leftMax</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">free</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">rightMax</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 返回接住的雨水总量</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> result</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div><hr><h3 class="anchor anchorWithStickyNavbar_LWe7" id="单调栈">单调栈<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode42#%E5%8D%95%E8%B0%83%E6%A0%88" class="hash-link" aria-label="单调栈的直接链接" title="单调栈的直接链接">​</a></h3><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @brief 计算柱状图中能够接住的雨水总量</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 使用单调栈方法解决接雨水问题。通过维护一个单调递减的栈来追踪可能形成凹陷的柱子，</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 当遇到较高的柱子时，计算由当前柱子、栈顶柱子和栈中下一个柱子形成的凹陷区域的雨水量。</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param height 柱子高度数组，每个元素代表一个宽度为1的柱子的高度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param heightSize 数组长度，表示柱子的数量</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return int 返回能够接住的雨水总量</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @example</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 输入: height = [0,1,0,2,1,0,1,3,2,1,2,1], heightSize = 12</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 输出: 6</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @example</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 输入: height = [4,2,0,3,2,5], heightSize = 6</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 输出: 9</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @complexity</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 时间复杂度: O(n) - 每个元素最多入栈和出栈一次</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 空间复杂度: O(n) - 最坏情况下栈中存储所有元素</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">trap</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> height</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> heightSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 边界条件：柱子数量少于3个时无法接住雨水</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">heightSize </span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 创建栈用于存储柱子的索引</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> stack </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token function" style="color:#d73a49">malloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> heightSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> top </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 栈顶指针，-1表示空栈</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 累计接住的雨水总量</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 从左到右遍历每个柱子</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> heightSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 当栈不为空且当前柱子高度大于栈顶柱子高度时</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">top </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> height</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> height</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">stack</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">top</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 弹出栈顶元素作为凹陷的底部</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> bottom </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> stack</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">top</span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 如果栈为空，说明没有左边界，无法形成凹陷</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">top </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 计算凹陷区域的水平距离（宽度）</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 距离 = 右边界索引 - 左边界索引 - 1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> distance </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> stack</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">top</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 计算凹陷区域的高度</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 高度 = min(左边界高度, 右边界高度) - 底部高度</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> boundedHeight </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">height</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> height</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">stack</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">top</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> height</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> height</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">stack</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">top</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> height</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">bottom</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// 累加雨水量 = 宽度 × 高度</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            result </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> distance </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> boundedHeight</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// 将当前柱子索引入栈</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        stack</span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">++</span><span class="token plain">top</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 释放动态分配的栈内存</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">free</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">stack</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 返回接住的雨水总量</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> result</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div></div></div></details><div class="blog-post-comments" style="margin-top:2rem;padding-top:1.5rem;border-top:1px solid var(--ifm-color-emphasis-300)"><div style="margin-top:2rem"><div style="min-height:200px">加载评论中...</div></div></div>]]></content:encoded>
            <category>数组</category>
            <category>双指针</category>
        </item>
        <item>
            <title><![CDATA[分发糖果]]></title>
            <link>https://EurekaShadow.github.io/EurekaShadow.github.io/blog/LeetCode135</link>
            <guid>https://EurekaShadow.github.io/EurekaShadow.github.io/blog/LeetCode135</guid>
            <pubDate>Fri, 08 Aug 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[力扣面试经典——135题]]></description>
            <content:encoded><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="力扣面试经典135题"><span class="B2_JnYG"><a href="https://leetcode.cn/problems/candy/description/?envType=study-plan-v2&amp;envId=top-interview-150" target="_blank" rel="noopener noreferrer" title="力扣">力扣面试经典——135题</a></span><a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode135#%E5%8A%9B%E6%89%A3%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%85%B8135%E9%A2%98" class="hash-link" aria-label="力扣面试经典135题的直接链接" title="力扣面试经典135题的直接链接">​</a></h3>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-参考代码">💡 参考代码：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode135#-%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81" class="hash-link" aria-label="💡 参考代码：的直接链接" title="💡 参考代码：的直接链接">​</a></h3>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @brief 计算分发糖果的最少数量</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 根据孩子们的评分分配糖果，满足以下条件：</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 1. 每个孩子至少分配到1个糖果</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * 2. 相邻两个孩子中，评分更高的孩子会获得更多的糖果</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param ratings 孩子们的评分数组</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @param ratingsSize 评分数组的长度</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @return int 需要准备的最少糖果数目</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @details 算法采用两次遍历策略：</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          1. 从左到右遍历：确保右边评分高的孩子比左边相邻孩子获得更多糖果</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          2. 从右到左遍历：确保左边评分高的孩子比右边相邻孩子获得更多糖果</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          时间复杂度：O(n)，空间复杂度：O(n)</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @example </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          输入：ratings = [1,0,2]</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          输出：5</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          解释：分别给三个孩子分发2、1、2颗糖果</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @example</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          输入：ratings = [1,2,2]</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          输出：4</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> *          解释：分别给三个孩子分发1、2、1颗糖果</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">candy</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> ratings</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> ratingsSize</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ratingsSize </span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> ratingsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 初始化每个孩子至少1个糖果</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> candies </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token function" style="color:#d73a49">calloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ratingsSize</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> ratingsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        candies</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 从左到右遍历：确保右边评分高的孩子比左边相邻的孩子获得更多糖果</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> ratingsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ratings</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> ratings</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            candies</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> candies</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 从右到左遍历：确保左边评分高的孩子比右边相邻的孩子获得更多糖果</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ratingsSize </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ratings</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> ratings</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            candies</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">candies</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> candies</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> candies</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> candies</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// 计算总糖果数</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> total </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> ratingsSize</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        total </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> candies</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">free</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">candies</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> total</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-总结">📖 总结：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode135#-%E6%80%BB%E7%BB%93" class="hash-link" aria-label="📖 总结：的直接链接" title="📖 总结：的直接链接">​</a></h3>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>点击展开题目总结</summary><div><div class="collapsibleContent_i85q"><h1>🤔 分发糖果</h1><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1️⃣-题目核心信息">1️⃣ 题目核心信息<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode135#1%EF%B8%8F%E2%83%A3-%E9%A2%98%E7%9B%AE%E6%A0%B8%E5%BF%83%E4%BF%A1%E6%81%AF" class="hash-link" aria-label="1️⃣ 题目核心信息的直接链接" title="1️⃣ 题目核心信息的直接链接">​</a></h2><p>🎯 <strong>功能描述</strong>：根据孩子们的评分分配糖果，确保每个孩子至少获得1颗糖果，且评分更高的孩子比相邻孩子获得更多糖果，求最少需要的糖果总数。</p><p>📥 <strong>输入输出</strong>：</p><ul>
<li><strong>输入</strong>：<code>int* ratings</code> - 孩子们的评分数组，<code>int ratingsSize</code> - 数组长度</li>
<li><strong>输出</strong>：<code>int</code> - 需要准备的最少糖果数目</li>
</ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2️⃣-实现原理">2️⃣ 实现原理<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode135#2%EF%B8%8F%E2%83%A3-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86" class="hash-link" aria-label="2️⃣ 实现原理的直接链接" title="2️⃣ 实现原理的直接链接">​</a></h2><p>💡 <strong>核心思路</strong>：采用两次遍历的贪心算法，分别处理左右两个方向的约束关系，确保满足所有相邻比较条件。</p><p>📋 <strong>实现步骤</strong>：</p><ol>
<li>初始化每个孩子分配1颗糖果</li>
<li>从左到右遍历，确保右边评分高的孩子比左边相邻孩子获得更多糖果</li>
<li>从右到左遍历，确保左边评分高的孩子比右边相邻孩子获得更多糖果</li>
<li>累加所有孩子的糖果数作为结果返回</li>
</ol><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3️⃣-关键点解析">3️⃣ 关键点解析<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode135#3%EF%B8%8F%E2%83%A3-%E5%85%B3%E9%94%AE%E7%82%B9%E8%A7%A3%E6%9E%90" class="hash-link" aria-label="3️⃣ 关键点解析的直接链接" title="3️⃣ 关键点解析的直接链接">​</a></h2><p>原始思路是单向遍历，但存在问题：只考虑了单方向的约束关系，忽略了反向也可能影响糖果分配。最优解通过两次遍历，分别处理左右两个方向的约束，确保结果正确。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-代码技巧">🎯 代码技巧<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode135#-%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7" class="hash-link" aria-label="🎯 代码技巧的直接链接" title="🎯 代码技巧的直接链接">​</a></h3><ul>
<li>使用 <code>calloc</code> 初始化数组，同时分配内存和置零</li>
<li>两次遍历分别处理不同方向的约束条件</li>
<li>使用三元运算符 <code>? :</code> 简洁地实现 <code>max</code> 操作</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4️⃣-使用场景">4️⃣ 使用场景<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode135#4%EF%B8%8F%E2%83%A3-%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="4️⃣ 使用场景的直接链接" title="4️⃣ 使用场景的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-适用情况">✅ 适用情况：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode135#-%E9%80%82%E7%94%A8%E6%83%85%E5%86%B5" class="hash-link" aria-label="✅ 适用情况：的直接链接" title="✅ 适用情况：的直接链接">​</a></h3><ul>
<li>需要满足双向相邻约束的优化问题</li>
<li>资源分配需要考虑左右邻居关系的场景</li>
<li>贪心算法中需要多轮约束满足的问题</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="️-前提条件">⚠️ 前提条件：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode135#%EF%B8%8F-%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6" class="hash-link" aria-label="⚠️ 前提条件：的直接链接" title="⚠️ 前提条件：的直接链接">​</a></h3><ul>
<li>输入数组不为空</li>
<li>评分值为非负整数</li>
<li>需要满足题目规定的两个分配条件</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5️⃣-复杂度分析">5️⃣ 复杂度分析<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode135#5%EF%B8%8F%E2%83%A3-%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90" class="hash-link" aria-label="5️⃣ 复杂度分析的直接链接" title="5️⃣ 复杂度分析的直接链接">​</a></h2><ul>
<li>
<p>⏱️ 时间复杂度：O(n) - 需要三次遍历数组（初始化一次，左右遍历各一次）</p>
</li>
<li>
<p>💾 空间复杂度：O(n) - 需要额外数组存储每个孩子的糖果数</p>
</li>
</ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6️⃣-注意事项">6️⃣ 注意事项<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode135#6%EF%B8%8F%E2%83%A3-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" class="hash-link" aria-label="6️⃣ 注意事项的直接链接" title="6️⃣ 注意事项的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-边界情况">🚩 边界情况：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode135#-%E8%BE%B9%E7%95%8C%E6%83%85%E5%86%B5" class="hash-link" aria-label="🚩 边界情况：的直接链接" title="🚩 边界情况：的直接链接">​</a></h3><ul>
<li>空数组或只有一个孩子的情况</li>
<li>所有孩子评分相同的情况</li>
<li>评分严格递增或递减的情况</li>
</ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-易错点">💥 易错点：<a href="https://eurekashadow.github.io/EurekaShadow.github.io/blog/LeetCode135#-%E6%98%93%E9%94%99%E7%82%B9" class="hash-link" aria-label="💥 易错点：的直接链接" title="💥 易错点：的直接链接">​</a></h3><ul>
<li>只进行单向遍历，忽略反向约束关系</li>
<li>错误使用 <code>memset</code> 给 int 数组赋值为1</li>
<li>在更新糖果数时没有取最大值，导致不满足约束条件</li>
</ul></div></div></details><div class="blog-post-comments" style="margin-top:2rem;padding-top:1.5rem;border-top:1px solid var(--ifm-color-emphasis-300)"><div style="margin-top:2rem"><div style="min-height:200px">加载评论中...</div></div></div>]]></content:encoded>
            <category>数组</category>
        </item>
    </channel>
</rss>